// Virtual circuit produced from Aa description by Aa2VC 
$module [fdiv32] 
{
  $in a:$float<11,52>
  // can point into  foreign( $void )
  b:$float<11,52>
  // can point into  foreign( $void )
  $out ret_val__:$float<11,52>
  // can point into  foreign( $void )
  // pipe-declarations for block %fdiv32
  //  file prog.linked.opt.aa, line 1
  // pipe-declarations for block %fdiv32%body
  //  file prog.linked.opt.aa, line 6
  // pipe-declarations for block %fdiv32%body%
  //  file prog.linked.opt.aa, line 18
  // pipe-declarations for block %fdiv32%body%
  //  file prog.linked.opt.aa, line 26
  // pipe-declarations for block %fdiv32%body%
  //  file prog.linked.opt.aa, line 56
  // pipe-declarations for block %fdiv32%body%
  //  file prog.linked.opt.aa, line 62
  // pipe-declarations for block %fdiv32%body%
  //  file prog.linked.opt.aa, line 70
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_5] // Branch Block  file prog.linked.opt.aa, line 6
    {
      $P [branch_block_stmt_5__entry__]
      branch_block_stmt_5__entry__ <-| ($entry)
      $P [branch_block_stmt_5__exit__]
      branch_block_stmt_5__exit__ |-> ($exit)
      $P [assign_stmt_10_to_assign_stmt_33__entry__] 
      $P [assign_stmt_10_to_assign_stmt_33__exit__] 
      $P [if_stmt_34__entry__] 
      $P [if_stmt_34__exit__] 
      $P [merge_stmt_40__entry__] 
      $P [merge_stmt_40__exit__] 
      $P [assign_stmt_46_to_assign_stmt_69__entry__] 
      $P [assign_stmt_46_to_assign_stmt_69__exit__] 
      $P [bb_1_bb_2]
      $P [merge_stmt_71__exit__] 
      $P [assign_stmt_85_to_assign_stmt_197__entry__] 
      $P [assign_stmt_85_to_assign_stmt_197__exit__] 
      $P [if_stmt_198__entry__] 
      $P [if_stmt_198__exit__] 
      $P [merge_stmt_204__entry__] 
      $P [merge_stmt_204__exit__] 
      $P [assign_stmt_209_to_assign_stmt_219__entry__] 
      $P [assign_stmt_209_to_assign_stmt_219__exit__] 
      $P [bb_3_bb_4]
      $P [merge_stmt_221__exit__] 
      $P [assign_stmt_234_to_assign_stmt_249__entry__] 
      $P [assign_stmt_234_to_assign_stmt_249__exit__] 
      $P [return__]
      $P [merge_stmt_251__exit__] 
      ::[assign_stmt_10_to_assign_stmt_33] 
      {
        // 		tmp17 := ($bitcast ($uint<64>) a )
        //  file prog.linked.opt.aa, line 8
        // Source expression
        // ($bitcast ($uint<64>) a )
        $T[type_cast_9_sample_start_] 
        $T[type_cast_9_sample_completed_] 
        $T[type_cast_9_update_start_] 
        $T[type_cast_9_update_completed_] 
        // a
        $T[R_a_8_sample_start_] 
        $T[R_a_8_sample_completed_] 
        $T[R_a_8_update_start_] 
        $T[R_a_8_update_completed_] 
        // reference to interface object
        R_a_8_sample_start_ <-& ($entry)
        R_a_8_sample_completed_ <-& (R_a_8_sample_start_)
        R_a_8_update_start_ <-& (R_a_8_sample_completed_)
        R_a_8_update_completed_ <-& (R_a_8_update_start_)
        type_cast_9_sample_start_ <-& (R_a_8_update_completed_)
        ;;[type_cast_9_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_9_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_9_sample_start_ &-> (type_cast_9_Sample)
        type_cast_9_sample_completed_ <-& (type_cast_9_Sample)
        type_cast_9_sample_completed_ &-> ($null)
        type_cast_9_update_start_ &-> (type_cast_9_Update)
        type_cast_9_update_completed_ <-& (type_cast_9_Update)
        // Target expression
        // (as target) tmp17
        // tmp17
        // implicit reference
        // 		tmp15 := ($bitcast ($uint<64>) b )
        //  file prog.linked.opt.aa, line 9
        // Source expression
        // ($bitcast ($uint<64>) b )
        $T[type_cast_13_sample_start_] 
        $T[type_cast_13_sample_completed_] 
        $T[type_cast_13_update_start_] 
        $T[type_cast_13_update_completed_] 
        // b
        $T[R_b_12_sample_start_] 
        $T[R_b_12_sample_completed_] 
        $T[R_b_12_update_start_] 
        $T[R_b_12_update_completed_] 
        // reference to interface object
        R_b_12_sample_start_ <-& ($entry)
        R_b_12_sample_completed_ <-& (R_b_12_sample_start_)
        R_b_12_update_start_ <-& (R_b_12_sample_completed_)
        R_b_12_update_completed_ <-& (R_b_12_update_start_)
        type_cast_13_sample_start_ <-& (R_b_12_update_completed_)
        ;;[type_cast_13_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_13_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_13_sample_start_ &-> (type_cast_13_Sample)
        type_cast_13_sample_completed_ <-& (type_cast_13_Sample)
        type_cast_13_sample_completed_ &-> ($null)
        type_cast_13_update_start_ &-> (type_cast_13_Update)
        type_cast_13_update_completed_ <-& (type_cast_13_Update)
        // Target expression
        // (as target) tmp15
        // tmp15
        // implicit reference
        // 		iNsTr_0 := (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 10
        // Source expression
        // (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        $T[AND_u64_u64_19_sample_start_] 
        $T[AND_u64_u64_19_sample_completed_] 
        $T[AND_u64_u64_19_update_start_] 
        $T[AND_u64_u64_19_update_completed_] 
        // tmp17
        $T[R_tmp17_16_sample_start_] 
        $T[R_tmp17_16_sample_completed_] 
        $T[R_tmp17_16_update_start_] 
        $T[R_tmp17_16_update_completed_] 
        // implicit reference
        R_tmp17_16_sample_start_ <-& (type_cast_9_update_completed_)
        R_tmp17_16_sample_completed_ <-& (R_tmp17_16_sample_start_)
        R_tmp17_16_update_start_ <-& (R_tmp17_16_sample_completed_)
        R_tmp17_16_update_completed_ <-& (R_tmp17_16_update_start_)
        AND_u64_u64_19_sample_start_ <-& (R_tmp17_16_update_completed_)
        ;;[AND_u64_u64_19_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_19_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_19_sample_start_ &-> (AND_u64_u64_19_Sample)
        AND_u64_u64_19_sample_completed_ <-& (AND_u64_u64_19_Sample)
        AND_u64_u64_19_sample_completed_ &-> ($null)
        AND_u64_u64_19_update_start_ &-> (AND_u64_u64_19_Update)
        AND_u64_u64_19_update_completed_ <-& (AND_u64_u64_19_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		iNsTr_1 := (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 11
        // Source expression
        // (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        $T[AND_u64_u64_25_sample_start_] 
        $T[AND_u64_u64_25_sample_completed_] 
        $T[AND_u64_u64_25_update_start_] 
        $T[AND_u64_u64_25_update_completed_] 
        // tmp15
        $T[R_tmp15_22_sample_start_] 
        $T[R_tmp15_22_sample_completed_] 
        $T[R_tmp15_22_update_start_] 
        $T[R_tmp15_22_update_completed_] 
        // implicit reference
        R_tmp15_22_sample_start_ <-& (type_cast_13_update_completed_)
        R_tmp15_22_sample_completed_ <-& (R_tmp15_22_sample_start_)
        R_tmp15_22_update_start_ <-& (R_tmp15_22_sample_completed_)
        R_tmp15_22_update_completed_ <-& (R_tmp15_22_update_start_)
        AND_u64_u64_25_sample_start_ <-& (R_tmp15_22_update_completed_)
        ;;[AND_u64_u64_25_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_25_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_25_sample_start_ &-> (AND_u64_u64_25_Sample)
        AND_u64_u64_25_sample_completed_ <-& (AND_u64_u64_25_Sample)
        AND_u64_u64_25_sample_completed_ &-> ($null)
        AND_u64_u64_25_update_start_ &-> (AND_u64_u64_25_Update)
        AND_u64_u64_25_update_completed_ <-& (AND_u64_u64_25_Update)
        // Target expression
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		iNsTr_2 := (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 12
        // Source expression
        // (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
        $T[EQ_u64_u1_31_sample_start_] 
        $T[EQ_u64_u1_31_sample_completed_] 
        $T[EQ_u64_u1_31_update_start_] 
        $T[EQ_u64_u1_31_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_28_sample_start_] 
        $T[R_iNsTr_0_28_sample_completed_] 
        $T[R_iNsTr_0_28_update_start_] 
        $T[R_iNsTr_0_28_update_completed_] 
        // implicit reference
        R_iNsTr_0_28_sample_start_ <-& (AND_u64_u64_19_update_completed_)
        R_iNsTr_0_28_sample_completed_ <-& (R_iNsTr_0_28_sample_start_)
        R_iNsTr_0_28_update_start_ <-& (R_iNsTr_0_28_sample_completed_)
        R_iNsTr_0_28_update_completed_ <-& (R_iNsTr_0_28_update_start_)
        EQ_u64_u1_31_sample_start_ <-& (R_iNsTr_0_28_update_completed_)
        ;;[EQ_u64_u1_31_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u64_u1_31_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u64_u1_31_sample_start_ &-> (EQ_u64_u1_31_Sample)
        EQ_u64_u1_31_sample_completed_ <-& (EQ_u64_u1_31_Sample)
        EQ_u64_u1_31_sample_completed_ &-> ($null)
        EQ_u64_u1_31_update_start_ &-> (EQ_u64_u1_31_Update)
        EQ_u64_u1_31_update_completed_ <-& (EQ_u64_u1_31_Update)
        // Target expression
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // load-store dependencies..
      }
      assign_stmt_10_to_assign_stmt_33__entry__ |-> (assign_stmt_10_to_assign_stmt_33)
      assign_stmt_10_to_assign_stmt_33__exit__ <-| (assign_stmt_10_to_assign_stmt_33)
      // if-statement  
      //  file prog.linked.opt.aa, line 13
      ;;[if_stmt_34_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_34__entry__ |-> (if_stmt_34_dead_link)
      if_stmt_34__exit__ <-| (if_stmt_34_dead_link)
      ;;[if_stmt_34_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_34__entry__ |-> (if_stmt_34_eval_test)
      $P [R_iNsTr_2_35_place]
      R_iNsTr_2_35_place <-| (if_stmt_34_eval_test)
      ;;[if_stmt_34_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_34_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_iNsTr_2_35_place |-> (if_stmt_34_if_link if_stmt_34_else_link)
      $P [bb_0_bb_2]
      bb_0_bb_2 <-| (if_stmt_34_if_link)
      $P [bb_0_bb_1]
      bb_0_bb_1 <-| (if_stmt_34_else_link)
      ::[assign_stmt_46_to_assign_stmt_69] 
      {
        // 		iNsTr_25 := (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 20
        // Source expression
        // (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        $T[AND_u64_u64_45_sample_start_] 
        $T[AND_u64_u64_45_sample_completed_] 
        $T[AND_u64_u64_45_update_start_] 
        $T[AND_u64_u64_45_update_completed_] 
        // tmp15
        $T[R_tmp15_42_sample_start_] 
        $T[R_tmp15_42_sample_completed_] 
        $T[R_tmp15_42_update_start_] 
        $T[R_tmp15_42_update_completed_] 
        // implicit reference
        R_tmp15_42_sample_start_ <-& ($entry)
        R_tmp15_42_sample_completed_ <-& (R_tmp15_42_sample_start_)
        R_tmp15_42_update_start_ <-& (R_tmp15_42_sample_completed_)
        R_tmp15_42_update_completed_ <-& (R_tmp15_42_update_start_)
        AND_u64_u64_45_sample_start_ <-& (R_tmp15_42_update_completed_)
        ;;[AND_u64_u64_45_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_45_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_45_sample_start_ &-> (AND_u64_u64_45_Sample)
        AND_u64_u64_45_sample_completed_ <-& (AND_u64_u64_45_Sample)
        AND_u64_u64_45_sample_completed_ &-> ($null)
        AND_u64_u64_45_update_start_ &-> (AND_u64_u64_45_Update)
        AND_u64_u64_45_update_completed_ <-& (AND_u64_u64_45_Update)
        // Target expression
        // (as target) iNsTr_25
        // iNsTr_25
        // implicit reference
        // 		tmp17x_xmask := (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 21
        // Source expression
        // (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        $T[AND_u64_u64_51_sample_start_] 
        $T[AND_u64_u64_51_sample_completed_] 
        $T[AND_u64_u64_51_update_start_] 
        $T[AND_u64_u64_51_update_completed_] 
        // tmp17
        $T[R_tmp17_48_sample_start_] 
        $T[R_tmp17_48_sample_completed_] 
        $T[R_tmp17_48_update_start_] 
        $T[R_tmp17_48_update_completed_] 
        // implicit reference
        R_tmp17_48_sample_start_ <-& ($entry)
        R_tmp17_48_sample_completed_ <-& (R_tmp17_48_sample_start_)
        R_tmp17_48_update_start_ <-& (R_tmp17_48_sample_completed_)
        R_tmp17_48_update_completed_ <-& (R_tmp17_48_update_start_)
        AND_u64_u64_51_sample_start_ <-& (R_tmp17_48_update_completed_)
        ;;[AND_u64_u64_51_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_51_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_51_sample_start_ &-> (AND_u64_u64_51_Sample)
        AND_u64_u64_51_sample_completed_ <-& (AND_u64_u64_51_Sample)
        AND_u64_u64_51_sample_completed_ &-> ($null)
        AND_u64_u64_51_update_start_ &-> (AND_u64_u64_51_Update)
        AND_u64_u64_51_update_completed_ <-& (AND_u64_u64_51_Update)
        // Target expression
        // (as target) tmp17x_xmask
        // tmp17x_xmask
        // implicit reference
        // 		iNsTr_26 := (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 22
        // Source expression
        // (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
        $T[ADD_u64_u64_57_sample_start_] 
        $T[ADD_u64_u64_57_sample_completed_] 
        $T[ADD_u64_u64_57_update_start_] 
        $T[ADD_u64_u64_57_update_completed_] 
        // tmp17x_xmask
        $T[R_tmp17x_xmask_54_sample_start_] 
        $T[R_tmp17x_xmask_54_sample_completed_] 
        $T[R_tmp17x_xmask_54_update_start_] 
        $T[R_tmp17x_xmask_54_update_completed_] 
        // implicit reference
        R_tmp17x_xmask_54_sample_start_ <-& (AND_u64_u64_51_update_completed_)
        R_tmp17x_xmask_54_sample_completed_ <-& (R_tmp17x_xmask_54_sample_start_)
        R_tmp17x_xmask_54_update_start_ <-& (R_tmp17x_xmask_54_sample_completed_)
        R_tmp17x_xmask_54_update_completed_ <-& (R_tmp17x_xmask_54_update_start_)
        ADD_u64_u64_57_sample_start_ <-& (R_tmp17x_xmask_54_update_completed_)
        ;;[ADD_u64_u64_57_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u64_u64_57_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u64_u64_57_sample_start_ &-> (ADD_u64_u64_57_Sample)
        ADD_u64_u64_57_sample_completed_ <-& (ADD_u64_u64_57_Sample)
        ADD_u64_u64_57_sample_completed_ &-> ($null)
        ADD_u64_u64_57_update_start_ &-> (ADD_u64_u64_57_Update)
        ADD_u64_u64_57_update_completed_ <-& (ADD_u64_u64_57_Update)
        // Target expression
        // (as target) iNsTr_26
        // iNsTr_26
        // implicit reference
        // 		phitmp := (iNsTr_26 - iNsTr_25)
        //  file prog.linked.opt.aa, line 23
        // Source expression
        // (iNsTr_26 - iNsTr_25)
        $T[SUB_u64_u64_62_sample_start_] 
        $T[SUB_u64_u64_62_sample_completed_] 
        $T[SUB_u64_u64_62_update_start_] 
        $T[SUB_u64_u64_62_update_completed_] 
        // iNsTr_26
        $T[R_iNsTr_26_60_sample_start_] 
        $T[R_iNsTr_26_60_sample_completed_] 
        $T[R_iNsTr_26_60_update_start_] 
        $T[R_iNsTr_26_60_update_completed_] 
        // implicit reference
        R_iNsTr_26_60_sample_start_ <-& (ADD_u64_u64_57_update_completed_)
        R_iNsTr_26_60_sample_completed_ <-& (R_iNsTr_26_60_sample_start_)
        R_iNsTr_26_60_update_start_ <-& (R_iNsTr_26_60_sample_completed_)
        R_iNsTr_26_60_update_completed_ <-& (R_iNsTr_26_60_update_start_)
        // iNsTr_25
        $T[R_iNsTr_25_61_sample_start_] 
        $T[R_iNsTr_25_61_sample_completed_] 
        $T[R_iNsTr_25_61_update_start_] 
        $T[R_iNsTr_25_61_update_completed_] 
        // implicit reference
        R_iNsTr_25_61_sample_start_ <-& (AND_u64_u64_45_update_completed_)
        R_iNsTr_25_61_sample_completed_ <-& (R_iNsTr_25_61_sample_start_)
        R_iNsTr_25_61_update_start_ <-& (R_iNsTr_25_61_sample_completed_)
        R_iNsTr_25_61_update_completed_ <-& (R_iNsTr_25_61_update_start_)
        SUB_u64_u64_62_sample_start_ <-& (R_iNsTr_26_60_update_completed_)
        SUB_u64_u64_62_sample_start_ <-& (R_iNsTr_25_61_update_completed_)
        ;;[SUB_u64_u64_62_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u64_u64_62_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u64_u64_62_sample_start_ &-> (SUB_u64_u64_62_Sample)
        SUB_u64_u64_62_sample_completed_ <-& (SUB_u64_u64_62_Sample)
        SUB_u64_u64_62_sample_completed_ &-> ($null)
        SUB_u64_u64_62_update_start_ &-> (SUB_u64_u64_62_Update)
        SUB_u64_u64_62_update_completed_ <-& (SUB_u64_u64_62_Update)
        // Target expression
        // (as target) phitmp
        // phitmp
        // implicit reference
        // 		phitmp20 := (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 24
        // Source expression
        // (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
        $T[AND_u64_u64_68_sample_start_] 
        $T[AND_u64_u64_68_sample_completed_] 
        $T[AND_u64_u64_68_update_start_] 
        $T[AND_u64_u64_68_update_completed_] 
        // phitmp
        $T[R_phitmp_65_sample_start_] 
        $T[R_phitmp_65_sample_completed_] 
        $T[R_phitmp_65_update_start_] 
        $T[R_phitmp_65_update_completed_] 
        // implicit reference
        R_phitmp_65_sample_start_ <-& (SUB_u64_u64_62_update_completed_)
        R_phitmp_65_sample_completed_ <-& (R_phitmp_65_sample_start_)
        R_phitmp_65_update_start_ <-& (R_phitmp_65_sample_completed_)
        R_phitmp_65_update_completed_ <-& (R_phitmp_65_update_start_)
        AND_u64_u64_68_sample_start_ <-& (R_phitmp_65_update_completed_)
        ;;[AND_u64_u64_68_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_68_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_68_sample_start_ &-> (AND_u64_u64_68_Sample)
        AND_u64_u64_68_sample_completed_ <-& (AND_u64_u64_68_Sample)
        AND_u64_u64_68_sample_completed_ &-> ($null)
        AND_u64_u64_68_update_start_ &-> (AND_u64_u64_68_Update)
        AND_u64_u64_68_update_completed_ <-& (AND_u64_u64_68_Update)
        // Target expression
        // (as target) phitmp20
        // phitmp20
        // implicit reference
        // load-store dependencies..
      }
      assign_stmt_46_to_assign_stmt_69__entry__ |-> (assign_stmt_46_to_assign_stmt_69)
      assign_stmt_46_to_assign_stmt_69__exit__ <-| (assign_stmt_46_to_assign_stmt_69)
      ::[assign_stmt_85_to_assign_stmt_197] 
      {
        // 		iNsTr_5 := (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 29
        // Source expression
        // (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
        $T[AND_u64_u64_84_sample_start_] 
        $T[AND_u64_u64_84_sample_completed_] 
        $T[AND_u64_u64_84_update_start_] 
        $T[AND_u64_u64_84_update_completed_] 
        // tmp17
        $T[R_tmp17_81_sample_start_] 
        $T[R_tmp17_81_sample_completed_] 
        $T[R_tmp17_81_update_start_] 
        $T[R_tmp17_81_update_completed_] 
        // implicit reference
        R_tmp17_81_sample_start_ <-& ($entry)
        R_tmp17_81_sample_completed_ <-& (R_tmp17_81_sample_start_)
        R_tmp17_81_update_start_ <-& (R_tmp17_81_sample_completed_)
        R_tmp17_81_update_completed_ <-& (R_tmp17_81_update_start_)
        AND_u64_u64_84_sample_start_ <-& (R_tmp17_81_update_completed_)
        ;;[AND_u64_u64_84_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_84_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_84_sample_start_ &-> (AND_u64_u64_84_Sample)
        AND_u64_u64_84_sample_completed_ <-& (AND_u64_u64_84_Sample)
        AND_u64_u64_84_sample_completed_ &-> ($null)
        AND_u64_u64_84_update_start_ &-> (AND_u64_u64_84_Update)
        AND_u64_u64_84_update_completed_ <-& (AND_u64_u64_84_Update)
        // Target expression
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		iNsTr_6 := (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 30
        // Source expression
        // (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
        $T[OR_u64_u64_90_sample_start_] 
        $T[OR_u64_u64_90_sample_completed_] 
        $T[OR_u64_u64_90_update_start_] 
        $T[OR_u64_u64_90_update_completed_] 
        // tmp15
        $T[R_tmp15_87_sample_start_] 
        $T[R_tmp15_87_sample_completed_] 
        $T[R_tmp15_87_update_start_] 
        $T[R_tmp15_87_update_completed_] 
        // implicit reference
        R_tmp15_87_sample_start_ <-& ($entry)
        R_tmp15_87_sample_completed_ <-& (R_tmp15_87_sample_start_)
        R_tmp15_87_update_start_ <-& (R_tmp15_87_sample_completed_)
        R_tmp15_87_update_completed_ <-& (R_tmp15_87_update_start_)
        OR_u64_u64_90_sample_start_ <-& (R_tmp15_87_update_completed_)
        ;;[OR_u64_u64_90_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u64_u64_90_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u64_u64_90_sample_start_ &-> (OR_u64_u64_90_Sample)
        OR_u64_u64_90_sample_completed_ <-& (OR_u64_u64_90_Sample)
        OR_u64_u64_90_sample_completed_ &-> ($null)
        OR_u64_u64_90_update_start_ &-> (OR_u64_u64_90_Update)
        OR_u64_u64_90_update_completed_ <-& (OR_u64_u64_90_Update)
        // Target expression
        // (as target) iNsTr_6
        // iNsTr_6
        // implicit reference
        // 		iNsTr_7 := (iNsTr_4 | iNsTr_5)
        //  file prog.linked.opt.aa, line 31
        // Source expression
        // (iNsTr_4 | iNsTr_5)
        $T[OR_u64_u64_95_sample_start_] 
        $T[OR_u64_u64_95_sample_completed_] 
        $T[OR_u64_u64_95_update_start_] 
        $T[OR_u64_u64_95_update_completed_] 
        // iNsTr_4
        $T[R_iNsTr_4_93_sample_start_] 
        $T[R_iNsTr_4_93_sample_completed_] 
        $T[R_iNsTr_4_93_update_start_] 
        $T[R_iNsTr_4_93_update_completed_] 
        // implicit reference
        R_iNsTr_4_93_sample_start_ <-& ($entry)
        R_iNsTr_4_93_sample_completed_ <-& (R_iNsTr_4_93_sample_start_)
        R_iNsTr_4_93_update_start_ <-& (R_iNsTr_4_93_sample_completed_)
        R_iNsTr_4_93_update_completed_ <-& (R_iNsTr_4_93_update_start_)
        // iNsTr_5
        $T[R_iNsTr_5_94_sample_start_] 
        $T[R_iNsTr_5_94_sample_completed_] 
        $T[R_iNsTr_5_94_update_start_] 
        $T[R_iNsTr_5_94_update_completed_] 
        // implicit reference
        R_iNsTr_5_94_sample_start_ <-& (AND_u64_u64_84_update_completed_)
        R_iNsTr_5_94_sample_completed_ <-& (R_iNsTr_5_94_sample_start_)
        R_iNsTr_5_94_update_start_ <-& (R_iNsTr_5_94_sample_completed_)
        R_iNsTr_5_94_update_completed_ <-& (R_iNsTr_5_94_update_start_)
        OR_u64_u64_95_sample_start_ <-& (R_iNsTr_4_93_update_completed_)
        OR_u64_u64_95_sample_start_ <-& (R_iNsTr_5_94_update_completed_)
        ;;[OR_u64_u64_95_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u64_u64_95_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u64_u64_95_sample_start_ &-> (OR_u64_u64_95_Sample)
        OR_u64_u64_95_sample_completed_ <-& (OR_u64_u64_95_Sample)
        OR_u64_u64_95_sample_completed_ &-> ($null)
        OR_u64_u64_95_update_start_ &-> (OR_u64_u64_95_Update)
        OR_u64_u64_95_update_completed_ <-& (OR_u64_u64_95_Update)
        // Target expression
        // (as target) iNsTr_7
        // iNsTr_7
        // implicit reference
        // 		iNsTr_8 := (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 32
        // Source expression
        // (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
        $T[AND_u64_u64_101_sample_start_] 
        $T[AND_u64_u64_101_sample_completed_] 
        $T[AND_u64_u64_101_update_start_] 
        $T[AND_u64_u64_101_update_completed_] 
        // iNsTr_6
        $T[R_iNsTr_6_98_sample_start_] 
        $T[R_iNsTr_6_98_sample_completed_] 
        $T[R_iNsTr_6_98_update_start_] 
        $T[R_iNsTr_6_98_update_completed_] 
        // implicit reference
        R_iNsTr_6_98_sample_start_ <-& (OR_u64_u64_90_update_completed_)
        R_iNsTr_6_98_sample_completed_ <-& (R_iNsTr_6_98_sample_start_)
        R_iNsTr_6_98_update_start_ <-& (R_iNsTr_6_98_sample_completed_)
        R_iNsTr_6_98_update_completed_ <-& (R_iNsTr_6_98_update_start_)
        AND_u64_u64_101_sample_start_ <-& (R_iNsTr_6_98_update_completed_)
        ;;[AND_u64_u64_101_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_101_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_101_sample_start_ &-> (AND_u64_u64_101_Sample)
        AND_u64_u64_101_sample_completed_ <-& (AND_u64_u64_101_Sample)
        AND_u64_u64_101_sample_completed_ &-> ($null)
        AND_u64_u64_101_update_start_ &-> (AND_u64_u64_101_Update)
        AND_u64_u64_101_update_completed_ <-& (AND_u64_u64_101_Update)
        // Target expression
        // (as target) iNsTr_8
        // iNsTr_8
        // implicit reference
        // 		tmp13 := ($bitcast ($float<11,52>) iNsTr_7 )
        //  file prog.linked.opt.aa, line 33
        // Source expression
        // ($bitcast ($float<11,52>) iNsTr_7 )
        $T[type_cast_105_sample_start_] 
        $T[type_cast_105_sample_completed_] 
        $T[type_cast_105_update_start_] 
        $T[type_cast_105_update_completed_] 
        // iNsTr_7
        $T[R_iNsTr_7_104_sample_start_] 
        $T[R_iNsTr_7_104_sample_completed_] 
        $T[R_iNsTr_7_104_update_start_] 
        $T[R_iNsTr_7_104_update_completed_] 
        // implicit reference
        R_iNsTr_7_104_sample_start_ <-& (OR_u64_u64_95_update_completed_)
        R_iNsTr_7_104_sample_completed_ <-& (R_iNsTr_7_104_sample_start_)
        R_iNsTr_7_104_update_start_ <-& (R_iNsTr_7_104_sample_completed_)
        R_iNsTr_7_104_update_completed_ <-& (R_iNsTr_7_104_update_start_)
        type_cast_105_sample_start_ <-& (R_iNsTr_7_104_update_completed_)
        ;;[type_cast_105_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_105_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_105_sample_start_ &-> (type_cast_105_Sample)
        type_cast_105_sample_completed_ <-& (type_cast_105_Sample)
        type_cast_105_sample_completed_ &-> ($null)
        type_cast_105_update_start_ &-> (type_cast_105_Update)
        type_cast_105_update_completed_ <-& (type_cast_105_Update)
        // Target expression
        // (as target) tmp13
        // tmp13
        // implicit reference
        // 		tmp11 := ($bitcast ($float<11,52>) iNsTr_8 )
        //  file prog.linked.opt.aa, line 34
        // Source expression
        // ($bitcast ($float<11,52>) iNsTr_8 )
        $T[type_cast_109_sample_start_] 
        $T[type_cast_109_sample_completed_] 
        $T[type_cast_109_update_start_] 
        $T[type_cast_109_update_completed_] 
        // iNsTr_8
        $T[R_iNsTr_8_108_sample_start_] 
        $T[R_iNsTr_8_108_sample_completed_] 
        $T[R_iNsTr_8_108_update_start_] 
        $T[R_iNsTr_8_108_update_completed_] 
        // implicit reference
        R_iNsTr_8_108_sample_start_ <-& (AND_u64_u64_101_update_completed_)
        R_iNsTr_8_108_sample_completed_ <-& (R_iNsTr_8_108_sample_start_)
        R_iNsTr_8_108_update_start_ <-& (R_iNsTr_8_108_sample_completed_)
        R_iNsTr_8_108_update_completed_ <-& (R_iNsTr_8_108_update_start_)
        type_cast_109_sample_start_ <-& (R_iNsTr_8_108_update_completed_)
        ;;[type_cast_109_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_109_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_109_sample_start_ &-> (type_cast_109_Sample)
        type_cast_109_sample_completed_ <-& (type_cast_109_Sample)
        type_cast_109_sample_completed_ &-> ($null)
        type_cast_109_update_start_ &-> (type_cast_109_Update)
        type_cast_109_update_completed_ <-& (type_cast_109_Update)
        // Target expression
        // (as target) tmp11
        // tmp11
        // implicit reference
        // 		iNsTr_9 := (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
        //  file prog.linked.opt.aa, line 35
        // Source expression
        // (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
        $T[MUL_f64_f64_115_sample_start_] 
        $T[MUL_f64_f64_115_sample_completed_] 
        $T[MUL_f64_f64_115_update_start_] 
        $T[MUL_f64_f64_115_update_completed_] 
        // tmp11
        $T[R_tmp11_112_sample_start_] 
        $T[R_tmp11_112_sample_completed_] 
        $T[R_tmp11_112_update_start_] 
        $T[R_tmp11_112_update_completed_] 
        // implicit reference
        R_tmp11_112_sample_start_ <-& (type_cast_109_update_completed_)
        R_tmp11_112_sample_completed_ <-& (R_tmp11_112_sample_start_)
        R_tmp11_112_update_start_ <-& (R_tmp11_112_sample_completed_)
        R_tmp11_112_update_completed_ <-& (R_tmp11_112_update_start_)
        MUL_f64_f64_115_sample_start_ <-& (R_tmp11_112_update_completed_)
        ;;[MUL_f64_f64_115_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_115_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_115_sample_start_ &-> (MUL_f64_f64_115_Sample)
        MUL_f64_f64_115_sample_completed_ <-& (MUL_f64_f64_115_Sample)
        MUL_f64_f64_115_sample_completed_ &-> ($null)
        MUL_f64_f64_115_update_start_ &-> (MUL_f64_f64_115_Update)
        MUL_f64_f64_115_update_completed_ <-& (MUL_f64_f64_115_Update)
        // Target expression
        // (as target) iNsTr_9
        // iNsTr_9
        // implicit reference
        // 		iNsTr_10 := (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
        //  file prog.linked.opt.aa, line 36
        // Source expression
        // (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
        $T[SUB_f64_f64_121_sample_start_] 
        $T[SUB_f64_f64_121_sample_completed_] 
        $T[SUB_f64_f64_121_update_start_] 
        $T[SUB_f64_f64_121_update_completed_] 
        // iNsTr_9
        $T[R_iNsTr_9_120_sample_start_] 
        $T[R_iNsTr_9_120_sample_completed_] 
        $T[R_iNsTr_9_120_update_start_] 
        $T[R_iNsTr_9_120_update_completed_] 
        // implicit reference
        R_iNsTr_9_120_sample_start_ <-& (MUL_f64_f64_115_update_completed_)
        R_iNsTr_9_120_sample_completed_ <-& (R_iNsTr_9_120_sample_start_)
        R_iNsTr_9_120_update_start_ <-& (R_iNsTr_9_120_sample_completed_)
        R_iNsTr_9_120_update_completed_ <-& (R_iNsTr_9_120_update_start_)
        SUB_f64_f64_121_sample_start_ <-& (R_iNsTr_9_120_update_completed_)
        ;;[SUB_f64_f64_121_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f64_f64_121_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f64_f64_121_sample_start_ &-> (SUB_f64_f64_121_Sample)
        SUB_f64_f64_121_sample_completed_ <-& (SUB_f64_f64_121_Sample)
        SUB_f64_f64_121_sample_completed_ &-> ($null)
        SUB_f64_f64_121_update_start_ &-> (SUB_f64_f64_121_Update)
        SUB_f64_f64_121_update_completed_ <-& (SUB_f64_f64_121_Update)
        // Target expression
        // (as target) iNsTr_10
        // iNsTr_10
        // implicit reference
        // 		iNsTr_11 := (tmp11 * iNsTr_10)
        //  file prog.linked.opt.aa, line 37
        // Source expression
        // (tmp11 * iNsTr_10)
        $T[MUL_f64_f64_126_sample_start_] 
        $T[MUL_f64_f64_126_sample_completed_] 
        $T[MUL_f64_f64_126_update_start_] 
        $T[MUL_f64_f64_126_update_completed_] 
        // tmp11
        $T[R_tmp11_124_sample_start_] 
        $T[R_tmp11_124_sample_completed_] 
        $T[R_tmp11_124_update_start_] 
        $T[R_tmp11_124_update_completed_] 
        // implicit reference
        R_tmp11_124_sample_start_ <-& (type_cast_109_update_completed_)
        R_tmp11_124_sample_completed_ <-& (R_tmp11_124_sample_start_)
        R_tmp11_124_update_start_ <-& (R_tmp11_124_sample_completed_)
        R_tmp11_124_update_completed_ <-& (R_tmp11_124_update_start_)
        // iNsTr_10
        $T[R_iNsTr_10_125_sample_start_] 
        $T[R_iNsTr_10_125_sample_completed_] 
        $T[R_iNsTr_10_125_update_start_] 
        $T[R_iNsTr_10_125_update_completed_] 
        // implicit reference
        R_iNsTr_10_125_sample_start_ <-& (SUB_f64_f64_121_update_completed_)
        R_iNsTr_10_125_sample_completed_ <-& (R_iNsTr_10_125_sample_start_)
        R_iNsTr_10_125_update_start_ <-& (R_iNsTr_10_125_sample_completed_)
        R_iNsTr_10_125_update_completed_ <-& (R_iNsTr_10_125_update_start_)
        MUL_f64_f64_126_sample_start_ <-& (R_tmp11_124_update_completed_)
        MUL_f64_f64_126_sample_start_ <-& (R_iNsTr_10_125_update_completed_)
        ;;[MUL_f64_f64_126_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_126_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_126_sample_start_ &-> (MUL_f64_f64_126_Sample)
        MUL_f64_f64_126_sample_completed_ <-& (MUL_f64_f64_126_Sample)
        MUL_f64_f64_126_sample_completed_ &-> ($null)
        MUL_f64_f64_126_update_start_ &-> (MUL_f64_f64_126_Update)
        MUL_f64_f64_126_update_completed_ <-& (MUL_f64_f64_126_Update)
        // Target expression
        // (as target) iNsTr_11
        // iNsTr_11
        // implicit reference
        // 		iNsTr_12 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
        //  file prog.linked.opt.aa, line 38
        // Source expression
        // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
        $T[SUB_f64_f64_132_sample_start_] 
        $T[SUB_f64_f64_132_sample_completed_] 
        $T[SUB_f64_f64_132_update_start_] 
        $T[SUB_f64_f64_132_update_completed_] 
        // iNsTr_11
        $T[R_iNsTr_11_131_sample_start_] 
        $T[R_iNsTr_11_131_sample_completed_] 
        $T[R_iNsTr_11_131_update_start_] 
        $T[R_iNsTr_11_131_update_completed_] 
        // implicit reference
        R_iNsTr_11_131_sample_start_ <-& (MUL_f64_f64_126_update_completed_)
        R_iNsTr_11_131_sample_completed_ <-& (R_iNsTr_11_131_sample_start_)
        R_iNsTr_11_131_update_start_ <-& (R_iNsTr_11_131_sample_completed_)
        R_iNsTr_11_131_update_completed_ <-& (R_iNsTr_11_131_update_start_)
        SUB_f64_f64_132_sample_start_ <-& (R_iNsTr_11_131_update_completed_)
        ;;[SUB_f64_f64_132_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f64_f64_132_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f64_f64_132_sample_start_ &-> (SUB_f64_f64_132_Sample)
        SUB_f64_f64_132_sample_completed_ <-& (SUB_f64_f64_132_Sample)
        SUB_f64_f64_132_sample_completed_ &-> ($null)
        SUB_f64_f64_132_update_start_ &-> (SUB_f64_f64_132_Update)
        SUB_f64_f64_132_update_completed_ <-& (SUB_f64_f64_132_Update)
        // Target expression
        // (as target) iNsTr_12
        // iNsTr_12
        // implicit reference
        // 		iNsTr_13 := (iNsTr_10 * iNsTr_12)
        //  file prog.linked.opt.aa, line 39
        // Source expression
        // (iNsTr_10 * iNsTr_12)
        $T[MUL_f64_f64_137_sample_start_] 
        $T[MUL_f64_f64_137_sample_completed_] 
        $T[MUL_f64_f64_137_update_start_] 
        $T[MUL_f64_f64_137_update_completed_] 
        // iNsTr_10
        $T[R_iNsTr_10_135_sample_start_] 
        $T[R_iNsTr_10_135_sample_completed_] 
        $T[R_iNsTr_10_135_update_start_] 
        $T[R_iNsTr_10_135_update_completed_] 
        // implicit reference
        R_iNsTr_10_135_sample_start_ <-& (SUB_f64_f64_121_update_completed_)
        R_iNsTr_10_135_sample_completed_ <-& (R_iNsTr_10_135_sample_start_)
        R_iNsTr_10_135_update_start_ <-& (R_iNsTr_10_135_sample_completed_)
        R_iNsTr_10_135_update_completed_ <-& (R_iNsTr_10_135_update_start_)
        // iNsTr_12
        $T[R_iNsTr_12_136_sample_start_] 
        $T[R_iNsTr_12_136_sample_completed_] 
        $T[R_iNsTr_12_136_update_start_] 
        $T[R_iNsTr_12_136_update_completed_] 
        // implicit reference
        R_iNsTr_12_136_sample_start_ <-& (SUB_f64_f64_132_update_completed_)
        R_iNsTr_12_136_sample_completed_ <-& (R_iNsTr_12_136_sample_start_)
        R_iNsTr_12_136_update_start_ <-& (R_iNsTr_12_136_sample_completed_)
        R_iNsTr_12_136_update_completed_ <-& (R_iNsTr_12_136_update_start_)
        MUL_f64_f64_137_sample_start_ <-& (R_iNsTr_10_135_update_completed_)
        MUL_f64_f64_137_sample_start_ <-& (R_iNsTr_12_136_update_completed_)
        ;;[MUL_f64_f64_137_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_137_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_137_sample_start_ &-> (MUL_f64_f64_137_Sample)
        MUL_f64_f64_137_sample_completed_ <-& (MUL_f64_f64_137_Sample)
        MUL_f64_f64_137_sample_completed_ &-> ($null)
        MUL_f64_f64_137_update_start_ &-> (MUL_f64_f64_137_Update)
        MUL_f64_f64_137_update_completed_ <-& (MUL_f64_f64_137_Update)
        // Target expression
        // (as target) iNsTr_13
        // iNsTr_13
        // implicit reference
        // 		iNsTr_14 := (tmp11 * iNsTr_13)
        //  file prog.linked.opt.aa, line 40
        // Source expression
        // (tmp11 * iNsTr_13)
        $T[MUL_f64_f64_142_sample_start_] 
        $T[MUL_f64_f64_142_sample_completed_] 
        $T[MUL_f64_f64_142_update_start_] 
        $T[MUL_f64_f64_142_update_completed_] 
        // tmp11
        $T[R_tmp11_140_sample_start_] 
        $T[R_tmp11_140_sample_completed_] 
        $T[R_tmp11_140_update_start_] 
        $T[R_tmp11_140_update_completed_] 
        // implicit reference
        R_tmp11_140_sample_start_ <-& (type_cast_109_update_completed_)
        R_tmp11_140_sample_completed_ <-& (R_tmp11_140_sample_start_)
        R_tmp11_140_update_start_ <-& (R_tmp11_140_sample_completed_)
        R_tmp11_140_update_completed_ <-& (R_tmp11_140_update_start_)
        // iNsTr_13
        $T[R_iNsTr_13_141_sample_start_] 
        $T[R_iNsTr_13_141_sample_completed_] 
        $T[R_iNsTr_13_141_update_start_] 
        $T[R_iNsTr_13_141_update_completed_] 
        // implicit reference
        R_iNsTr_13_141_sample_start_ <-& (MUL_f64_f64_137_update_completed_)
        R_iNsTr_13_141_sample_completed_ <-& (R_iNsTr_13_141_sample_start_)
        R_iNsTr_13_141_update_start_ <-& (R_iNsTr_13_141_sample_completed_)
        R_iNsTr_13_141_update_completed_ <-& (R_iNsTr_13_141_update_start_)
        MUL_f64_f64_142_sample_start_ <-& (R_tmp11_140_update_completed_)
        MUL_f64_f64_142_sample_start_ <-& (R_iNsTr_13_141_update_completed_)
        ;;[MUL_f64_f64_142_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_142_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_142_sample_start_ &-> (MUL_f64_f64_142_Sample)
        MUL_f64_f64_142_sample_completed_ <-& (MUL_f64_f64_142_Sample)
        MUL_f64_f64_142_sample_completed_ &-> ($null)
        MUL_f64_f64_142_update_start_ &-> (MUL_f64_f64_142_Update)
        MUL_f64_f64_142_update_completed_ <-& (MUL_f64_f64_142_Update)
        // Target expression
        // (as target) iNsTr_14
        // iNsTr_14
        // implicit reference
        // 		iNsTr_15 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
        //  file prog.linked.opt.aa, line 41
        // Source expression
        // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
        $T[SUB_f64_f64_148_sample_start_] 
        $T[SUB_f64_f64_148_sample_completed_] 
        $T[SUB_f64_f64_148_update_start_] 
        $T[SUB_f64_f64_148_update_completed_] 
        // iNsTr_14
        $T[R_iNsTr_14_147_sample_start_] 
        $T[R_iNsTr_14_147_sample_completed_] 
        $T[R_iNsTr_14_147_update_start_] 
        $T[R_iNsTr_14_147_update_completed_] 
        // implicit reference
        R_iNsTr_14_147_sample_start_ <-& (MUL_f64_f64_142_update_completed_)
        R_iNsTr_14_147_sample_completed_ <-& (R_iNsTr_14_147_sample_start_)
        R_iNsTr_14_147_update_start_ <-& (R_iNsTr_14_147_sample_completed_)
        R_iNsTr_14_147_update_completed_ <-& (R_iNsTr_14_147_update_start_)
        SUB_f64_f64_148_sample_start_ <-& (R_iNsTr_14_147_update_completed_)
        ;;[SUB_f64_f64_148_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f64_f64_148_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f64_f64_148_sample_start_ &-> (SUB_f64_f64_148_Sample)
        SUB_f64_f64_148_sample_completed_ <-& (SUB_f64_f64_148_Sample)
        SUB_f64_f64_148_sample_completed_ &-> ($null)
        SUB_f64_f64_148_update_start_ &-> (SUB_f64_f64_148_Update)
        SUB_f64_f64_148_update_completed_ <-& (SUB_f64_f64_148_Update)
        // Target expression
        // (as target) iNsTr_15
        // iNsTr_15
        // implicit reference
        // 		iNsTr_16 := (iNsTr_13 * iNsTr_15)
        //  file prog.linked.opt.aa, line 42
        // Source expression
        // (iNsTr_13 * iNsTr_15)
        $T[MUL_f64_f64_153_sample_start_] 
        $T[MUL_f64_f64_153_sample_completed_] 
        $T[MUL_f64_f64_153_update_start_] 
        $T[MUL_f64_f64_153_update_completed_] 
        // iNsTr_13
        $T[R_iNsTr_13_151_sample_start_] 
        $T[R_iNsTr_13_151_sample_completed_] 
        $T[R_iNsTr_13_151_update_start_] 
        $T[R_iNsTr_13_151_update_completed_] 
        // implicit reference
        R_iNsTr_13_151_sample_start_ <-& (MUL_f64_f64_137_update_completed_)
        R_iNsTr_13_151_sample_completed_ <-& (R_iNsTr_13_151_sample_start_)
        R_iNsTr_13_151_update_start_ <-& (R_iNsTr_13_151_sample_completed_)
        R_iNsTr_13_151_update_completed_ <-& (R_iNsTr_13_151_update_start_)
        // iNsTr_15
        $T[R_iNsTr_15_152_sample_start_] 
        $T[R_iNsTr_15_152_sample_completed_] 
        $T[R_iNsTr_15_152_update_start_] 
        $T[R_iNsTr_15_152_update_completed_] 
        // implicit reference
        R_iNsTr_15_152_sample_start_ <-& (SUB_f64_f64_148_update_completed_)
        R_iNsTr_15_152_sample_completed_ <-& (R_iNsTr_15_152_sample_start_)
        R_iNsTr_15_152_update_start_ <-& (R_iNsTr_15_152_sample_completed_)
        R_iNsTr_15_152_update_completed_ <-& (R_iNsTr_15_152_update_start_)
        MUL_f64_f64_153_sample_start_ <-& (R_iNsTr_13_151_update_completed_)
        MUL_f64_f64_153_sample_start_ <-& (R_iNsTr_15_152_update_completed_)
        ;;[MUL_f64_f64_153_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_153_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_153_sample_start_ &-> (MUL_f64_f64_153_Sample)
        MUL_f64_f64_153_sample_completed_ <-& (MUL_f64_f64_153_Sample)
        MUL_f64_f64_153_sample_completed_ &-> ($null)
        MUL_f64_f64_153_update_start_ &-> (MUL_f64_f64_153_Update)
        MUL_f64_f64_153_update_completed_ <-& (MUL_f64_f64_153_Update)
        // Target expression
        // (as target) iNsTr_16
        // iNsTr_16
        // implicit reference
        // 		iNsTr_17 := (tmp11 * iNsTr_16)
        //  file prog.linked.opt.aa, line 43
        // Source expression
        // (tmp11 * iNsTr_16)
        $T[MUL_f64_f64_158_sample_start_] 
        $T[MUL_f64_f64_158_sample_completed_] 
        $T[MUL_f64_f64_158_update_start_] 
        $T[MUL_f64_f64_158_update_completed_] 
        // tmp11
        $T[R_tmp11_156_sample_start_] 
        $T[R_tmp11_156_sample_completed_] 
        $T[R_tmp11_156_update_start_] 
        $T[R_tmp11_156_update_completed_] 
        // implicit reference
        R_tmp11_156_sample_start_ <-& (type_cast_109_update_completed_)
        R_tmp11_156_sample_completed_ <-& (R_tmp11_156_sample_start_)
        R_tmp11_156_update_start_ <-& (R_tmp11_156_sample_completed_)
        R_tmp11_156_update_completed_ <-& (R_tmp11_156_update_start_)
        // iNsTr_16
        $T[R_iNsTr_16_157_sample_start_] 
        $T[R_iNsTr_16_157_sample_completed_] 
        $T[R_iNsTr_16_157_update_start_] 
        $T[R_iNsTr_16_157_update_completed_] 
        // implicit reference
        R_iNsTr_16_157_sample_start_ <-& (MUL_f64_f64_153_update_completed_)
        R_iNsTr_16_157_sample_completed_ <-& (R_iNsTr_16_157_sample_start_)
        R_iNsTr_16_157_update_start_ <-& (R_iNsTr_16_157_sample_completed_)
        R_iNsTr_16_157_update_completed_ <-& (R_iNsTr_16_157_update_start_)
        MUL_f64_f64_158_sample_start_ <-& (R_tmp11_156_update_completed_)
        MUL_f64_f64_158_sample_start_ <-& (R_iNsTr_16_157_update_completed_)
        ;;[MUL_f64_f64_158_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_158_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_158_sample_start_ &-> (MUL_f64_f64_158_Sample)
        MUL_f64_f64_158_sample_completed_ <-& (MUL_f64_f64_158_Sample)
        MUL_f64_f64_158_sample_completed_ &-> ($null)
        MUL_f64_f64_158_update_start_ &-> (MUL_f64_f64_158_Update)
        MUL_f64_f64_158_update_completed_ <-& (MUL_f64_f64_158_Update)
        // Target expression
        // (as target) iNsTr_17
        // iNsTr_17
        // implicit reference
        // 		iNsTr_18 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
        //  file prog.linked.opt.aa, line 44
        // Source expression
        // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
        $T[SUB_f64_f64_164_sample_start_] 
        $T[SUB_f64_f64_164_sample_completed_] 
        $T[SUB_f64_f64_164_update_start_] 
        $T[SUB_f64_f64_164_update_completed_] 
        // iNsTr_17
        $T[R_iNsTr_17_163_sample_start_] 
        $T[R_iNsTr_17_163_sample_completed_] 
        $T[R_iNsTr_17_163_update_start_] 
        $T[R_iNsTr_17_163_update_completed_] 
        // implicit reference
        R_iNsTr_17_163_sample_start_ <-& (MUL_f64_f64_158_update_completed_)
        R_iNsTr_17_163_sample_completed_ <-& (R_iNsTr_17_163_sample_start_)
        R_iNsTr_17_163_update_start_ <-& (R_iNsTr_17_163_sample_completed_)
        R_iNsTr_17_163_update_completed_ <-& (R_iNsTr_17_163_update_start_)
        SUB_f64_f64_164_sample_start_ <-& (R_iNsTr_17_163_update_completed_)
        ;;[SUB_f64_f64_164_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f64_f64_164_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f64_f64_164_sample_start_ &-> (SUB_f64_f64_164_Sample)
        SUB_f64_f64_164_sample_completed_ <-& (SUB_f64_f64_164_Sample)
        SUB_f64_f64_164_sample_completed_ &-> ($null)
        SUB_f64_f64_164_update_start_ &-> (SUB_f64_f64_164_Update)
        SUB_f64_f64_164_update_completed_ <-& (SUB_f64_f64_164_Update)
        // Target expression
        // (as target) iNsTr_18
        // iNsTr_18
        // implicit reference
        // 		iNsTr_19 := (iNsTr_16 * iNsTr_18)
        //  file prog.linked.opt.aa, line 45
        // Source expression
        // (iNsTr_16 * iNsTr_18)
        $T[MUL_f64_f64_169_sample_start_] 
        $T[MUL_f64_f64_169_sample_completed_] 
        $T[MUL_f64_f64_169_update_start_] 
        $T[MUL_f64_f64_169_update_completed_] 
        // iNsTr_16
        $T[R_iNsTr_16_167_sample_start_] 
        $T[R_iNsTr_16_167_sample_completed_] 
        $T[R_iNsTr_16_167_update_start_] 
        $T[R_iNsTr_16_167_update_completed_] 
        // implicit reference
        R_iNsTr_16_167_sample_start_ <-& (MUL_f64_f64_153_update_completed_)
        R_iNsTr_16_167_sample_completed_ <-& (R_iNsTr_16_167_sample_start_)
        R_iNsTr_16_167_update_start_ <-& (R_iNsTr_16_167_sample_completed_)
        R_iNsTr_16_167_update_completed_ <-& (R_iNsTr_16_167_update_start_)
        // iNsTr_18
        $T[R_iNsTr_18_168_sample_start_] 
        $T[R_iNsTr_18_168_sample_completed_] 
        $T[R_iNsTr_18_168_update_start_] 
        $T[R_iNsTr_18_168_update_completed_] 
        // implicit reference
        R_iNsTr_18_168_sample_start_ <-& (SUB_f64_f64_164_update_completed_)
        R_iNsTr_18_168_sample_completed_ <-& (R_iNsTr_18_168_sample_start_)
        R_iNsTr_18_168_update_start_ <-& (R_iNsTr_18_168_sample_completed_)
        R_iNsTr_18_168_update_completed_ <-& (R_iNsTr_18_168_update_start_)
        MUL_f64_f64_169_sample_start_ <-& (R_iNsTr_16_167_update_completed_)
        MUL_f64_f64_169_sample_start_ <-& (R_iNsTr_18_168_update_completed_)
        ;;[MUL_f64_f64_169_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_169_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_169_sample_start_ &-> (MUL_f64_f64_169_Sample)
        MUL_f64_f64_169_sample_completed_ <-& (MUL_f64_f64_169_Sample)
        MUL_f64_f64_169_sample_completed_ &-> ($null)
        MUL_f64_f64_169_update_start_ &-> (MUL_f64_f64_169_Update)
        MUL_f64_f64_169_update_completed_ <-& (MUL_f64_f64_169_Update)
        // Target expression
        // (as target) iNsTr_19
        // iNsTr_19
        // implicit reference
        // 		iNsTr_20 := (tmp11 * iNsTr_19)
        //  file prog.linked.opt.aa, line 46
        // Source expression
        // (tmp11 * iNsTr_19)
        $T[MUL_f64_f64_174_sample_start_] 
        $T[MUL_f64_f64_174_sample_completed_] 
        $T[MUL_f64_f64_174_update_start_] 
        $T[MUL_f64_f64_174_update_completed_] 
        // tmp11
        $T[R_tmp11_172_sample_start_] 
        $T[R_tmp11_172_sample_completed_] 
        $T[R_tmp11_172_update_start_] 
        $T[R_tmp11_172_update_completed_] 
        // implicit reference
        R_tmp11_172_sample_start_ <-& (type_cast_109_update_completed_)
        R_tmp11_172_sample_completed_ <-& (R_tmp11_172_sample_start_)
        R_tmp11_172_update_start_ <-& (R_tmp11_172_sample_completed_)
        R_tmp11_172_update_completed_ <-& (R_tmp11_172_update_start_)
        // iNsTr_19
        $T[R_iNsTr_19_173_sample_start_] 
        $T[R_iNsTr_19_173_sample_completed_] 
        $T[R_iNsTr_19_173_update_start_] 
        $T[R_iNsTr_19_173_update_completed_] 
        // implicit reference
        R_iNsTr_19_173_sample_start_ <-& (MUL_f64_f64_169_update_completed_)
        R_iNsTr_19_173_sample_completed_ <-& (R_iNsTr_19_173_sample_start_)
        R_iNsTr_19_173_update_start_ <-& (R_iNsTr_19_173_sample_completed_)
        R_iNsTr_19_173_update_completed_ <-& (R_iNsTr_19_173_update_start_)
        MUL_f64_f64_174_sample_start_ <-& (R_tmp11_172_update_completed_)
        MUL_f64_f64_174_sample_start_ <-& (R_iNsTr_19_173_update_completed_)
        ;;[MUL_f64_f64_174_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_174_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_174_sample_start_ &-> (MUL_f64_f64_174_Sample)
        MUL_f64_f64_174_sample_completed_ <-& (MUL_f64_f64_174_Sample)
        MUL_f64_f64_174_sample_completed_ &-> ($null)
        MUL_f64_f64_174_update_start_ &-> (MUL_f64_f64_174_Update)
        MUL_f64_f64_174_update_completed_ <-& (MUL_f64_f64_174_Update)
        // Target expression
        // (as target) iNsTr_20
        // iNsTr_20
        // implicit reference
        // 		iNsTr_21 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
        //  file prog.linked.opt.aa, line 47
        // Source expression
        // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
        $T[SUB_f64_f64_180_sample_start_] 
        $T[SUB_f64_f64_180_sample_completed_] 
        $T[SUB_f64_f64_180_update_start_] 
        $T[SUB_f64_f64_180_update_completed_] 
        // iNsTr_20
        $T[R_iNsTr_20_179_sample_start_] 
        $T[R_iNsTr_20_179_sample_completed_] 
        $T[R_iNsTr_20_179_update_start_] 
        $T[R_iNsTr_20_179_update_completed_] 
        // implicit reference
        R_iNsTr_20_179_sample_start_ <-& (MUL_f64_f64_174_update_completed_)
        R_iNsTr_20_179_sample_completed_ <-& (R_iNsTr_20_179_sample_start_)
        R_iNsTr_20_179_update_start_ <-& (R_iNsTr_20_179_sample_completed_)
        R_iNsTr_20_179_update_completed_ <-& (R_iNsTr_20_179_update_start_)
        SUB_f64_f64_180_sample_start_ <-& (R_iNsTr_20_179_update_completed_)
        ;;[SUB_f64_f64_180_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f64_f64_180_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f64_f64_180_sample_start_ &-> (SUB_f64_f64_180_Sample)
        SUB_f64_f64_180_sample_completed_ <-& (SUB_f64_f64_180_Sample)
        SUB_f64_f64_180_sample_completed_ &-> ($null)
        SUB_f64_f64_180_update_start_ &-> (SUB_f64_f64_180_Update)
        SUB_f64_f64_180_update_completed_ <-& (SUB_f64_f64_180_Update)
        // Target expression
        // (as target) iNsTr_21
        // iNsTr_21
        // implicit reference
        // 		iNsTr_22 := (iNsTr_19 * iNsTr_21)
        //  file prog.linked.opt.aa, line 48
        // Source expression
        // (iNsTr_19 * iNsTr_21)
        $T[MUL_f64_f64_185_sample_start_] 
        $T[MUL_f64_f64_185_sample_completed_] 
        $T[MUL_f64_f64_185_update_start_] 
        $T[MUL_f64_f64_185_update_completed_] 
        // iNsTr_19
        $T[R_iNsTr_19_183_sample_start_] 
        $T[R_iNsTr_19_183_sample_completed_] 
        $T[R_iNsTr_19_183_update_start_] 
        $T[R_iNsTr_19_183_update_completed_] 
        // implicit reference
        R_iNsTr_19_183_sample_start_ <-& (MUL_f64_f64_169_update_completed_)
        R_iNsTr_19_183_sample_completed_ <-& (R_iNsTr_19_183_sample_start_)
        R_iNsTr_19_183_update_start_ <-& (R_iNsTr_19_183_sample_completed_)
        R_iNsTr_19_183_update_completed_ <-& (R_iNsTr_19_183_update_start_)
        // iNsTr_21
        $T[R_iNsTr_21_184_sample_start_] 
        $T[R_iNsTr_21_184_sample_completed_] 
        $T[R_iNsTr_21_184_update_start_] 
        $T[R_iNsTr_21_184_update_completed_] 
        // implicit reference
        R_iNsTr_21_184_sample_start_ <-& (SUB_f64_f64_180_update_completed_)
        R_iNsTr_21_184_sample_completed_ <-& (R_iNsTr_21_184_sample_start_)
        R_iNsTr_21_184_update_start_ <-& (R_iNsTr_21_184_sample_completed_)
        R_iNsTr_21_184_update_completed_ <-& (R_iNsTr_21_184_update_start_)
        MUL_f64_f64_185_sample_start_ <-& (R_iNsTr_19_183_update_completed_)
        MUL_f64_f64_185_sample_start_ <-& (R_iNsTr_21_184_update_completed_)
        ;;[MUL_f64_f64_185_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_185_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_185_sample_start_ &-> (MUL_f64_f64_185_Sample)
        MUL_f64_f64_185_sample_completed_ <-& (MUL_f64_f64_185_Sample)
        MUL_f64_f64_185_sample_completed_ &-> ($null)
        MUL_f64_f64_185_update_start_ &-> (MUL_f64_f64_185_Update)
        MUL_f64_f64_185_update_completed_ <-& (MUL_f64_f64_185_Update)
        // Target expression
        // (as target) iNsTr_22
        // iNsTr_22
        // implicit reference
        // 		iNsTr_23 := (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 49
        // Source expression
        // (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
        $T[EQ_u64_u1_191_sample_start_] 
        $T[EQ_u64_u1_191_sample_completed_] 
        $T[EQ_u64_u1_191_update_start_] 
        $T[EQ_u64_u1_191_update_completed_] 
        // iNsTr_1
        $T[R_iNsTr_1_188_sample_start_] 
        $T[R_iNsTr_1_188_sample_completed_] 
        $T[R_iNsTr_1_188_update_start_] 
        $T[R_iNsTr_1_188_update_completed_] 
        // implicit reference
        R_iNsTr_1_188_sample_start_ <-& ($entry)
        R_iNsTr_1_188_sample_completed_ <-& (R_iNsTr_1_188_sample_start_)
        R_iNsTr_1_188_update_start_ <-& (R_iNsTr_1_188_sample_completed_)
        R_iNsTr_1_188_update_completed_ <-& (R_iNsTr_1_188_update_start_)
        EQ_u64_u1_191_sample_start_ <-& (R_iNsTr_1_188_update_completed_)
        ;;[EQ_u64_u1_191_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u64_u1_191_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u64_u1_191_sample_start_ &-> (EQ_u64_u1_191_Sample)
        EQ_u64_u1_191_sample_completed_ <-& (EQ_u64_u1_191_Sample)
        EQ_u64_u1_191_sample_completed_ &-> ($null)
        EQ_u64_u1_191_update_start_ &-> (EQ_u64_u1_191_Update)
        EQ_u64_u1_191_update_completed_ <-& (EQ_u64_u1_191_Update)
        // Target expression
        // (as target) iNsTr_23
        // iNsTr_23
        // implicit reference
        // 		orx_xcond := (iNsTr_2 | iNsTr_23)
        //  file prog.linked.opt.aa, line 50
        // Source expression
        // (iNsTr_2 | iNsTr_23)
        $T[OR_u1_u1_196_sample_start_] 
        $T[OR_u1_u1_196_sample_completed_] 
        $T[OR_u1_u1_196_update_start_] 
        $T[OR_u1_u1_196_update_completed_] 
        // iNsTr_2
        $T[R_iNsTr_2_194_sample_start_] 
        $T[R_iNsTr_2_194_sample_completed_] 
        $T[R_iNsTr_2_194_update_start_] 
        $T[R_iNsTr_2_194_update_completed_] 
        // implicit reference
        R_iNsTr_2_194_sample_start_ <-& ($entry)
        R_iNsTr_2_194_sample_completed_ <-& (R_iNsTr_2_194_sample_start_)
        R_iNsTr_2_194_update_start_ <-& (R_iNsTr_2_194_sample_completed_)
        R_iNsTr_2_194_update_completed_ <-& (R_iNsTr_2_194_update_start_)
        // iNsTr_23
        $T[R_iNsTr_23_195_sample_start_] 
        $T[R_iNsTr_23_195_sample_completed_] 
        $T[R_iNsTr_23_195_update_start_] 
        $T[R_iNsTr_23_195_update_completed_] 
        // implicit reference
        R_iNsTr_23_195_sample_start_ <-& (EQ_u64_u1_191_update_completed_)
        R_iNsTr_23_195_sample_completed_ <-& (R_iNsTr_23_195_sample_start_)
        R_iNsTr_23_195_update_start_ <-& (R_iNsTr_23_195_sample_completed_)
        R_iNsTr_23_195_update_completed_ <-& (R_iNsTr_23_195_update_start_)
        OR_u1_u1_196_sample_start_ <-& (R_iNsTr_2_194_update_completed_)
        OR_u1_u1_196_sample_start_ <-& (R_iNsTr_23_195_update_completed_)
        ;;[OR_u1_u1_196_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u1_u1_196_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u1_u1_196_sample_start_ &-> (OR_u1_u1_196_Sample)
        OR_u1_u1_196_sample_completed_ <-& (OR_u1_u1_196_Sample)
        OR_u1_u1_196_sample_completed_ &-> ($null)
        OR_u1_u1_196_update_start_ &-> (OR_u1_u1_196_Update)
        OR_u1_u1_196_update_completed_ <-& (OR_u1_u1_196_Update)
        // Target expression
        // (as target) orx_xcond
        // orx_xcond
        // implicit reference
        // load-store dependencies..
      }
      assign_stmt_85_to_assign_stmt_197__entry__ |-> (assign_stmt_85_to_assign_stmt_197)
      assign_stmt_85_to_assign_stmt_197__exit__ <-| (assign_stmt_85_to_assign_stmt_197)
      // if-statement  
      //  file prog.linked.opt.aa, line 51
      ;;[if_stmt_198_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_198__entry__ |-> (if_stmt_198_dead_link)
      if_stmt_198__exit__ <-| (if_stmt_198_dead_link)
      ;;[if_stmt_198_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_198__entry__ |-> (if_stmt_198_eval_test)
      $P [R_orx_xcond_199_place]
      R_orx_xcond_199_place <-| (if_stmt_198_eval_test)
      ;;[if_stmt_198_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_198_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_orx_xcond_199_place |-> (if_stmt_198_if_link if_stmt_198_else_link)
      $P [bb_2_bb_4]
      bb_2_bb_4 <-| (if_stmt_198_if_link)
      $P [bb_2_bb_3]
      bb_2_bb_3 <-| (if_stmt_198_else_link)
      ::[assign_stmt_209_to_assign_stmt_219] 
      {
        // 		iNsTr_33 := (tmp13 * iNsTr_22)
        //  file prog.linked.opt.aa, line 58
        // Source expression
        // (tmp13 * iNsTr_22)
        $T[MUL_f64_f64_208_sample_start_] 
        $T[MUL_f64_f64_208_sample_completed_] 
        $T[MUL_f64_f64_208_update_start_] 
        $T[MUL_f64_f64_208_update_completed_] 
        // tmp13
        $T[R_tmp13_206_sample_start_] 
        $T[R_tmp13_206_sample_completed_] 
        $T[R_tmp13_206_update_start_] 
        $T[R_tmp13_206_update_completed_] 
        // implicit reference
        R_tmp13_206_sample_start_ <-& ($entry)
        R_tmp13_206_sample_completed_ <-& (R_tmp13_206_sample_start_)
        R_tmp13_206_update_start_ <-& (R_tmp13_206_sample_completed_)
        R_tmp13_206_update_completed_ <-& (R_tmp13_206_update_start_)
        // iNsTr_22
        $T[R_iNsTr_22_207_sample_start_] 
        $T[R_iNsTr_22_207_sample_completed_] 
        $T[R_iNsTr_22_207_update_start_] 
        $T[R_iNsTr_22_207_update_completed_] 
        // implicit reference
        R_iNsTr_22_207_sample_start_ <-& ($entry)
        R_iNsTr_22_207_sample_completed_ <-& (R_iNsTr_22_207_sample_start_)
        R_iNsTr_22_207_update_start_ <-& (R_iNsTr_22_207_sample_completed_)
        R_iNsTr_22_207_update_completed_ <-& (R_iNsTr_22_207_update_start_)
        MUL_f64_f64_208_sample_start_ <-& (R_tmp13_206_update_completed_)
        MUL_f64_f64_208_sample_start_ <-& (R_iNsTr_22_207_update_completed_)
        ;;[MUL_f64_f64_208_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f64_f64_208_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f64_f64_208_sample_start_ &-> (MUL_f64_f64_208_Sample)
        MUL_f64_f64_208_sample_completed_ <-& (MUL_f64_f64_208_Sample)
        MUL_f64_f64_208_sample_completed_ &-> ($null)
        MUL_f64_f64_208_update_start_ &-> (MUL_f64_f64_208_Update)
        MUL_f64_f64_208_update_completed_ <-& (MUL_f64_f64_208_Update)
        // Target expression
        // (as target) iNsTr_33
        // iNsTr_33
        // implicit reference
        // 		phitmp19 := ($bitcast ($uint<64>) iNsTr_33 )
        //  file prog.linked.opt.aa, line 59
        // Source expression
        // ($bitcast ($uint<64>) iNsTr_33 )
        $T[type_cast_212_sample_start_] 
        $T[type_cast_212_sample_completed_] 
        $T[type_cast_212_update_start_] 
        $T[type_cast_212_update_completed_] 
        // iNsTr_33
        $T[R_iNsTr_33_211_sample_start_] 
        $T[R_iNsTr_33_211_sample_completed_] 
        $T[R_iNsTr_33_211_update_start_] 
        $T[R_iNsTr_33_211_update_completed_] 
        // implicit reference
        R_iNsTr_33_211_sample_start_ <-& (MUL_f64_f64_208_update_completed_)
        R_iNsTr_33_211_sample_completed_ <-& (R_iNsTr_33_211_sample_start_)
        R_iNsTr_33_211_update_start_ <-& (R_iNsTr_33_211_sample_completed_)
        R_iNsTr_33_211_update_completed_ <-& (R_iNsTr_33_211_update_start_)
        type_cast_212_sample_start_ <-& (R_iNsTr_33_211_update_completed_)
        ;;[type_cast_212_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_212_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_212_sample_start_ &-> (type_cast_212_Sample)
        type_cast_212_sample_completed_ <-& (type_cast_212_Sample)
        type_cast_212_sample_completed_ &-> ($null)
        type_cast_212_update_start_ &-> (type_cast_212_Update)
        type_cast_212_update_completed_ <-& (type_cast_212_Update)
        // Target expression
        // (as target) phitmp19
        // phitmp19
        // implicit reference
        // 		phitmp21 := (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 60
        // Source expression
        // (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
        $T[AND_u64_u64_218_sample_start_] 
        $T[AND_u64_u64_218_sample_completed_] 
        $T[AND_u64_u64_218_update_start_] 
        $T[AND_u64_u64_218_update_completed_] 
        // phitmp19
        $T[R_phitmp19_215_sample_start_] 
        $T[R_phitmp19_215_sample_completed_] 
        $T[R_phitmp19_215_update_start_] 
        $T[R_phitmp19_215_update_completed_] 
        // implicit reference
        R_phitmp19_215_sample_start_ <-& (type_cast_212_update_completed_)
        R_phitmp19_215_sample_completed_ <-& (R_phitmp19_215_sample_start_)
        R_phitmp19_215_update_start_ <-& (R_phitmp19_215_sample_completed_)
        R_phitmp19_215_update_completed_ <-& (R_phitmp19_215_update_start_)
        AND_u64_u64_218_sample_start_ <-& (R_phitmp19_215_update_completed_)
        ;;[AND_u64_u64_218_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_218_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_218_sample_start_ &-> (AND_u64_u64_218_Sample)
        AND_u64_u64_218_sample_completed_ <-& (AND_u64_u64_218_Sample)
        AND_u64_u64_218_sample_completed_ &-> ($null)
        AND_u64_u64_218_update_start_ &-> (AND_u64_u64_218_Update)
        AND_u64_u64_218_update_completed_ <-& (AND_u64_u64_218_Update)
        // Target expression
        // (as target) phitmp21
        // phitmp21
        // implicit reference
        // load-store dependencies..
      }
      assign_stmt_209_to_assign_stmt_219__entry__ |-> (assign_stmt_209_to_assign_stmt_219)
      assign_stmt_209_to_assign_stmt_219__exit__ <-| (assign_stmt_209_to_assign_stmt_219)
      ::[assign_stmt_234_to_assign_stmt_249] 
      {
        // 		iNsTr_29 := (tmp15 ^ tmp17)
        //  file prog.linked.opt.aa, line 65
        // Source expression
        // (tmp15 ^ tmp17)
        $T[XOR_u64_u64_233_sample_start_] 
        $T[XOR_u64_u64_233_sample_completed_] 
        $T[XOR_u64_u64_233_update_start_] 
        $T[XOR_u64_u64_233_update_completed_] 
        // tmp15
        $T[R_tmp15_231_sample_start_] 
        $T[R_tmp15_231_sample_completed_] 
        $T[R_tmp15_231_update_start_] 
        $T[R_tmp15_231_update_completed_] 
        // implicit reference
        R_tmp15_231_sample_start_ <-& ($entry)
        R_tmp15_231_sample_completed_ <-& (R_tmp15_231_sample_start_)
        R_tmp15_231_update_start_ <-& (R_tmp15_231_sample_completed_)
        R_tmp15_231_update_completed_ <-& (R_tmp15_231_update_start_)
        // tmp17
        $T[R_tmp17_232_sample_start_] 
        $T[R_tmp17_232_sample_completed_] 
        $T[R_tmp17_232_update_start_] 
        $T[R_tmp17_232_update_completed_] 
        // implicit reference
        R_tmp17_232_sample_start_ <-& ($entry)
        R_tmp17_232_sample_completed_ <-& (R_tmp17_232_sample_start_)
        R_tmp17_232_update_start_ <-& (R_tmp17_232_sample_completed_)
        R_tmp17_232_update_completed_ <-& (R_tmp17_232_update_start_)
        XOR_u64_u64_233_sample_start_ <-& (R_tmp15_231_update_completed_)
        XOR_u64_u64_233_sample_start_ <-& (R_tmp17_232_update_completed_)
        ;;[XOR_u64_u64_233_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[XOR_u64_u64_233_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        XOR_u64_u64_233_sample_start_ &-> (XOR_u64_u64_233_Sample)
        XOR_u64_u64_233_sample_completed_ <-& (XOR_u64_u64_233_Sample)
        XOR_u64_u64_233_sample_completed_ &-> ($null)
        XOR_u64_u64_233_update_start_ &-> (XOR_u64_u64_233_Update)
        XOR_u64_u64_233_update_completed_ <-& (XOR_u64_u64_233_Update)
        // Target expression
        // (as target) iNsTr_29
        // iNsTr_29
        // implicit reference
        // 		iNsTr_30 := (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
        //  file prog.linked.opt.aa, line 66
        // Source expression
        // (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
        $T[AND_u64_u64_239_sample_start_] 
        $T[AND_u64_u64_239_sample_completed_] 
        $T[AND_u64_u64_239_update_start_] 
        $T[AND_u64_u64_239_update_completed_] 
        // iNsTr_29
        $T[R_iNsTr_29_236_sample_start_] 
        $T[R_iNsTr_29_236_sample_completed_] 
        $T[R_iNsTr_29_236_update_start_] 
        $T[R_iNsTr_29_236_update_completed_] 
        // implicit reference
        R_iNsTr_29_236_sample_start_ <-& (XOR_u64_u64_233_update_completed_)
        R_iNsTr_29_236_sample_completed_ <-& (R_iNsTr_29_236_sample_start_)
        R_iNsTr_29_236_update_start_ <-& (R_iNsTr_29_236_sample_completed_)
        R_iNsTr_29_236_update_completed_ <-& (R_iNsTr_29_236_update_start_)
        AND_u64_u64_239_sample_start_ <-& (R_iNsTr_29_236_update_completed_)
        ;;[AND_u64_u64_239_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_239_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_239_sample_start_ &-> (AND_u64_u64_239_Sample)
        AND_u64_u64_239_sample_completed_ <-& (AND_u64_u64_239_Sample)
        AND_u64_u64_239_sample_completed_ &-> ($null)
        AND_u64_u64_239_update_start_ &-> (AND_u64_u64_239_Update)
        AND_u64_u64_239_update_completed_ <-& (AND_u64_u64_239_Update)
        // Target expression
        // (as target) iNsTr_30
        // iNsTr_30
        // implicit reference
        // 		iNsTr_31 := (iNsTr_28 | iNsTr_30)
        //  file prog.linked.opt.aa, line 67
        // Source expression
        // (iNsTr_28 | iNsTr_30)
        $T[OR_u64_u64_244_sample_start_] 
        $T[OR_u64_u64_244_sample_completed_] 
        $T[OR_u64_u64_244_update_start_] 
        $T[OR_u64_u64_244_update_completed_] 
        // iNsTr_28
        $T[R_iNsTr_28_242_sample_start_] 
        $T[R_iNsTr_28_242_sample_completed_] 
        $T[R_iNsTr_28_242_update_start_] 
        $T[R_iNsTr_28_242_update_completed_] 
        // implicit reference
        R_iNsTr_28_242_sample_start_ <-& ($entry)
        R_iNsTr_28_242_sample_completed_ <-& (R_iNsTr_28_242_sample_start_)
        R_iNsTr_28_242_update_start_ <-& (R_iNsTr_28_242_sample_completed_)
        R_iNsTr_28_242_update_completed_ <-& (R_iNsTr_28_242_update_start_)
        // iNsTr_30
        $T[R_iNsTr_30_243_sample_start_] 
        $T[R_iNsTr_30_243_sample_completed_] 
        $T[R_iNsTr_30_243_update_start_] 
        $T[R_iNsTr_30_243_update_completed_] 
        // implicit reference
        R_iNsTr_30_243_sample_start_ <-& (AND_u64_u64_239_update_completed_)
        R_iNsTr_30_243_sample_completed_ <-& (R_iNsTr_30_243_sample_start_)
        R_iNsTr_30_243_update_start_ <-& (R_iNsTr_30_243_sample_completed_)
        R_iNsTr_30_243_update_completed_ <-& (R_iNsTr_30_243_update_start_)
        OR_u64_u64_244_sample_start_ <-& (R_iNsTr_28_242_update_completed_)
        OR_u64_u64_244_sample_start_ <-& (R_iNsTr_30_243_update_completed_)
        ;;[OR_u64_u64_244_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u64_u64_244_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u64_u64_244_sample_start_ &-> (OR_u64_u64_244_Sample)
        OR_u64_u64_244_sample_completed_ <-& (OR_u64_u64_244_Sample)
        OR_u64_u64_244_sample_completed_ &-> ($null)
        OR_u64_u64_244_update_start_ &-> (OR_u64_u64_244_Update)
        OR_u64_u64_244_update_completed_ <-& (OR_u64_u64_244_Update)
        // Target expression
        // (as target) iNsTr_31
        // iNsTr_31
        // implicit reference
        // 		ret_val__ := ($bitcast ($float<11,52>) iNsTr_31 )
        //  file prog.linked.opt.aa, line 68
        // Source expression
        // ($bitcast ($float<11,52>) iNsTr_31 )
        $T[type_cast_248_sample_start_] 
        $T[type_cast_248_sample_completed_] 
        $T[type_cast_248_update_start_] 
        $T[type_cast_248_update_completed_] 
        // iNsTr_31
        $T[R_iNsTr_31_247_sample_start_] 
        $T[R_iNsTr_31_247_sample_completed_] 
        $T[R_iNsTr_31_247_update_start_] 
        $T[R_iNsTr_31_247_update_completed_] 
        // implicit reference
        R_iNsTr_31_247_sample_start_ <-& (OR_u64_u64_244_update_completed_)
        R_iNsTr_31_247_sample_completed_ <-& (R_iNsTr_31_247_sample_start_)
        R_iNsTr_31_247_update_start_ <-& (R_iNsTr_31_247_sample_completed_)
        R_iNsTr_31_247_update_completed_ <-& (R_iNsTr_31_247_update_start_)
        type_cast_248_sample_start_ <-& (R_iNsTr_31_247_update_completed_)
        ;;[type_cast_248_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_248_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_248_sample_start_ &-> (type_cast_248_Sample)
        type_cast_248_sample_completed_ <-& (type_cast_248_Sample)
        type_cast_248_sample_completed_ &-> ($null)
        type_cast_248_update_start_ &-> (type_cast_248_Update)
        type_cast_248_update_completed_ <-& (type_cast_248_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_234_to_assign_stmt_249__entry__ |-> (assign_stmt_234_to_assign_stmt_249)
      assign_stmt_234_to_assign_stmt_249__exit__ <-| (assign_stmt_234_to_assign_stmt_249)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 18
      ;;[merge_stmt_40_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_40__entry__ |-> (merge_stmt_40_dead_link)
      merge_stmt_40__exit__ <-| (merge_stmt_40_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 18  --------------------------
      ||[bb_0_bb_1_PhiReq] 
      {
        // no phi statements in merge..
      }
      bb_0_bb_1 |-> (bb_0_bb_1_PhiReq)
      $P [merge_stmt_40_PhiReqMerge] 
      merge_stmt_40_PhiReqMerge <-| ( bb_0_bb_1_PhiReq )
      ||[merge_stmt_40_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_40_PhiReqMerge |-> (merge_stmt_40_PhiAck)
      merge_stmt_40__exit__  <-| (merge_stmt_40_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 18  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 26
      //---------------------   merge statement  file prog.linked.opt.aa, line 26  --------------------------
      ||[bb_0_bb_2_PhiReq] 
      {
        ;;[phi_stmt_72] 
        {
          ||[phi_stmt_72_sources] 
          {
            // sources for 			$phi iNsTr_4 := 			  ($cast ($uint<64>) phitmp20 ) $on bb_1_bb_2			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_0_bb_2 // type of target is $uint<64>
            // ($cast ($uint<64>) phitmp20 )
            ;;[type_cast_75] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_72_req] 
        }
      }
      bb_0_bb_2 |-> (bb_0_bb_2_PhiReq)
      ||[bb_1_bb_2_PhiReq] 
      {
        ;;[phi_stmt_72] 
        {
          ||[phi_stmt_72_sources] 
          {
            // sources for 			$phi iNsTr_4 := 			  ($cast ($uint<64>) phitmp20 ) $on bb_1_bb_2			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_0_bb_2 // type of target is $uint<64>
            // ($cast ($uint<64>) phitmp20 )
            ;;[type_cast_75] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_72_req] 
        }
      }
      bb_1_bb_2 |-> (bb_1_bb_2_PhiReq)
      $P [merge_stmt_71_PhiReqMerge] 
      merge_stmt_71_PhiReqMerge <-| ( bb_0_bb_2_PhiReq  bb_1_bb_2_PhiReq )
      ||[merge_stmt_71_PhiAck] 
      {
        $T [phi_stmt_72_ack] 
      }
      merge_stmt_71_PhiReqMerge |-> (merge_stmt_71_PhiAck)
      merge_stmt_71__exit__  <-| (merge_stmt_71_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 26  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 56
      ;;[merge_stmt_204_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_204__entry__ |-> (merge_stmt_204_dead_link)
      merge_stmt_204__exit__ <-| (merge_stmt_204_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 56  --------------------------
      ||[bb_2_bb_3_PhiReq] 
      {
        // no phi statements in merge..
      }
      bb_2_bb_3 |-> (bb_2_bb_3_PhiReq)
      $P [merge_stmt_204_PhiReqMerge] 
      merge_stmt_204_PhiReqMerge <-| ( bb_2_bb_3_PhiReq )
      ||[merge_stmt_204_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_204_PhiReqMerge |-> (merge_stmt_204_PhiAck)
      merge_stmt_204__exit__  <-| (merge_stmt_204_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 56  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 62
      //---------------------   merge statement  file prog.linked.opt.aa, line 62  --------------------------
      ||[bb_2_bb_4_PhiReq] 
      {
        ;;[phi_stmt_222] 
        {
          ||[phi_stmt_222_sources] 
          {
            // sources for 			$phi iNsTr_28 := 			  ($cast ($uint<64>) phitmp21 ) $on bb_3_bb_4			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_2_bb_4 // type of target is $uint<64>
            // ($cast ($uint<64>) phitmp21 )
            ;;[type_cast_225] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_222_req] 
        }
      }
      bb_2_bb_4 |-> (bb_2_bb_4_PhiReq)
      ||[bb_3_bb_4_PhiReq] 
      {
        ;;[phi_stmt_222] 
        {
          ||[phi_stmt_222_sources] 
          {
            // sources for 			$phi iNsTr_28 := 			  ($cast ($uint<64>) phitmp21 ) $on bb_3_bb_4			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_2_bb_4 // type of target is $uint<64>
            // ($cast ($uint<64>) phitmp21 )
            ;;[type_cast_225] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_222_req] 
        }
      }
      bb_3_bb_4 |-> (bb_3_bb_4_PhiReq)
      $P [merge_stmt_221_PhiReqMerge] 
      merge_stmt_221_PhiReqMerge <-| ( bb_2_bb_4_PhiReq  bb_3_bb_4_PhiReq )
      ||[merge_stmt_221_PhiAck] 
      {
        $T [phi_stmt_222_ack] 
      }
      merge_stmt_221_PhiReqMerge |-> (merge_stmt_221_PhiAck)
      merge_stmt_221__exit__  <-| (merge_stmt_221_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 62  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 70
      //---------------------   merge statement  file prog.linked.opt.aa, line 70  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_251_PhiReqMerge] 
      merge_stmt_251_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_251_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_251_PhiReqMerge |-> (merge_stmt_251_PhiAck)
      merge_stmt_251__exit__  <-| (merge_stmt_251_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 70  --------------------------
      assign_stmt_10_to_assign_stmt_33__entry__ <-| (branch_block_stmt_5__entry__)
      if_stmt_34__entry__ <-| (assign_stmt_10_to_assign_stmt_33__exit__)
      merge_stmt_40__entry__ <-| (if_stmt_34__exit__)
      assign_stmt_46_to_assign_stmt_69__entry__ <-| (merge_stmt_40__exit__)
      bb_1_bb_2 <-| (assign_stmt_46_to_assign_stmt_69__exit__)
      assign_stmt_85_to_assign_stmt_197__entry__ <-| (merge_stmt_71__exit__)
      if_stmt_198__entry__ <-| (assign_stmt_85_to_assign_stmt_197__exit__)
      merge_stmt_204__entry__ <-| (if_stmt_198__exit__)
      assign_stmt_209_to_assign_stmt_219__entry__ <-| (merge_stmt_204__exit__)
      bb_3_bb_4 <-| (assign_stmt_209_to_assign_stmt_219__exit__)
      assign_stmt_234_to_assign_stmt_249__entry__ <-| (merge_stmt_221__exit__)
      return__ <-| (assign_stmt_234_to_assign_stmt_249__exit__)
      merge_stmt_251__exit__ |-> (branch_block_stmt_5__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 18
    // constant-object-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 26
    // constant-object-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 56
    // constant-object-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 62
    // constant-object-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 70
    // constant-object-declarations for block %fdiv32%body
    //  file prog.linked.opt.aa, line 6
    // constant-object-declarations for block %fdiv32
    //  file prog.linked.opt.aa, line 1
    // constant-declarations for block %fdiv32%body
    //  file prog.linked.opt.aa, line 6
    // ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_18_wire_constant] : $int<64> := _b0111111111111111111111111111111111111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_24_wire_constant] : $int<64> := _b0111111111111111111111111111111111111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_30_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // if-statement  
    //  file prog.linked.opt.aa, line 13
    // constant-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 18
    // ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_44_wire_constant] : $int<64> := _b0111111111110000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_50_wire_constant] : $int<64> := _b0111111111110000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_56_wire_constant] : $int<64> := _b0011111111100000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_67_wire_constant] : $int<64> := _b0111111111110000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 26
    // constant-declarations for phi:  			$phi iNsTr_4 := 			  ($cast ($uint<64>) phitmp20 ) $on bb_1_bb_2			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_0_bb_2 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 27
    // ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) )
    $constant $W[type_cast_78_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_83_wire_constant] : $int<64> := _b0000000000001111111111111111111111111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_89_wire_constant] : $int<64> := _b0011111111100000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_100_wire_constant] : $int<64> := _b0011111111101111111111111111111111111111111111111111111111111111// -1
    // ($bitcast ($float<11,52>) _f1.882353e+00 )
    $constant $W[type_cast_114_wire_constant] : $float<11,52> := _b0011111111111110000111100001111000101101111010000111000010010111// 1.882353e+00
    // ($bitcast ($float<11,52>) _f2.823529e+00 )
    $constant $W[type_cast_119_wire_constant] : $float<11,52> := _b0100000000000110100101101001011001011111010100100111010111101111// 2.823529e+00
    // ($bitcast ($float<11,52>) _f2.000000e+00 )
    $constant $W[type_cast_130_wire_constant] : $float<11,52> := _b0100000000000000000000000000000000000000000000000000000000000000// 2.000000e+00
    // ($bitcast ($float<11,52>) _f2.000000e+00 )
    $constant $W[type_cast_146_wire_constant] : $float<11,52> := _b0100000000000000000000000000000000000000000000000000000000000000// 2.000000e+00
    // ($bitcast ($float<11,52>) _f2.000000e+00 )
    $constant $W[type_cast_162_wire_constant] : $float<11,52> := _b0100000000000000000000000000000000000000000000000000000000000000// 2.000000e+00
    // ($bitcast ($float<11,52>) _f2.000000e+00 )
    $constant $W[type_cast_178_wire_constant] : $float<11,52> := _b0100000000000000000000000000000000000000000000000000000000000000// 2.000000e+00
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_190_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // if-statement  
    //  file prog.linked.opt.aa, line 51
    // constant-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 56
    // ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_217_wire_constant] : $int<64> := _b0111111111111111111111111111111111111111111111111111111111111111// -1
    // constant-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 62
    // constant-declarations for phi:  			$phi iNsTr_28 := 			  ($cast ($uint<64>) phitmp21 ) $on bb_3_bb_4			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_2_bb_4 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 63
    // ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) )
    $constant $W[type_cast_228_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  )
    $constant $W[type_cast_238_wire_constant] : $int<64> := _b1000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for block %fdiv32%body%
    //  file prog.linked.opt.aa, line 70
    // block %fdiv32%body
    //  file prog.linked.opt.aa, line 6
    // 		tmp17 := ($bitcast ($uint<64>) a )
    //  file prog.linked.opt.aa, line 8
    // tmp17
    $W[tmp17_10] : $int<64>
    // 		tmp15 := ($bitcast ($uint<64>) b )
    //  file prog.linked.opt.aa, line 9
    // tmp15
    $W[tmp15_14] : $int<64>
    // 		iNsTr_0 := (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 10
    // iNsTr_0
    $W[iNsTr_0_20] : $int<64>
    // 		iNsTr_1 := (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 11
    // iNsTr_1
    $W[iNsTr_1_26] : $int<64>
    // 		iNsTr_2 := (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 12
    // iNsTr_2
    $W[iNsTr_2_33] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 13
    // 		iNsTr_25 := (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 20
    // iNsTr_25
    $W[iNsTr_25_46] : $int<64>
    // 		tmp17x_xmask := (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 21
    // tmp17x_xmask
    $W[tmp17x_xmask_52] : $int<64>
    // 		iNsTr_26 := (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 22
    // iNsTr_26
    $W[iNsTr_26_58] : $int<64>
    // 		phitmp := (iNsTr_26 - iNsTr_25)
    //  file prog.linked.opt.aa, line 23
    // phitmp
    $W[phitmp_63] : $int<64>
    // 		phitmp20 := (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 24
    // phitmp20
    $W[phitmp20_69] : $int<64>
    // merge-statement  
    //  file prog.linked.opt.aa, line 26
    // 			$phi iNsTr_4 := 			  ($cast ($uint<64>) phitmp20 ) $on bb_1_bb_2			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_0_bb_2 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 27
    // ($cast ($uint<64>) phitmp20 )
    $intermediate $W[type_cast_75_wire] : $int<64>
    // iNsTr_4
    $W[iNsTr_4_72] : $int<64>
    // 		iNsTr_5 := (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 29
    // iNsTr_5
    $W[iNsTr_5_85] : $int<64>
    // 		iNsTr_6 := (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 30
    // iNsTr_6
    $W[iNsTr_6_91] : $int<64>
    // 		iNsTr_7 := (iNsTr_4 | iNsTr_5)
    //  file prog.linked.opt.aa, line 31
    // iNsTr_7
    $W[iNsTr_7_96] : $int<64>
    // 		iNsTr_8 := (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 32
    // iNsTr_8
    $W[iNsTr_8_102] : $int<64>
    // 		tmp13 := ($bitcast ($float<11,52>) iNsTr_7 )
    //  file prog.linked.opt.aa, line 33
    // tmp13
    $W[tmp13_106] : $float<11,52>
    // 		tmp11 := ($bitcast ($float<11,52>) iNsTr_8 )
    //  file prog.linked.opt.aa, line 34
    // tmp11
    $W[tmp11_110] : $float<11,52>
    // 		iNsTr_9 := (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
    //  file prog.linked.opt.aa, line 35
    // iNsTr_9
    $W[iNsTr_9_116] : $float<11,52>
    // 		iNsTr_10 := (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
    //  file prog.linked.opt.aa, line 36
    // iNsTr_10
    $W[iNsTr_10_122] : $float<11,52>
    // 		iNsTr_11 := (tmp11 * iNsTr_10)
    //  file prog.linked.opt.aa, line 37
    // iNsTr_11
    $W[iNsTr_11_127] : $float<11,52>
    // 		iNsTr_12 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
    //  file prog.linked.opt.aa, line 38
    // iNsTr_12
    $W[iNsTr_12_133] : $float<11,52>
    // 		iNsTr_13 := (iNsTr_10 * iNsTr_12)
    //  file prog.linked.opt.aa, line 39
    // iNsTr_13
    $W[iNsTr_13_138] : $float<11,52>
    // 		iNsTr_14 := (tmp11 * iNsTr_13)
    //  file prog.linked.opt.aa, line 40
    // iNsTr_14
    $W[iNsTr_14_143] : $float<11,52>
    // 		iNsTr_15 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
    //  file prog.linked.opt.aa, line 41
    // iNsTr_15
    $W[iNsTr_15_149] : $float<11,52>
    // 		iNsTr_16 := (iNsTr_13 * iNsTr_15)
    //  file prog.linked.opt.aa, line 42
    // iNsTr_16
    $W[iNsTr_16_154] : $float<11,52>
    // 		iNsTr_17 := (tmp11 * iNsTr_16)
    //  file prog.linked.opt.aa, line 43
    // iNsTr_17
    $W[iNsTr_17_159] : $float<11,52>
    // 		iNsTr_18 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
    //  file prog.linked.opt.aa, line 44
    // iNsTr_18
    $W[iNsTr_18_165] : $float<11,52>
    // 		iNsTr_19 := (iNsTr_16 * iNsTr_18)
    //  file prog.linked.opt.aa, line 45
    // iNsTr_19
    $W[iNsTr_19_170] : $float<11,52>
    // 		iNsTr_20 := (tmp11 * iNsTr_19)
    //  file prog.linked.opt.aa, line 46
    // iNsTr_20
    $W[iNsTr_20_175] : $float<11,52>
    // 		iNsTr_21 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
    //  file prog.linked.opt.aa, line 47
    // iNsTr_21
    $W[iNsTr_21_181] : $float<11,52>
    // 		iNsTr_22 := (iNsTr_19 * iNsTr_21)
    //  file prog.linked.opt.aa, line 48
    // iNsTr_22
    $W[iNsTr_22_186] : $float<11,52>
    // 		iNsTr_23 := (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 49
    // iNsTr_23
    $W[iNsTr_23_192] : $int<1>
    // 		orx_xcond := (iNsTr_2 | iNsTr_23)
    //  file prog.linked.opt.aa, line 50
    // orx_xcond
    $W[orx_xcond_197] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 51
    // 		iNsTr_33 := (tmp13 * iNsTr_22)
    //  file prog.linked.opt.aa, line 58
    // iNsTr_33
    $W[iNsTr_33_209] : $float<11,52>
    // 		phitmp19 := ($bitcast ($uint<64>) iNsTr_33 )
    //  file prog.linked.opt.aa, line 59
    // phitmp19
    $W[phitmp19_213] : $int<64>
    // 		phitmp21 := (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 60
    // phitmp21
    $W[phitmp21_219] : $int<64>
    // merge-statement  
    //  file prog.linked.opt.aa, line 62
    // 			$phi iNsTr_28 := 			  ($cast ($uint<64>) phitmp21 ) $on bb_3_bb_4			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_2_bb_4 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 63
    // ($cast ($uint<64>) phitmp21 )
    $intermediate $W[type_cast_225_wire] : $int<64>
    // iNsTr_28
    $W[iNsTr_28_222] : $int<64>
    // 		iNsTr_29 := (tmp15 ^ tmp17)
    //  file prog.linked.opt.aa, line 65
    // iNsTr_29
    $W[iNsTr_29_234] : $int<64>
    // 		iNsTr_30 := (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 66
    // iNsTr_30
    $W[iNsTr_30_240] : $int<64>
    // 		iNsTr_31 := (iNsTr_28 | iNsTr_30)
    //  file prog.linked.opt.aa, line 67
    // iNsTr_31
    $W[iNsTr_31_245] : $int<64>
    // 		ret_val__ := ($bitcast ($float<11,52>) iNsTr_31 )
    //  file prog.linked.opt.aa, line 68
    // ret_val__
    // datapath-instances for block %fdiv32%body
    //  file prog.linked.opt.aa, line 6
    // 		tmp17 := ($bitcast ($uint<64>) a )
    //  file prog.linked.opt.aa, line 8
    // ($bitcast ($uint<64>) a )
    # := [type_cast_9_inst] (a) (tmp17_10) 
    $delay type_cast_9_inst 1
    // 		tmp15 := ($bitcast ($uint<64>) b )
    //  file prog.linked.opt.aa, line 9
    // ($bitcast ($uint<64>) b )
    # := [type_cast_13_inst] (b) (tmp15_14) 
    $delay type_cast_13_inst 1
    // 		iNsTr_0 := (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 10
    // (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    &[AND_u64_u64_19_inst] (tmp17_10 type_cast_18_wire_constant) (iNsTr_0_20) 
    $delay AND_u64_u64_19_inst 1
    // 		iNsTr_1 := (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 11
    // (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    &[AND_u64_u64_25_inst] (tmp15_14 type_cast_24_wire_constant) (iNsTr_1_26) 
    $delay AND_u64_u64_25_inst 1
    // 		iNsTr_2 := (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 12
    // (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    ==[EQ_u64_u1_31_inst] (iNsTr_0_20 type_cast_30_wire_constant) (iNsTr_2_33) 
    $delay EQ_u64_u1_31_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 13
    ==0? [if_stmt_34_branch] (iNsTr_2_33)
    // 		iNsTr_25 := (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 20
    // (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    &[AND_u64_u64_45_inst] (tmp15_14 type_cast_44_wire_constant) (iNsTr_25_46) 
    $delay AND_u64_u64_45_inst 1
    // 		tmp17x_xmask := (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 21
    // (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    &[AND_u64_u64_51_inst] (tmp17_10 type_cast_50_wire_constant) (tmp17x_xmask_52) 
    $delay AND_u64_u64_51_inst 1
    // 		iNsTr_26 := (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 22
    // (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    +[ADD_u64_u64_57_inst] (tmp17x_xmask_52 type_cast_56_wire_constant) (iNsTr_26_58) 
    $delay ADD_u64_u64_57_inst 1
    // 		phitmp := (iNsTr_26 - iNsTr_25)
    //  file prog.linked.opt.aa, line 23
    // (iNsTr_26 - iNsTr_25)
    -[SUB_u64_u64_62_inst] (iNsTr_26_58 iNsTr_25_46) (phitmp_63) 
    $delay SUB_u64_u64_62_inst 1
    // 		phitmp20 := (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 24
    // (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
    &[AND_u64_u64_68_inst] (phitmp_63 type_cast_67_wire_constant) (phitmp20_69) 
    $delay AND_u64_u64_68_inst 1
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 26
    // 			$phi iNsTr_4 := 			  ($cast ($uint<64>) phitmp20 ) $on bb_1_bb_2			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_0_bb_2 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 27
    // ($cast ($uint<64>) phitmp20 )
    # := [type_cast_75_inst] (phitmp20_69) (type_cast_75_wire) 
    $delay type_cast_75_inst 1
    $phi [phi_stmt_72] (type_cast_75_wire type_cast_78_wire_constant) ( iNsTr_4_72 )
    // 		iNsTr_5 := (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 29
    // (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
    &[AND_u64_u64_84_inst] (tmp17_10 type_cast_83_wire_constant) (iNsTr_5_85) 
    $delay AND_u64_u64_84_inst 1
    // 		iNsTr_6 := (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 30
    // (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
    |[OR_u64_u64_90_inst] (tmp15_14 type_cast_89_wire_constant) (iNsTr_6_91) 
    $delay OR_u64_u64_90_inst 1
    // 		iNsTr_7 := (iNsTr_4 | iNsTr_5)
    //  file prog.linked.opt.aa, line 31
    // (iNsTr_4 | iNsTr_5)
    |[OR_u64_u64_95_inst] (iNsTr_4_72 iNsTr_5_85) (iNsTr_7_96) 
    $delay OR_u64_u64_95_inst 1
    // 		iNsTr_8 := (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 32
    // (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
    &[AND_u64_u64_101_inst] (iNsTr_6_91 type_cast_100_wire_constant) (iNsTr_8_102) 
    $delay AND_u64_u64_101_inst 1
    // 		tmp13 := ($bitcast ($float<11,52>) iNsTr_7 )
    //  file prog.linked.opt.aa, line 33
    // ($bitcast ($float<11,52>) iNsTr_7 )
    # := [type_cast_105_inst] (iNsTr_7_96) (tmp13_106) 
    $delay type_cast_105_inst 1
    // 		tmp11 := ($bitcast ($float<11,52>) iNsTr_8 )
    //  file prog.linked.opt.aa, line 34
    // ($bitcast ($float<11,52>) iNsTr_8 )
    # := [type_cast_109_inst] (iNsTr_8_102) (tmp11_110) 
    $delay type_cast_109_inst 1
    // 		iNsTr_9 := (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
    //  file prog.linked.opt.aa, line 35
    // (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
    *[MUL_f64_f64_115_inst] (tmp11_110 type_cast_114_wire_constant) (iNsTr_9_116) 
    $delay MUL_f64_f64_115_inst 24
    // 		iNsTr_10 := (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
    //  file prog.linked.opt.aa, line 36
    // (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
    -[SUB_f64_f64_121_inst] (type_cast_119_wire_constant iNsTr_9_116) (iNsTr_10_122) 
    $delay SUB_f64_f64_121_inst 24
    // 		iNsTr_11 := (tmp11 * iNsTr_10)
    //  file prog.linked.opt.aa, line 37
    // (tmp11 * iNsTr_10)
    *[MUL_f64_f64_126_inst] (tmp11_110 iNsTr_10_122) (iNsTr_11_127) 
    $delay MUL_f64_f64_126_inst 24
    // 		iNsTr_12 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
    //  file prog.linked.opt.aa, line 38
    // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
    -[SUB_f64_f64_132_inst] (type_cast_130_wire_constant iNsTr_11_127) (iNsTr_12_133) 
    $delay SUB_f64_f64_132_inst 24
    // 		iNsTr_13 := (iNsTr_10 * iNsTr_12)
    //  file prog.linked.opt.aa, line 39
    // (iNsTr_10 * iNsTr_12)
    *[MUL_f64_f64_137_inst] (iNsTr_10_122 iNsTr_12_133) (iNsTr_13_138) 
    $delay MUL_f64_f64_137_inst 24
    // 		iNsTr_14 := (tmp11 * iNsTr_13)
    //  file prog.linked.opt.aa, line 40
    // (tmp11 * iNsTr_13)
    *[MUL_f64_f64_142_inst] (tmp11_110 iNsTr_13_138) (iNsTr_14_143) 
    $delay MUL_f64_f64_142_inst 24
    // 		iNsTr_15 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
    //  file prog.linked.opt.aa, line 41
    // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
    -[SUB_f64_f64_148_inst] (type_cast_146_wire_constant iNsTr_14_143) (iNsTr_15_149) 
    $delay SUB_f64_f64_148_inst 24
    // 		iNsTr_16 := (iNsTr_13 * iNsTr_15)
    //  file prog.linked.opt.aa, line 42
    // (iNsTr_13 * iNsTr_15)
    *[MUL_f64_f64_153_inst] (iNsTr_13_138 iNsTr_15_149) (iNsTr_16_154) 
    $delay MUL_f64_f64_153_inst 24
    // 		iNsTr_17 := (tmp11 * iNsTr_16)
    //  file prog.linked.opt.aa, line 43
    // (tmp11 * iNsTr_16)
    *[MUL_f64_f64_158_inst] (tmp11_110 iNsTr_16_154) (iNsTr_17_159) 
    $delay MUL_f64_f64_158_inst 24
    // 		iNsTr_18 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
    //  file prog.linked.opt.aa, line 44
    // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
    -[SUB_f64_f64_164_inst] (type_cast_162_wire_constant iNsTr_17_159) (iNsTr_18_165) 
    $delay SUB_f64_f64_164_inst 24
    // 		iNsTr_19 := (iNsTr_16 * iNsTr_18)
    //  file prog.linked.opt.aa, line 45
    // (iNsTr_16 * iNsTr_18)
    *[MUL_f64_f64_169_inst] (iNsTr_16_154 iNsTr_18_165) (iNsTr_19_170) 
    $delay MUL_f64_f64_169_inst 24
    // 		iNsTr_20 := (tmp11 * iNsTr_19)
    //  file prog.linked.opt.aa, line 46
    // (tmp11 * iNsTr_19)
    *[MUL_f64_f64_174_inst] (tmp11_110 iNsTr_19_170) (iNsTr_20_175) 
    $delay MUL_f64_f64_174_inst 24
    // 		iNsTr_21 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
    //  file prog.linked.opt.aa, line 47
    // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
    -[SUB_f64_f64_180_inst] (type_cast_178_wire_constant iNsTr_20_175) (iNsTr_21_181) 
    $delay SUB_f64_f64_180_inst 24
    // 		iNsTr_22 := (iNsTr_19 * iNsTr_21)
    //  file prog.linked.opt.aa, line 48
    // (iNsTr_19 * iNsTr_21)
    *[MUL_f64_f64_185_inst] (iNsTr_19_170 iNsTr_21_181) (iNsTr_22_186) 
    $delay MUL_f64_f64_185_inst 24
    // 		iNsTr_23 := (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 49
    // (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
    ==[EQ_u64_u1_191_inst] (iNsTr_1_26 type_cast_190_wire_constant) (iNsTr_23_192) 
    $delay EQ_u64_u1_191_inst 1
    // 		orx_xcond := (iNsTr_2 | iNsTr_23)
    //  file prog.linked.opt.aa, line 50
    // (iNsTr_2 | iNsTr_23)
    |[OR_u1_u1_196_inst] (iNsTr_2_33 iNsTr_23_192) (orx_xcond_197) 
    $delay OR_u1_u1_196_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 51
    ==0? [if_stmt_198_branch] (orx_xcond_197)
    // 		iNsTr_33 := (tmp13 * iNsTr_22)
    //  file prog.linked.opt.aa, line 58
    // (tmp13 * iNsTr_22)
    *[MUL_f64_f64_208_inst] (tmp13_106 iNsTr_22_186) (iNsTr_33_209) 
    $delay MUL_f64_f64_208_inst 24
    // 		phitmp19 := ($bitcast ($uint<64>) iNsTr_33 )
    //  file prog.linked.opt.aa, line 59
    // ($bitcast ($uint<64>) iNsTr_33 )
    # := [type_cast_212_inst] (iNsTr_33_209) (phitmp19_213) 
    $delay type_cast_212_inst 1
    // 		phitmp21 := (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 60
    // (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
    &[AND_u64_u64_218_inst] (phitmp19_213 type_cast_217_wire_constant) (phitmp21_219) 
    $delay AND_u64_u64_218_inst 1
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 62
    // 			$phi iNsTr_28 := 			  ($cast ($uint<64>) phitmp21 ) $on bb_3_bb_4			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on bb_2_bb_4 // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 63
    // ($cast ($uint<64>) phitmp21 )
    # := [type_cast_225_inst] (phitmp21_219) (type_cast_225_wire) 
    $delay type_cast_225_inst 1
    $phi [phi_stmt_222] (type_cast_225_wire type_cast_228_wire_constant) ( iNsTr_28_222 )
    // 		iNsTr_29 := (tmp15 ^ tmp17)
    //  file prog.linked.opt.aa, line 65
    // (tmp15 ^ tmp17)
    ^[XOR_u64_u64_233_inst] (tmp15_14 tmp17_10) (iNsTr_29_234) 
    $delay XOR_u64_u64_233_inst 1
    // 		iNsTr_30 := (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
    //  file prog.linked.opt.aa, line 66
    // (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
    &[AND_u64_u64_239_inst] (iNsTr_29_234 type_cast_238_wire_constant) (iNsTr_30_240) 
    $delay AND_u64_u64_239_inst 1
    // 		iNsTr_31 := (iNsTr_28 | iNsTr_30)
    //  file prog.linked.opt.aa, line 67
    // (iNsTr_28 | iNsTr_30)
    |[OR_u64_u64_244_inst] (iNsTr_28_222 iNsTr_30_240) (iNsTr_31_245) 
    $delay OR_u64_u64_244_inst 1
    // 		ret_val__ := ($bitcast ($float<11,52>) iNsTr_31 )
    //  file prog.linked.opt.aa, line 68
    // ($bitcast ($float<11,52>) iNsTr_31 )
    # := [type_cast_248_inst] (iNsTr_31_245) (ret_val__) 
    $delay type_cast_248_inst 1
  }
  // end data-path
  // 		tmp17 := ($bitcast ($uint<64>) a )
  //  file prog.linked.opt.aa, line 8
  // ($bitcast ($uint<64>) a )
  type_cast_9_inst <=> (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_9_Sample/rr branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_9_Update/cr) (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_9_Sample/ra branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_9_Update/ca)
  // 		tmp15 := ($bitcast ($uint<64>) b )
  //  file prog.linked.opt.aa, line 9
  // ($bitcast ($uint<64>) b )
  type_cast_13_inst <=> (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_13_Sample/rr branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_13_Update/cr) (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_13_Sample/ra branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/type_cast_13_Update/ca)
  // 		iNsTr_0 := (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 10
  // (tmp17 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  AND_u64_u64_19_inst <=> (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_19_Sample/rr branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_19_Update/cr) (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_19_Sample/ra branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_19_Update/ca)
  // 		iNsTr_1 := (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 11
  // (tmp15 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  AND_u64_u64_25_inst <=> (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_25_Sample/rr branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_25_Update/cr) (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_25_Sample/ra branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/AND_u64_u64_25_Update/ca)
  // 		iNsTr_2 := (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 12
  // (iNsTr_0 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
  EQ_u64_u1_31_inst <=> (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/EQ_u64_u1_31_Sample/rr branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/EQ_u64_u1_31_Update/cr) (branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/EQ_u64_u1_31_Sample/ra branch_block_stmt_5/assign_stmt_10_to_assign_stmt_33/EQ_u64_u1_31_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 13
  if_stmt_34_branch <=> (branch_block_stmt_5/if_stmt_34_eval_test/branch_req) (branch_block_stmt_5/if_stmt_34_else_link/else_choice_transition branch_block_stmt_5/if_stmt_34_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 18
  // 		iNsTr_25 := (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 20
  // (tmp15 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  AND_u64_u64_45_inst <=> (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_45_Sample/rr branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_45_Update/cr) (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_45_Sample/ra branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_45_Update/ca)
  // 		tmp17x_xmask := (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 21
  // (tmp17 & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  AND_u64_u64_51_inst <=> (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_51_Sample/rr branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_51_Update/cr) (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_51_Sample/ra branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_51_Update/ca)
  // 		iNsTr_26 := (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 22
  // (tmp17x_xmask + ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
  ADD_u64_u64_57_inst <=> (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/ADD_u64_u64_57_Sample/rr branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/ADD_u64_u64_57_Update/cr) (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/ADD_u64_u64_57_Sample/ra branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/ADD_u64_u64_57_Update/ca)
  // 		phitmp := (iNsTr_26 - iNsTr_25)
  //  file prog.linked.opt.aa, line 23
  // (iNsTr_26 - iNsTr_25)
  SUB_u64_u64_62_inst <=> (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/SUB_u64_u64_62_Sample/rr branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/SUB_u64_u64_62_Update/cr) (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/SUB_u64_u64_62_Sample/ra branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/SUB_u64_u64_62_Update/ca)
  // 		phitmp20 := (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 24
  // (phitmp & ($bitcast ($uint<64>) _b0111111111110000000000000000000000000000000000000000000000000000  ))
  AND_u64_u64_68_inst <=> (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_68_Sample/rr branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_68_Update/cr) (branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_68_Sample/ra branch_block_stmt_5/assign_stmt_46_to_assign_stmt_69/AND_u64_u64_68_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 26
  // ($cast ($uint<64>) phitmp20 )
  type_cast_75_inst <=> (branch_block_stmt_5/bb_1_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_sources/type_cast_75/SplitProtocol/Sample/rr branch_block_stmt_5/bb_1_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_sources/type_cast_75/SplitProtocol/Update/cr) (branch_block_stmt_5/bb_1_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_sources/type_cast_75/SplitProtocol/Sample/ra branch_block_stmt_5/bb_1_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_sources/type_cast_75/SplitProtocol/Update/ca)
  phi_stmt_72 <=> (branch_block_stmt_5/bb_1_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_req branch_block_stmt_5/bb_0_bb_2_PhiReq/phi_stmt_72/phi_stmt_72_req) (branch_block_stmt_5/merge_stmt_71_PhiAck/phi_stmt_72_ack)
  // 		iNsTr_5 := (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 29
  // (tmp17 & ($bitcast ($uint<64>) _b0000000000001111111111111111111111111111111111111111111111111111  ))
  AND_u64_u64_84_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_84_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_84_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_84_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_84_Update/ca)
  // 		iNsTr_6 := (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 30
  // (tmp15 | ($bitcast ($uint<64>) _b0011111111100000000000000000000000000000000000000000000000000000  ))
  OR_u64_u64_90_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_90_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_90_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_90_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_90_Update/ca)
  // 		iNsTr_7 := (iNsTr_4 | iNsTr_5)
  //  file prog.linked.opt.aa, line 31
  // (iNsTr_4 | iNsTr_5)
  OR_u64_u64_95_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_95_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_95_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_95_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u64_u64_95_Update/ca)
  // 		iNsTr_8 := (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 32
  // (iNsTr_6 & ($bitcast ($uint<64>) _b0011111111101111111111111111111111111111111111111111111111111111  ))
  AND_u64_u64_101_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_101_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_101_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_101_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/AND_u64_u64_101_Update/ca)
  // 		tmp13 := ($bitcast ($float<11,52>) iNsTr_7 )
  //  file prog.linked.opt.aa, line 33
  // ($bitcast ($float<11,52>) iNsTr_7 )
  type_cast_105_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_105_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_105_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_105_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_105_Update/ca)
  // 		tmp11 := ($bitcast ($float<11,52>) iNsTr_8 )
  //  file prog.linked.opt.aa, line 34
  // ($bitcast ($float<11,52>) iNsTr_8 )
  type_cast_109_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_109_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_109_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_109_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/type_cast_109_Update/ca)
  // 		iNsTr_9 := (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
  //  file prog.linked.opt.aa, line 35
  // (tmp11 * ($bitcast ($float<11,52>) _f1.882353e+00 ))
  MUL_f64_f64_115_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_115_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_115_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_115_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_115_Update/ca)
  // 		iNsTr_10 := (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
  //  file prog.linked.opt.aa, line 36
  // (($bitcast ($float<11,52>) _f2.823529e+00 ) - iNsTr_9)
  SUB_f64_f64_121_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_121_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_121_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_121_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_121_Update/ca)
  // 		iNsTr_11 := (tmp11 * iNsTr_10)
  //  file prog.linked.opt.aa, line 37
  // (tmp11 * iNsTr_10)
  MUL_f64_f64_126_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_126_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_126_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_126_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_126_Update/ca)
  // 		iNsTr_12 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
  //  file prog.linked.opt.aa, line 38
  // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_11)
  SUB_f64_f64_132_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_132_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_132_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_132_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_132_Update/ca)
  // 		iNsTr_13 := (iNsTr_10 * iNsTr_12)
  //  file prog.linked.opt.aa, line 39
  // (iNsTr_10 * iNsTr_12)
  MUL_f64_f64_137_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_137_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_137_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_137_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_137_Update/ca)
  // 		iNsTr_14 := (tmp11 * iNsTr_13)
  //  file prog.linked.opt.aa, line 40
  // (tmp11 * iNsTr_13)
  MUL_f64_f64_142_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_142_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_142_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_142_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_142_Update/ca)
  // 		iNsTr_15 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
  //  file prog.linked.opt.aa, line 41
  // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_14)
  SUB_f64_f64_148_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_148_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_148_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_148_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_148_Update/ca)
  // 		iNsTr_16 := (iNsTr_13 * iNsTr_15)
  //  file prog.linked.opt.aa, line 42
  // (iNsTr_13 * iNsTr_15)
  MUL_f64_f64_153_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_153_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_153_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_153_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_153_Update/ca)
  // 		iNsTr_17 := (tmp11 * iNsTr_16)
  //  file prog.linked.opt.aa, line 43
  // (tmp11 * iNsTr_16)
  MUL_f64_f64_158_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_158_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_158_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_158_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_158_Update/ca)
  // 		iNsTr_18 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
  //  file prog.linked.opt.aa, line 44
  // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_17)
  SUB_f64_f64_164_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_164_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_164_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_164_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_164_Update/ca)
  // 		iNsTr_19 := (iNsTr_16 * iNsTr_18)
  //  file prog.linked.opt.aa, line 45
  // (iNsTr_16 * iNsTr_18)
  MUL_f64_f64_169_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_169_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_169_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_169_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_169_Update/ca)
  // 		iNsTr_20 := (tmp11 * iNsTr_19)
  //  file prog.linked.opt.aa, line 46
  // (tmp11 * iNsTr_19)
  MUL_f64_f64_174_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_174_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_174_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_174_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_174_Update/ca)
  // 		iNsTr_21 := (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
  //  file prog.linked.opt.aa, line 47
  // (($bitcast ($float<11,52>) _f2.000000e+00 ) - iNsTr_20)
  SUB_f64_f64_180_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_180_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_180_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_180_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/SUB_f64_f64_180_Update/ca)
  // 		iNsTr_22 := (iNsTr_19 * iNsTr_21)
  //  file prog.linked.opt.aa, line 48
  // (iNsTr_19 * iNsTr_21)
  MUL_f64_f64_185_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_185_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_185_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_185_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/MUL_f64_f64_185_Update/ca)
  // 		iNsTr_23 := (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 49
  // (iNsTr_1 == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ))
  EQ_u64_u1_191_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/EQ_u64_u1_191_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/EQ_u64_u1_191_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/EQ_u64_u1_191_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/EQ_u64_u1_191_Update/ca)
  // 		orx_xcond := (iNsTr_2 | iNsTr_23)
  //  file prog.linked.opt.aa, line 50
  // (iNsTr_2 | iNsTr_23)
  OR_u1_u1_196_inst <=> (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u1_u1_196_Sample/rr branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u1_u1_196_Update/cr) (branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u1_u1_196_Sample/ra branch_block_stmt_5/assign_stmt_85_to_assign_stmt_197/OR_u1_u1_196_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 51
  if_stmt_198_branch <=> (branch_block_stmt_5/if_stmt_198_eval_test/branch_req) (branch_block_stmt_5/if_stmt_198_else_link/else_choice_transition branch_block_stmt_5/if_stmt_198_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 56
  // 		iNsTr_33 := (tmp13 * iNsTr_22)
  //  file prog.linked.opt.aa, line 58
  // (tmp13 * iNsTr_22)
  MUL_f64_f64_208_inst <=> (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/MUL_f64_f64_208_Sample/rr branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/MUL_f64_f64_208_Update/cr) (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/MUL_f64_f64_208_Sample/ra branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/MUL_f64_f64_208_Update/ca)
  // 		phitmp19 := ($bitcast ($uint<64>) iNsTr_33 )
  //  file prog.linked.opt.aa, line 59
  // ($bitcast ($uint<64>) iNsTr_33 )
  type_cast_212_inst <=> (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/type_cast_212_Sample/rr branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/type_cast_212_Update/cr) (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/type_cast_212_Sample/ra branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/type_cast_212_Update/ca)
  // 		phitmp21 := (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 60
  // (phitmp19 & ($bitcast ($uint<64>) _b0111111111111111111111111111111111111111111111111111111111111111  ))
  AND_u64_u64_218_inst <=> (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/AND_u64_u64_218_Sample/rr branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/AND_u64_u64_218_Update/cr) (branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/AND_u64_u64_218_Sample/ra branch_block_stmt_5/assign_stmt_209_to_assign_stmt_219/AND_u64_u64_218_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 62
  // ($cast ($uint<64>) phitmp21 )
  type_cast_225_inst <=> (branch_block_stmt_5/bb_3_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_sources/type_cast_225/SplitProtocol/Sample/rr branch_block_stmt_5/bb_3_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_sources/type_cast_225/SplitProtocol/Update/cr) (branch_block_stmt_5/bb_3_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_sources/type_cast_225/SplitProtocol/Sample/ra branch_block_stmt_5/bb_3_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_sources/type_cast_225/SplitProtocol/Update/ca)
  phi_stmt_222 <=> (branch_block_stmt_5/bb_3_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_req branch_block_stmt_5/bb_2_bb_4_PhiReq/phi_stmt_222/phi_stmt_222_req) (branch_block_stmt_5/merge_stmt_221_PhiAck/phi_stmt_222_ack)
  // 		iNsTr_29 := (tmp15 ^ tmp17)
  //  file prog.linked.opt.aa, line 65
  // (tmp15 ^ tmp17)
  XOR_u64_u64_233_inst <=> (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/XOR_u64_u64_233_Sample/rr branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/XOR_u64_u64_233_Update/cr) (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/XOR_u64_u64_233_Sample/ra branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/XOR_u64_u64_233_Update/ca)
  // 		iNsTr_30 := (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
  //  file prog.linked.opt.aa, line 66
  // (iNsTr_29 & ($bitcast ($uint<64>) _b1000000000000000000000000000000000000000000000000000000000000000  ))
  AND_u64_u64_239_inst <=> (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/AND_u64_u64_239_Sample/rr branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/AND_u64_u64_239_Update/cr) (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/AND_u64_u64_239_Sample/ra branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/AND_u64_u64_239_Update/ca)
  // 		iNsTr_31 := (iNsTr_28 | iNsTr_30)
  //  file prog.linked.opt.aa, line 67
  // (iNsTr_28 | iNsTr_30)
  OR_u64_u64_244_inst <=> (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/OR_u64_u64_244_Sample/rr branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/OR_u64_u64_244_Update/cr) (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/OR_u64_u64_244_Sample/ra branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/OR_u64_u64_244_Update/ca)
  // 		ret_val__ := ($bitcast ($float<11,52>) iNsTr_31 )
  //  file prog.linked.opt.aa, line 68
  // ($bitcast ($float<11,52>) iNsTr_31 )
  type_cast_248_inst <=> (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/type_cast_248_Sample/rr branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/type_cast_248_Update/cr) (branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/type_cast_248_Sample/ra branch_block_stmt_5/assign_stmt_234_to_assign_stmt_249/type_cast_248_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 70
}
$module [fpadd32f] 
{
  $in x:$float<8,23>
  // can point into  foreign( $void )
  y:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %fpadd32f
  //  file prog.linked.opt.aa, line 74
  // pipe-declarations for block %fpadd32f%body
  //  file prog.linked.opt.aa, line 79
  // pipe-declarations for block %fpadd32f%body%
  //  file prog.linked.opt.aa, line 83
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_259] // Branch Block  file prog.linked.opt.aa, line 79
    {
      $P [branch_block_stmt_259__entry__]
      branch_block_stmt_259__entry__ <-| ($entry)
      $P [branch_block_stmt_259__exit__]
      branch_block_stmt_259__exit__ |-> ($exit)
      $P [assign_stmt_264__entry__] 
      $P [assign_stmt_264__exit__] 
      $P [return__]
      $P [merge_stmt_266__exit__] 
      ::[assign_stmt_264] 
      {
        // 		ret_val__ := (x + y)
        //  file prog.linked.opt.aa, line 81
        // Source expression
        // (x + y)
        $T[ADD_f32_f32_263_sample_start_] 
        $T[ADD_f32_f32_263_sample_completed_] 
        $T[ADD_f32_f32_263_update_start_] 
        $T[ADD_f32_f32_263_update_completed_] 
        // x
        $T[R_x_261_sample_start_] 
        $T[R_x_261_sample_completed_] 
        $T[R_x_261_update_start_] 
        $T[R_x_261_update_completed_] 
        // reference to interface object
        R_x_261_sample_start_ <-& ($entry)
        R_x_261_sample_completed_ <-& (R_x_261_sample_start_)
        R_x_261_update_start_ <-& (R_x_261_sample_completed_)
        R_x_261_update_completed_ <-& (R_x_261_update_start_)
        // y
        $T[R_y_262_sample_start_] 
        $T[R_y_262_sample_completed_] 
        $T[R_y_262_update_start_] 
        $T[R_y_262_update_completed_] 
        // reference to interface object
        R_y_262_sample_start_ <-& ($entry)
        R_y_262_sample_completed_ <-& (R_y_262_sample_start_)
        R_y_262_update_start_ <-& (R_y_262_sample_completed_)
        R_y_262_update_completed_ <-& (R_y_262_update_start_)
        ADD_f32_f32_263_sample_start_ <-& (R_x_261_update_completed_)
        ADD_f32_f32_263_sample_start_ <-& (R_y_262_update_completed_)
        ;;[ADD_f32_f32_263_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_f32_f32_263_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_f32_f32_263_sample_start_ &-> (ADD_f32_f32_263_Sample)
        ADD_f32_f32_263_sample_completed_ <-& (ADD_f32_f32_263_Sample)
        ADD_f32_f32_263_sample_completed_ &-> ($null)
        ADD_f32_f32_263_update_start_ &-> (ADD_f32_f32_263_Update)
        ADD_f32_f32_263_update_completed_ <-& (ADD_f32_f32_263_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_264__entry__ |-> (assign_stmt_264)
      assign_stmt_264__exit__ <-| (assign_stmt_264)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 83
      //---------------------   merge statement  file prog.linked.opt.aa, line 83  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_266_PhiReqMerge] 
      merge_stmt_266_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_266_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_266_PhiReqMerge |-> (merge_stmt_266_PhiAck)
      merge_stmt_266__exit__  <-| (merge_stmt_266_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 83  --------------------------
      assign_stmt_264__entry__ <-| (branch_block_stmt_259__entry__)
      return__ <-| (assign_stmt_264__exit__)
      merge_stmt_266__exit__ |-> (branch_block_stmt_259__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fpadd32f%body%
    //  file prog.linked.opt.aa, line 83
    // constant-object-declarations for block %fpadd32f%body
    //  file prog.linked.opt.aa, line 79
    // constant-object-declarations for block %fpadd32f
    //  file prog.linked.opt.aa, line 74
    // constant-declarations for block %fpadd32f%body
    //  file prog.linked.opt.aa, line 79
    // constant-declarations for block %fpadd32f%body%
    //  file prog.linked.opt.aa, line 83
    // block %fpadd32f%body
    //  file prog.linked.opt.aa, line 79
    // 		ret_val__ := (x + y)
    //  file prog.linked.opt.aa, line 81
    // ret_val__
    // datapath-instances for block %fpadd32f%body
    //  file prog.linked.opt.aa, line 79
    // 		ret_val__ := (x + y)
    //  file prog.linked.opt.aa, line 81
    // (x + y)
    +[ADD_f32_f32_263_inst] (x y) (ret_val__) 
    $delay ADD_f32_f32_263_inst 24
  }
  // end data-path
  // 		ret_val__ := (x + y)
  //  file prog.linked.opt.aa, line 81
  // (x + y)
  ADD_f32_f32_263_inst <=> (branch_block_stmt_259/assign_stmt_264/ADD_f32_f32_263_Sample/rr branch_block_stmt_259/assign_stmt_264/ADD_f32_f32_263_Update/cr) (branch_block_stmt_259/assign_stmt_264/ADD_f32_f32_263_Sample/ra branch_block_stmt_259/assign_stmt_264/ADD_f32_f32_263_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 83
}
$module [fpadd32fi] 
{
  $in x:$int<32>
  // can point into  foreign( $void )
  y:$int<32>
  // can point into  foreign( $void )
  $out ret_val__:$int<32>
  // can point into  foreign( $void )
  // pipe-declarations for block %fpadd32fi
  //  file prog.linked.opt.aa, line 87
  // pipe-declarations for block %fpadd32fi%body
  //  file prog.linked.opt.aa, line 92
  // pipe-declarations for block %fpadd32fi%body%
  //  file prog.linked.opt.aa, line 96
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_274] // Branch Block  file prog.linked.opt.aa, line 92
    {
      $P [branch_block_stmt_274__entry__]
      branch_block_stmt_274__entry__ <-| ($entry)
      $P [branch_block_stmt_274__exit__]
      branch_block_stmt_274__exit__ |-> ($exit)
      $P [assign_stmt_279__entry__] 
      $P [assign_stmt_279__exit__] 
      $P [return__]
      $P [merge_stmt_281__exit__] 
      ::[assign_stmt_279] 
      {
        // 		ret_val__ := (y + x)
        //  file prog.linked.opt.aa, line 94
        // Source expression
        // (y + x)
        $T[ADD_u32_u32_278_sample_start_] 
        $T[ADD_u32_u32_278_sample_completed_] 
        $T[ADD_u32_u32_278_update_start_] 
        $T[ADD_u32_u32_278_update_completed_] 
        // y
        $T[R_y_276_sample_start_] 
        $T[R_y_276_sample_completed_] 
        $T[R_y_276_update_start_] 
        $T[R_y_276_update_completed_] 
        // reference to interface object
        R_y_276_sample_start_ <-& ($entry)
        R_y_276_sample_completed_ <-& (R_y_276_sample_start_)
        R_y_276_update_start_ <-& (R_y_276_sample_completed_)
        R_y_276_update_completed_ <-& (R_y_276_update_start_)
        // x
        $T[R_x_277_sample_start_] 
        $T[R_x_277_sample_completed_] 
        $T[R_x_277_update_start_] 
        $T[R_x_277_update_completed_] 
        // reference to interface object
        R_x_277_sample_start_ <-& ($entry)
        R_x_277_sample_completed_ <-& (R_x_277_sample_start_)
        R_x_277_update_start_ <-& (R_x_277_sample_completed_)
        R_x_277_update_completed_ <-& (R_x_277_update_start_)
        ADD_u32_u32_278_sample_start_ <-& (R_y_276_update_completed_)
        ADD_u32_u32_278_sample_start_ <-& (R_x_277_update_completed_)
        ;;[ADD_u32_u32_278_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u32_u32_278_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u32_u32_278_sample_start_ &-> (ADD_u32_u32_278_Sample)
        ADD_u32_u32_278_sample_completed_ <-& (ADD_u32_u32_278_Sample)
        ADD_u32_u32_278_sample_completed_ &-> ($null)
        ADD_u32_u32_278_update_start_ &-> (ADD_u32_u32_278_Update)
        ADD_u32_u32_278_update_completed_ <-& (ADD_u32_u32_278_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_279__entry__ |-> (assign_stmt_279)
      assign_stmt_279__exit__ <-| (assign_stmt_279)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 96
      //---------------------   merge statement  file prog.linked.opt.aa, line 96  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_281_PhiReqMerge] 
      merge_stmt_281_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_281_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_281_PhiReqMerge |-> (merge_stmt_281_PhiAck)
      merge_stmt_281__exit__  <-| (merge_stmt_281_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 96  --------------------------
      assign_stmt_279__entry__ <-| (branch_block_stmt_274__entry__)
      return__ <-| (assign_stmt_279__exit__)
      merge_stmt_281__exit__ |-> (branch_block_stmt_274__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fpadd32fi%body%
    //  file prog.linked.opt.aa, line 96
    // constant-object-declarations for block %fpadd32fi%body
    //  file prog.linked.opt.aa, line 92
    // constant-object-declarations for block %fpadd32fi
    //  file prog.linked.opt.aa, line 87
    // constant-declarations for block %fpadd32fi%body
    //  file prog.linked.opt.aa, line 92
    // constant-declarations for block %fpadd32fi%body%
    //  file prog.linked.opt.aa, line 96
    // block %fpadd32fi%body
    //  file prog.linked.opt.aa, line 92
    // 		ret_val__ := (y + x)
    //  file prog.linked.opt.aa, line 94
    // ret_val__
    // datapath-instances for block %fpadd32fi%body
    //  file prog.linked.opt.aa, line 92
    // 		ret_val__ := (y + x)
    //  file prog.linked.opt.aa, line 94
    // (y + x)
    +[ADD_u32_u32_278_inst] (y x) (ret_val__) 
    $delay ADD_u32_u32_278_inst 1
  }
  // end data-path
  // 		ret_val__ := (y + x)
  //  file prog.linked.opt.aa, line 94
  // (y + x)
  ADD_u32_u32_278_inst <=> (branch_block_stmt_274/assign_stmt_279/ADD_u32_u32_278_Sample/rr branch_block_stmt_274/assign_stmt_279/ADD_u32_u32_278_Update/cr) (branch_block_stmt_274/assign_stmt_279/ADD_u32_u32_278_Sample/ra branch_block_stmt_274/assign_stmt_279/ADD_u32_u32_278_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 96
}
$module [fpmul32f] 
{
  $in x:$float<8,23>
  // can point into  foreign( $void )
  y:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %fpmul32f
  //  file prog.linked.opt.aa, line 100
  // pipe-declarations for block %fpmul32f%body
  //  file prog.linked.opt.aa, line 105
  // pipe-declarations for block %fpmul32f%body%
  //  file prog.linked.opt.aa, line 109
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_288] // Branch Block  file prog.linked.opt.aa, line 105
    {
      $P [branch_block_stmt_288__entry__]
      branch_block_stmt_288__entry__ <-| ($entry)
      $P [branch_block_stmt_288__exit__]
      branch_block_stmt_288__exit__ |-> ($exit)
      $P [assign_stmt_293__entry__] 
      $P [assign_stmt_293__exit__] 
      $P [return__]
      $P [merge_stmt_295__exit__] 
      ::[assign_stmt_293] 
      {
        // 		ret_val__ := (x * y)
        //  file prog.linked.opt.aa, line 107
        // Source expression
        // (x * y)
        $T[MUL_f32_f32_292_sample_start_] 
        $T[MUL_f32_f32_292_sample_completed_] 
        $T[MUL_f32_f32_292_update_start_] 
        $T[MUL_f32_f32_292_update_completed_] 
        // x
        $T[R_x_290_sample_start_] 
        $T[R_x_290_sample_completed_] 
        $T[R_x_290_update_start_] 
        $T[R_x_290_update_completed_] 
        // reference to interface object
        R_x_290_sample_start_ <-& ($entry)
        R_x_290_sample_completed_ <-& (R_x_290_sample_start_)
        R_x_290_update_start_ <-& (R_x_290_sample_completed_)
        R_x_290_update_completed_ <-& (R_x_290_update_start_)
        // y
        $T[R_y_291_sample_start_] 
        $T[R_y_291_sample_completed_] 
        $T[R_y_291_update_start_] 
        $T[R_y_291_update_completed_] 
        // reference to interface object
        R_y_291_sample_start_ <-& ($entry)
        R_y_291_sample_completed_ <-& (R_y_291_sample_start_)
        R_y_291_update_start_ <-& (R_y_291_sample_completed_)
        R_y_291_update_completed_ <-& (R_y_291_update_start_)
        MUL_f32_f32_292_sample_start_ <-& (R_x_290_update_completed_)
        MUL_f32_f32_292_sample_start_ <-& (R_y_291_update_completed_)
        ;;[MUL_f32_f32_292_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_f32_f32_292_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_f32_f32_292_sample_start_ &-> (MUL_f32_f32_292_Sample)
        MUL_f32_f32_292_sample_completed_ <-& (MUL_f32_f32_292_Sample)
        MUL_f32_f32_292_sample_completed_ &-> ($null)
        MUL_f32_f32_292_update_start_ &-> (MUL_f32_f32_292_Update)
        MUL_f32_f32_292_update_completed_ <-& (MUL_f32_f32_292_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_293__entry__ |-> (assign_stmt_293)
      assign_stmt_293__exit__ <-| (assign_stmt_293)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 109
      //---------------------   merge statement  file prog.linked.opt.aa, line 109  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_295_PhiReqMerge] 
      merge_stmt_295_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_295_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_295_PhiReqMerge |-> (merge_stmt_295_PhiAck)
      merge_stmt_295__exit__  <-| (merge_stmt_295_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 109  --------------------------
      assign_stmt_293__entry__ <-| (branch_block_stmt_288__entry__)
      return__ <-| (assign_stmt_293__exit__)
      merge_stmt_295__exit__ |-> (branch_block_stmt_288__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fpmul32f%body%
    //  file prog.linked.opt.aa, line 109
    // constant-object-declarations for block %fpmul32f%body
    //  file prog.linked.opt.aa, line 105
    // constant-object-declarations for block %fpmul32f
    //  file prog.linked.opt.aa, line 100
    // constant-declarations for block %fpmul32f%body
    //  file prog.linked.opt.aa, line 105
    // constant-declarations for block %fpmul32f%body%
    //  file prog.linked.opt.aa, line 109
    // block %fpmul32f%body
    //  file prog.linked.opt.aa, line 105
    // 		ret_val__ := (x * y)
    //  file prog.linked.opt.aa, line 107
    // ret_val__
    // datapath-instances for block %fpmul32f%body
    //  file prog.linked.opt.aa, line 105
    // 		ret_val__ := (x * y)
    //  file prog.linked.opt.aa, line 107
    // (x * y)
    *[MUL_f32_f32_292_inst] (x y) (ret_val__) 
    $delay MUL_f32_f32_292_inst 24
  }
  // end data-path
  // 		ret_val__ := (x * y)
  //  file prog.linked.opt.aa, line 107
  // (x * y)
  MUL_f32_f32_292_inst <=> (branch_block_stmt_288/assign_stmt_293/MUL_f32_f32_292_Sample/rr branch_block_stmt_288/assign_stmt_293/MUL_f32_f32_292_Update/cr) (branch_block_stmt_288/assign_stmt_293/MUL_f32_f32_292_Sample/ra branch_block_stmt_288/assign_stmt_293/MUL_f32_f32_292_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 109
}
$module [fpsub32f] 
{
  $in x:$float<8,23>
  // can point into  foreign( $void )
  y:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %fpsub32f
  //  file prog.linked.opt.aa, line 113
  // pipe-declarations for block %fpsub32f%body
  //  file prog.linked.opt.aa, line 118
  // pipe-declarations for block %fpsub32f%body%
  //  file prog.linked.opt.aa, line 122
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_302] // Branch Block  file prog.linked.opt.aa, line 118
    {
      $P [branch_block_stmt_302__entry__]
      branch_block_stmt_302__entry__ <-| ($entry)
      $P [branch_block_stmt_302__exit__]
      branch_block_stmt_302__exit__ |-> ($exit)
      $P [assign_stmt_307__entry__] 
      $P [assign_stmt_307__exit__] 
      $P [return__]
      $P [merge_stmt_309__exit__] 
      ::[assign_stmt_307] 
      {
        // 		ret_val__ := (x - y)
        //  file prog.linked.opt.aa, line 120
        // Source expression
        // (x - y)
        $T[SUB_f32_f32_306_sample_start_] 
        $T[SUB_f32_f32_306_sample_completed_] 
        $T[SUB_f32_f32_306_update_start_] 
        $T[SUB_f32_f32_306_update_completed_] 
        // x
        $T[R_x_304_sample_start_] 
        $T[R_x_304_sample_completed_] 
        $T[R_x_304_update_start_] 
        $T[R_x_304_update_completed_] 
        // reference to interface object
        R_x_304_sample_start_ <-& ($entry)
        R_x_304_sample_completed_ <-& (R_x_304_sample_start_)
        R_x_304_update_start_ <-& (R_x_304_sample_completed_)
        R_x_304_update_completed_ <-& (R_x_304_update_start_)
        // y
        $T[R_y_305_sample_start_] 
        $T[R_y_305_sample_completed_] 
        $T[R_y_305_update_start_] 
        $T[R_y_305_update_completed_] 
        // reference to interface object
        R_y_305_sample_start_ <-& ($entry)
        R_y_305_sample_completed_ <-& (R_y_305_sample_start_)
        R_y_305_update_start_ <-& (R_y_305_sample_completed_)
        R_y_305_update_completed_ <-& (R_y_305_update_start_)
        SUB_f32_f32_306_sample_start_ <-& (R_x_304_update_completed_)
        SUB_f32_f32_306_sample_start_ <-& (R_y_305_update_completed_)
        ;;[SUB_f32_f32_306_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_f32_f32_306_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_f32_f32_306_sample_start_ &-> (SUB_f32_f32_306_Sample)
        SUB_f32_f32_306_sample_completed_ <-& (SUB_f32_f32_306_Sample)
        SUB_f32_f32_306_sample_completed_ &-> ($null)
        SUB_f32_f32_306_update_start_ &-> (SUB_f32_f32_306_Update)
        SUB_f32_f32_306_update_completed_ <-& (SUB_f32_f32_306_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_307__entry__ |-> (assign_stmt_307)
      assign_stmt_307__exit__ <-| (assign_stmt_307)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 122
      //---------------------   merge statement  file prog.linked.opt.aa, line 122  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_309_PhiReqMerge] 
      merge_stmt_309_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_309_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_309_PhiReqMerge |-> (merge_stmt_309_PhiAck)
      merge_stmt_309__exit__  <-| (merge_stmt_309_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 122  --------------------------
      assign_stmt_307__entry__ <-| (branch_block_stmt_302__entry__)
      return__ <-| (assign_stmt_307__exit__)
      merge_stmt_309__exit__ |-> (branch_block_stmt_302__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fpsub32f%body%
    //  file prog.linked.opt.aa, line 122
    // constant-object-declarations for block %fpsub32f%body
    //  file prog.linked.opt.aa, line 118
    // constant-object-declarations for block %fpsub32f
    //  file prog.linked.opt.aa, line 113
    // constant-declarations for block %fpsub32f%body
    //  file prog.linked.opt.aa, line 118
    // constant-declarations for block %fpsub32f%body%
    //  file prog.linked.opt.aa, line 122
    // block %fpsub32f%body
    //  file prog.linked.opt.aa, line 118
    // 		ret_val__ := (x - y)
    //  file prog.linked.opt.aa, line 120
    // ret_val__
    // datapath-instances for block %fpsub32f%body
    //  file prog.linked.opt.aa, line 118
    // 		ret_val__ := (x - y)
    //  file prog.linked.opt.aa, line 120
    // (x - y)
    -[SUB_f32_f32_306_inst] (x y) (ret_val__) 
    $delay SUB_f32_f32_306_inst 24
  }
  // end data-path
  // 		ret_val__ := (x - y)
  //  file prog.linked.opt.aa, line 120
  // (x - y)
  SUB_f32_f32_306_inst <=> (branch_block_stmt_302/assign_stmt_307/SUB_f32_f32_306_Sample/rr branch_block_stmt_302/assign_stmt_307/SUB_f32_f32_306_Update/cr) (branch_block_stmt_302/assign_stmt_307/SUB_f32_f32_306_Sample/ra branch_block_stmt_302/assign_stmt_307/SUB_f32_f32_306_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 122
}
$module [fpsub32fi] 
{
  $in x:$int<32>
  // can point into  foreign( $void )
  y:$int<32>
  // can point into  foreign( $void )
  $out ret_val__:$int<32>
  // can point into  foreign( $void )
  // pipe-declarations for block %fpsub32fi
  //  file prog.linked.opt.aa, line 126
  // pipe-declarations for block %fpsub32fi%body
  //  file prog.linked.opt.aa, line 131
  // pipe-declarations for block %fpsub32fi%body%
  //  file prog.linked.opt.aa, line 135
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_316] // Branch Block  file prog.linked.opt.aa, line 131
    {
      $P [branch_block_stmt_316__entry__]
      branch_block_stmt_316__entry__ <-| ($entry)
      $P [branch_block_stmt_316__exit__]
      branch_block_stmt_316__exit__ |-> ($exit)
      $P [assign_stmt_321__entry__] 
      $P [assign_stmt_321__exit__] 
      $P [return__]
      $P [merge_stmt_323__exit__] 
      ::[assign_stmt_321] 
      {
        // 		ret_val__ := (x - y)
        //  file prog.linked.opt.aa, line 133
        // Source expression
        // (x - y)
        $T[SUB_u32_u32_320_sample_start_] 
        $T[SUB_u32_u32_320_sample_completed_] 
        $T[SUB_u32_u32_320_update_start_] 
        $T[SUB_u32_u32_320_update_completed_] 
        // x
        $T[R_x_318_sample_start_] 
        $T[R_x_318_sample_completed_] 
        $T[R_x_318_update_start_] 
        $T[R_x_318_update_completed_] 
        // reference to interface object
        R_x_318_sample_start_ <-& ($entry)
        R_x_318_sample_completed_ <-& (R_x_318_sample_start_)
        R_x_318_update_start_ <-& (R_x_318_sample_completed_)
        R_x_318_update_completed_ <-& (R_x_318_update_start_)
        // y
        $T[R_y_319_sample_start_] 
        $T[R_y_319_sample_completed_] 
        $T[R_y_319_update_start_] 
        $T[R_y_319_update_completed_] 
        // reference to interface object
        R_y_319_sample_start_ <-& ($entry)
        R_y_319_sample_completed_ <-& (R_y_319_sample_start_)
        R_y_319_update_start_ <-& (R_y_319_sample_completed_)
        R_y_319_update_completed_ <-& (R_y_319_update_start_)
        SUB_u32_u32_320_sample_start_ <-& (R_x_318_update_completed_)
        SUB_u32_u32_320_sample_start_ <-& (R_y_319_update_completed_)
        ;;[SUB_u32_u32_320_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u32_u32_320_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u32_u32_320_sample_start_ &-> (SUB_u32_u32_320_Sample)
        SUB_u32_u32_320_sample_completed_ <-& (SUB_u32_u32_320_Sample)
        SUB_u32_u32_320_sample_completed_ &-> ($null)
        SUB_u32_u32_320_update_start_ &-> (SUB_u32_u32_320_Update)
        SUB_u32_u32_320_update_completed_ <-& (SUB_u32_u32_320_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_321__entry__ |-> (assign_stmt_321)
      assign_stmt_321__exit__ <-| (assign_stmt_321)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 135
      //---------------------   merge statement  file prog.linked.opt.aa, line 135  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_323_PhiReqMerge] 
      merge_stmt_323_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_323_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_323_PhiReqMerge |-> (merge_stmt_323_PhiAck)
      merge_stmt_323__exit__  <-| (merge_stmt_323_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 135  --------------------------
      assign_stmt_321__entry__ <-| (branch_block_stmt_316__entry__)
      return__ <-| (assign_stmt_321__exit__)
      merge_stmt_323__exit__ |-> (branch_block_stmt_316__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fpsub32fi%body%
    //  file prog.linked.opt.aa, line 135
    // constant-object-declarations for block %fpsub32fi%body
    //  file prog.linked.opt.aa, line 131
    // constant-object-declarations for block %fpsub32fi
    //  file prog.linked.opt.aa, line 126
    // constant-declarations for block %fpsub32fi%body
    //  file prog.linked.opt.aa, line 131
    // constant-declarations for block %fpsub32fi%body%
    //  file prog.linked.opt.aa, line 135
    // block %fpsub32fi%body
    //  file prog.linked.opt.aa, line 131
    // 		ret_val__ := (x - y)
    //  file prog.linked.opt.aa, line 133
    // ret_val__
    // datapath-instances for block %fpsub32fi%body
    //  file prog.linked.opt.aa, line 131
    // 		ret_val__ := (x - y)
    //  file prog.linked.opt.aa, line 133
    // (x - y)
    -[SUB_u32_u32_320_inst] (x y) (ret_val__) 
    $delay SUB_u32_u32_320_inst 1
  }
  // end data-path
  // 		ret_val__ := (x - y)
  //  file prog.linked.opt.aa, line 133
  // (x - y)
  SUB_u32_u32_320_inst <=> (branch_block_stmt_316/assign_stmt_321/SUB_u32_u32_320_Sample/rr branch_block_stmt_316/assign_stmt_321/SUB_u32_u32_320_Update/cr) (branch_block_stmt_316/assign_stmt_321/SUB_u32_u32_320_Sample/ra branch_block_stmt_316/assign_stmt_321/SUB_u32_u32_320_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 135
}
$module [getBit64] 
{
  $in reg:$int<64>
  // can point into  foreign( $void )
  pos:$int<8>
  // can point into  foreign( $void )
  $out ret_val__:$int<8>
  // can point into  foreign( $void )
  // pipe-declarations for block %getBit64
  //  file prog.linked.opt.aa, line 139
  // pipe-declarations for block %getBit64%body
  //  file prog.linked.opt.aa, line 144
  // pipe-declarations for block %getBit64%body%
  //  file prog.linked.opt.aa, line 153
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_331] // Branch Block  file prog.linked.opt.aa, line 144
    {
      $P [branch_block_stmt_331__entry__]
      branch_block_stmt_331__entry__ <-| ($entry)
      $P [branch_block_stmt_331__exit__]
      branch_block_stmt_331__exit__ |-> ($exit)
      $P [assign_stmt_335_to_assign_stmt_362__entry__] 
      $P [assign_stmt_335_to_assign_stmt_362__exit__] 
      $P [return__]
      $P [merge_stmt_364__exit__] 
      ::[assign_stmt_335_to_assign_stmt_362] 
      {
        // 		iNsTr_0 := ($cast ($uint<64>) pos )
        //  file prog.linked.opt.aa, line 146
        // Source expression
        // ($cast ($uint<64>) pos )
        $T[type_cast_334_sample_start_] 
        $T[type_cast_334_sample_completed_] 
        $T[type_cast_334_update_start_] 
        $T[type_cast_334_update_completed_] 
        // pos
        $T[R_pos_333_sample_start_] 
        $T[R_pos_333_sample_completed_] 
        $T[R_pos_333_update_start_] 
        $T[R_pos_333_update_completed_] 
        // reference to interface object
        R_pos_333_sample_start_ <-& ($entry)
        R_pos_333_sample_completed_ <-& (R_pos_333_sample_start_)
        R_pos_333_update_start_ <-& (R_pos_333_sample_completed_)
        R_pos_333_update_completed_ <-& (R_pos_333_update_start_)
        type_cast_334_sample_start_ <-& (R_pos_333_update_completed_)
        ;;[type_cast_334_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_334_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_334_sample_start_ &-> (type_cast_334_Sample)
        type_cast_334_sample_completed_ <-& (type_cast_334_Sample)
        type_cast_334_sample_completed_ &-> ($null)
        type_cast_334_update_start_ &-> (type_cast_334_Update)
        type_cast_334_update_completed_ <-& (type_cast_334_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        //  file prog.linked.opt.aa, line 147
        // Source expression
        // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        $T[SUB_u64_u64_340_sample_start_] 
        $T[SUB_u64_u64_340_sample_completed_] 
        $T[SUB_u64_u64_340_update_start_] 
        $T[SUB_u64_u64_340_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_339_sample_start_] 
        $T[R_iNsTr_0_339_sample_completed_] 
        $T[R_iNsTr_0_339_update_start_] 
        $T[R_iNsTr_0_339_update_completed_] 
        // implicit reference
        R_iNsTr_0_339_sample_start_ <-& (type_cast_334_update_completed_)
        R_iNsTr_0_339_sample_completed_ <-& (R_iNsTr_0_339_sample_start_)
        R_iNsTr_0_339_update_start_ <-& (R_iNsTr_0_339_sample_completed_)
        R_iNsTr_0_339_update_completed_ <-& (R_iNsTr_0_339_update_start_)
        SUB_u64_u64_340_sample_start_ <-& (R_iNsTr_0_339_update_completed_)
        ;;[SUB_u64_u64_340_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u64_u64_340_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u64_u64_340_sample_start_ &-> (SUB_u64_u64_340_Sample)
        SUB_u64_u64_340_sample_completed_ <-& (SUB_u64_u64_340_Sample)
        SUB_u64_u64_340_sample_completed_ &-> ($null)
        SUB_u64_u64_340_update_start_ &-> (SUB_u64_u64_340_Update)
        SUB_u64_u64_340_update_completed_ <-& (SUB_u64_u64_340_Update)
        // Target expression
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 148
        // Source expression
        // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        $T[AND_u64_u64_346_sample_start_] 
        $T[AND_u64_u64_346_sample_completed_] 
        $T[AND_u64_u64_346_update_start_] 
        $T[AND_u64_u64_346_update_completed_] 
        // iNsTr_1
        $T[R_iNsTr_1_343_sample_start_] 
        $T[R_iNsTr_1_343_sample_completed_] 
        $T[R_iNsTr_1_343_update_start_] 
        $T[R_iNsTr_1_343_update_completed_] 
        // implicit reference
        R_iNsTr_1_343_sample_start_ <-& (SUB_u64_u64_340_update_completed_)
        R_iNsTr_1_343_sample_completed_ <-& (R_iNsTr_1_343_sample_start_)
        R_iNsTr_1_343_update_start_ <-& (R_iNsTr_1_343_sample_completed_)
        R_iNsTr_1_343_update_completed_ <-& (R_iNsTr_1_343_update_start_)
        AND_u64_u64_346_sample_start_ <-& (R_iNsTr_1_343_update_completed_)
        ;;[AND_u64_u64_346_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_346_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_346_sample_start_ &-> (AND_u64_u64_346_Sample)
        AND_u64_u64_346_sample_completed_ <-& (AND_u64_u64_346_Sample)
        AND_u64_u64_346_sample_completed_ &-> ($null)
        AND_u64_u64_346_update_start_ &-> (AND_u64_u64_346_Update)
        AND_u64_u64_346_update_completed_ <-& (AND_u64_u64_346_Update)
        // Target expression
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		iNsTr_3 := (reg << iNsTr_2)
        //  file prog.linked.opt.aa, line 149
        // Source expression
        // (reg << iNsTr_2)
        $T[SHL_u64_u64_351_sample_start_] 
        $T[SHL_u64_u64_351_sample_completed_] 
        $T[SHL_u64_u64_351_update_start_] 
        $T[SHL_u64_u64_351_update_completed_] 
        // reg
        $T[R_reg_349_sample_start_] 
        $T[R_reg_349_sample_completed_] 
        $T[R_reg_349_update_start_] 
        $T[R_reg_349_update_completed_] 
        // reference to interface object
        R_reg_349_sample_start_ <-& ($entry)
        R_reg_349_sample_completed_ <-& (R_reg_349_sample_start_)
        R_reg_349_update_start_ <-& (R_reg_349_sample_completed_)
        R_reg_349_update_completed_ <-& (R_reg_349_update_start_)
        // iNsTr_2
        $T[R_iNsTr_2_350_sample_start_] 
        $T[R_iNsTr_2_350_sample_completed_] 
        $T[R_iNsTr_2_350_update_start_] 
        $T[R_iNsTr_2_350_update_completed_] 
        // implicit reference
        R_iNsTr_2_350_sample_start_ <-& (AND_u64_u64_346_update_completed_)
        R_iNsTr_2_350_sample_completed_ <-& (R_iNsTr_2_350_sample_start_)
        R_iNsTr_2_350_update_start_ <-& (R_iNsTr_2_350_sample_completed_)
        R_iNsTr_2_350_update_completed_ <-& (R_iNsTr_2_350_update_start_)
        SHL_u64_u64_351_sample_start_ <-& (R_reg_349_update_completed_)
        SHL_u64_u64_351_sample_start_ <-& (R_iNsTr_2_350_update_completed_)
        ;;[SHL_u64_u64_351_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_351_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_351_sample_start_ &-> (SHL_u64_u64_351_Sample)
        SHL_u64_u64_351_sample_completed_ <-& (SHL_u64_u64_351_Sample)
        SHL_u64_u64_351_sample_completed_ &-> ($null)
        SHL_u64_u64_351_update_start_ &-> (SHL_u64_u64_351_Update)
        SHL_u64_u64_351_update_completed_ <-& (SHL_u64_u64_351_Update)
        // Target expression
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
        //  file prog.linked.opt.aa, line 150
        // Source expression
        // (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
        $T[LSHR_u64_u64_357_sample_start_] 
        $T[LSHR_u64_u64_357_sample_completed_] 
        $T[LSHR_u64_u64_357_update_start_] 
        $T[LSHR_u64_u64_357_update_completed_] 
        // iNsTr_3
        $T[R_iNsTr_3_354_sample_start_] 
        $T[R_iNsTr_3_354_sample_completed_] 
        $T[R_iNsTr_3_354_update_start_] 
        $T[R_iNsTr_3_354_update_completed_] 
        // implicit reference
        R_iNsTr_3_354_sample_start_ <-& (SHL_u64_u64_351_update_completed_)
        R_iNsTr_3_354_sample_completed_ <-& (R_iNsTr_3_354_sample_start_)
        R_iNsTr_3_354_update_start_ <-& (R_iNsTr_3_354_sample_completed_)
        R_iNsTr_3_354_update_completed_ <-& (R_iNsTr_3_354_update_start_)
        LSHR_u64_u64_357_sample_start_ <-& (R_iNsTr_3_354_update_completed_)
        ;;[LSHR_u64_u64_357_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[LSHR_u64_u64_357_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        LSHR_u64_u64_357_sample_start_ &-> (LSHR_u64_u64_357_Sample)
        LSHR_u64_u64_357_sample_completed_ <-& (LSHR_u64_u64_357_Sample)
        LSHR_u64_u64_357_sample_completed_ &-> ($null)
        LSHR_u64_u64_357_update_start_ &-> (LSHR_u64_u64_357_Update)
        LSHR_u64_u64_357_update_completed_ <-& (LSHR_u64_u64_357_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		ret_val__ := ($cast ($uint<8>) iNsTr_4 )
        //  file prog.linked.opt.aa, line 151
        // Source expression
        // ($cast ($uint<8>) iNsTr_4 )
        $T[type_cast_361_sample_start_] 
        $T[type_cast_361_sample_completed_] 
        $T[type_cast_361_update_start_] 
        $T[type_cast_361_update_completed_] 
        // iNsTr_4
        $T[R_iNsTr_4_360_sample_start_] 
        $T[R_iNsTr_4_360_sample_completed_] 
        $T[R_iNsTr_4_360_update_start_] 
        $T[R_iNsTr_4_360_update_completed_] 
        // implicit reference
        R_iNsTr_4_360_sample_start_ <-& (LSHR_u64_u64_357_update_completed_)
        R_iNsTr_4_360_sample_completed_ <-& (R_iNsTr_4_360_sample_start_)
        R_iNsTr_4_360_update_start_ <-& (R_iNsTr_4_360_sample_completed_)
        R_iNsTr_4_360_update_completed_ <-& (R_iNsTr_4_360_update_start_)
        type_cast_361_sample_start_ <-& (R_iNsTr_4_360_update_completed_)
        ;;[type_cast_361_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_361_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_361_sample_start_ &-> (type_cast_361_Sample)
        type_cast_361_sample_completed_ <-& (type_cast_361_Sample)
        type_cast_361_sample_completed_ &-> ($null)
        type_cast_361_update_start_ &-> (type_cast_361_Update)
        type_cast_361_update_completed_ <-& (type_cast_361_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_335_to_assign_stmt_362__entry__ |-> (assign_stmt_335_to_assign_stmt_362)
      assign_stmt_335_to_assign_stmt_362__exit__ <-| (assign_stmt_335_to_assign_stmt_362)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 153
      //---------------------   merge statement  file prog.linked.opt.aa, line 153  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_364_PhiReqMerge] 
      merge_stmt_364_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_364_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_364_PhiReqMerge |-> (merge_stmt_364_PhiAck)
      merge_stmt_364__exit__  <-| (merge_stmt_364_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 153  --------------------------
      assign_stmt_335_to_assign_stmt_362__entry__ <-| (branch_block_stmt_331__entry__)
      return__ <-| (assign_stmt_335_to_assign_stmt_362__exit__)
      merge_stmt_364__exit__ |-> (branch_block_stmt_331__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getBit64%body%
    //  file prog.linked.opt.aa, line 153
    // constant-object-declarations for block %getBit64%body
    //  file prog.linked.opt.aa, line 144
    // constant-object-declarations for block %getBit64
    //  file prog.linked.opt.aa, line 139
    // constant-declarations for block %getBit64%body
    //  file prog.linked.opt.aa, line 144
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  )
    $constant $W[type_cast_338_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111111// 63
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  )
    $constant $W[type_cast_345_wire_constant] : $int<64> := _b0000000000000000000000000000000011111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  )
    $constant $W[type_cast_356_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111111// 63
    // constant-declarations for block %getBit64%body%
    //  file prog.linked.opt.aa, line 153
    // block %getBit64%body
    //  file prog.linked.opt.aa, line 144
    // 		iNsTr_0 := ($cast ($uint<64>) pos )
    //  file prog.linked.opt.aa, line 146
    // iNsTr_0
    $W[iNsTr_0_335] : $int<64>
    // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 147
    // iNsTr_1
    $W[iNsTr_1_341] : $int<64>
    // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 148
    // iNsTr_2
    $W[iNsTr_2_347] : $int<64>
    // 		iNsTr_3 := (reg << iNsTr_2)
    //  file prog.linked.opt.aa, line 149
    // iNsTr_3
    $W[iNsTr_3_352] : $int<64>
    // 		iNsTr_4 := (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
    //  file prog.linked.opt.aa, line 150
    // iNsTr_4
    $W[iNsTr_4_358] : $int<64>
    // 		ret_val__ := ($cast ($uint<8>) iNsTr_4 )
    //  file prog.linked.opt.aa, line 151
    // ret_val__
    // datapath-instances for block %getBit64%body
    //  file prog.linked.opt.aa, line 144
    // 		iNsTr_0 := ($cast ($uint<64>) pos )
    //  file prog.linked.opt.aa, line 146
    // ($cast ($uint<64>) pos )
    # := [type_cast_334_inst] (pos) (iNsTr_0_335) 
    $delay type_cast_334_inst 1
    // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 147
    // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    -[SUB_u64_u64_340_inst] (type_cast_338_wire_constant iNsTr_0_335) (iNsTr_1_341) 
    $delay SUB_u64_u64_340_inst 1
    // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 148
    // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    &[AND_u64_u64_346_inst] (iNsTr_1_341 type_cast_345_wire_constant) (iNsTr_2_347) 
    $delay AND_u64_u64_346_inst 1
    // 		iNsTr_3 := (reg << iNsTr_2)
    //  file prog.linked.opt.aa, line 149
    // (reg << iNsTr_2)
    <<[SHL_u64_u64_351_inst] (reg iNsTr_2_347) (iNsTr_3_352) 
    $delay SHL_u64_u64_351_inst 1
    // 		iNsTr_4 := (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
    //  file prog.linked.opt.aa, line 150
    // (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
    >>[LSHR_u64_u64_357_inst] (iNsTr_3_352 type_cast_356_wire_constant) (iNsTr_4_358) 
    $delay LSHR_u64_u64_357_inst 1
    // 		ret_val__ := ($cast ($uint<8>) iNsTr_4 )
    //  file prog.linked.opt.aa, line 151
    // ($cast ($uint<8>) iNsTr_4 )
    # := [type_cast_361_inst] (iNsTr_4_358) (ret_val__) 
    $delay type_cast_361_inst 1
  }
  // end data-path
  // 		iNsTr_0 := ($cast ($uint<64>) pos )
  //  file prog.linked.opt.aa, line 146
  // ($cast ($uint<64>) pos )
  type_cast_334_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_334_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_334_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_334_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_334_Update/ca)
  // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  //  file prog.linked.opt.aa, line 147
  // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  SUB_u64_u64_340_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SUB_u64_u64_340_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SUB_u64_u64_340_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SUB_u64_u64_340_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SUB_u64_u64_340_Update/ca)
  // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 148
  // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  AND_u64_u64_346_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/AND_u64_u64_346_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/AND_u64_u64_346_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/AND_u64_u64_346_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/AND_u64_u64_346_Update/ca)
  // 		iNsTr_3 := (reg << iNsTr_2)
  //  file prog.linked.opt.aa, line 149
  // (reg << iNsTr_2)
  SHL_u64_u64_351_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SHL_u64_u64_351_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SHL_u64_u64_351_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SHL_u64_u64_351_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/SHL_u64_u64_351_Update/ca)
  // 		iNsTr_4 := (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
  //  file prog.linked.opt.aa, line 150
  // (iNsTr_3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ))
  LSHR_u64_u64_357_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/LSHR_u64_u64_357_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/LSHR_u64_u64_357_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/LSHR_u64_u64_357_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/LSHR_u64_u64_357_Update/ca)
  // 		ret_val__ := ($cast ($uint<8>) iNsTr_4 )
  //  file prog.linked.opt.aa, line 151
  // ($cast ($uint<8>) iNsTr_4 )
  type_cast_361_inst <=> (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_361_Sample/rr branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_361_Update/cr) (branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_361_Sample/ra branch_block_stmt_331/assign_stmt_335_to_assign_stmt_362/type_cast_361_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 153
}
$module [getSlice64] 
{
  $in reg:$int<64>
  // can point into  foreign( $void )
  h:$int<8>
  // can point into  foreign( $void )
  l:$int<8>
  // can point into  foreign( $void )
  $out ret_val__:$int<64>
  // can point into  foreign( $void )
  // pipe-declarations for block %getSlice64
  //  file prog.linked.opt.aa, line 157
  // pipe-declarations for block %getSlice64%body
  //  file prog.linked.opt.aa, line 162
  // pipe-declarations for block %getSlice64%body%
  //  file prog.linked.opt.aa, line 173
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_372] // Branch Block  file prog.linked.opt.aa, line 162
    {
      $P [branch_block_stmt_372__entry__]
      branch_block_stmt_372__entry__ <-| ($entry)
      $P [branch_block_stmt_372__exit__]
      branch_block_stmt_372__exit__ |-> ($exit)
      $P [assign_stmt_376_to_assign_stmt_413__entry__] 
      $P [assign_stmt_376_to_assign_stmt_413__exit__] 
      $P [return__]
      $P [merge_stmt_415__exit__] 
      ::[assign_stmt_376_to_assign_stmt_413] 
      {
        // 		iNsTr_0 := ($cast ($uint<64>) h )
        //  file prog.linked.opt.aa, line 164
        // Source expression
        // ($cast ($uint<64>) h )
        $T[type_cast_375_sample_start_] 
        $T[type_cast_375_sample_completed_] 
        $T[type_cast_375_update_start_] 
        $T[type_cast_375_update_completed_] 
        // h
        $T[R_h_374_sample_start_] 
        $T[R_h_374_sample_completed_] 
        $T[R_h_374_update_start_] 
        $T[R_h_374_update_completed_] 
        // reference to interface object
        R_h_374_sample_start_ <-& ($entry)
        R_h_374_sample_completed_ <-& (R_h_374_sample_start_)
        R_h_374_update_start_ <-& (R_h_374_sample_completed_)
        R_h_374_update_completed_ <-& (R_h_374_update_start_)
        type_cast_375_sample_start_ <-& (R_h_374_update_completed_)
        ;;[type_cast_375_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_375_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_375_sample_start_ &-> (type_cast_375_Sample)
        type_cast_375_sample_completed_ <-& (type_cast_375_Sample)
        type_cast_375_sample_completed_ &-> ($null)
        type_cast_375_update_start_ &-> (type_cast_375_Update)
        type_cast_375_update_completed_ <-& (type_cast_375_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        //  file prog.linked.opt.aa, line 165
        // Source expression
        // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        $T[SUB_u64_u64_381_sample_start_] 
        $T[SUB_u64_u64_381_sample_completed_] 
        $T[SUB_u64_u64_381_update_start_] 
        $T[SUB_u64_u64_381_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_380_sample_start_] 
        $T[R_iNsTr_0_380_sample_completed_] 
        $T[R_iNsTr_0_380_update_start_] 
        $T[R_iNsTr_0_380_update_completed_] 
        // implicit reference
        R_iNsTr_0_380_sample_start_ <-& (type_cast_375_update_completed_)
        R_iNsTr_0_380_sample_completed_ <-& (R_iNsTr_0_380_sample_start_)
        R_iNsTr_0_380_update_start_ <-& (R_iNsTr_0_380_sample_completed_)
        R_iNsTr_0_380_update_completed_ <-& (R_iNsTr_0_380_update_start_)
        SUB_u64_u64_381_sample_start_ <-& (R_iNsTr_0_380_update_completed_)
        ;;[SUB_u64_u64_381_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u64_u64_381_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u64_u64_381_sample_start_ &-> (SUB_u64_u64_381_Sample)
        SUB_u64_u64_381_sample_completed_ <-& (SUB_u64_u64_381_Sample)
        SUB_u64_u64_381_sample_completed_ &-> ($null)
        SUB_u64_u64_381_update_start_ &-> (SUB_u64_u64_381_Update)
        SUB_u64_u64_381_update_completed_ <-& (SUB_u64_u64_381_Update)
        // Target expression
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 166
        // Source expression
        // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        $T[AND_u64_u64_387_sample_start_] 
        $T[AND_u64_u64_387_sample_completed_] 
        $T[AND_u64_u64_387_update_start_] 
        $T[AND_u64_u64_387_update_completed_] 
        // iNsTr_1
        $T[R_iNsTr_1_384_sample_start_] 
        $T[R_iNsTr_1_384_sample_completed_] 
        $T[R_iNsTr_1_384_update_start_] 
        $T[R_iNsTr_1_384_update_completed_] 
        // implicit reference
        R_iNsTr_1_384_sample_start_ <-& (SUB_u64_u64_381_update_completed_)
        R_iNsTr_1_384_sample_completed_ <-& (R_iNsTr_1_384_sample_start_)
        R_iNsTr_1_384_update_start_ <-& (R_iNsTr_1_384_sample_completed_)
        R_iNsTr_1_384_update_completed_ <-& (R_iNsTr_1_384_update_start_)
        AND_u64_u64_387_sample_start_ <-& (R_iNsTr_1_384_update_completed_)
        ;;[AND_u64_u64_387_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_387_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_387_sample_start_ &-> (AND_u64_u64_387_Sample)
        AND_u64_u64_387_sample_completed_ <-& (AND_u64_u64_387_Sample)
        AND_u64_u64_387_sample_completed_ &-> ($null)
        AND_u64_u64_387_update_start_ &-> (AND_u64_u64_387_Update)
        AND_u64_u64_387_update_completed_ <-& (AND_u64_u64_387_Update)
        // Target expression
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		iNsTr_3 := (reg << iNsTr_2)
        //  file prog.linked.opt.aa, line 167
        // Source expression
        // (reg << iNsTr_2)
        $T[SHL_u64_u64_392_sample_start_] 
        $T[SHL_u64_u64_392_sample_completed_] 
        $T[SHL_u64_u64_392_update_start_] 
        $T[SHL_u64_u64_392_update_completed_] 
        // reg
        $T[R_reg_390_sample_start_] 
        $T[R_reg_390_sample_completed_] 
        $T[R_reg_390_update_start_] 
        $T[R_reg_390_update_completed_] 
        // reference to interface object
        R_reg_390_sample_start_ <-& ($entry)
        R_reg_390_sample_completed_ <-& (R_reg_390_sample_start_)
        R_reg_390_update_start_ <-& (R_reg_390_sample_completed_)
        R_reg_390_update_completed_ <-& (R_reg_390_update_start_)
        // iNsTr_2
        $T[R_iNsTr_2_391_sample_start_] 
        $T[R_iNsTr_2_391_sample_completed_] 
        $T[R_iNsTr_2_391_update_start_] 
        $T[R_iNsTr_2_391_update_completed_] 
        // implicit reference
        R_iNsTr_2_391_sample_start_ <-& (AND_u64_u64_387_update_completed_)
        R_iNsTr_2_391_sample_completed_ <-& (R_iNsTr_2_391_sample_start_)
        R_iNsTr_2_391_update_start_ <-& (R_iNsTr_2_391_sample_completed_)
        R_iNsTr_2_391_update_completed_ <-& (R_iNsTr_2_391_update_start_)
        SHL_u64_u64_392_sample_start_ <-& (R_reg_390_update_completed_)
        SHL_u64_u64_392_sample_start_ <-& (R_iNsTr_2_391_update_completed_)
        ;;[SHL_u64_u64_392_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_392_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_392_sample_start_ &-> (SHL_u64_u64_392_Sample)
        SHL_u64_u64_392_sample_completed_ <-& (SHL_u64_u64_392_Sample)
        SHL_u64_u64_392_sample_completed_ &-> ($null)
        SHL_u64_u64_392_update_start_ &-> (SHL_u64_u64_392_Update)
        SHL_u64_u64_392_update_completed_ <-& (SHL_u64_u64_392_Update)
        // Target expression
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := ($cast ($uint<64>) l )
        //  file prog.linked.opt.aa, line 168
        // Source expression
        // ($cast ($uint<64>) l )
        $T[type_cast_396_sample_start_] 
        $T[type_cast_396_sample_completed_] 
        $T[type_cast_396_update_start_] 
        $T[type_cast_396_update_completed_] 
        // l
        $T[R_l_395_sample_start_] 
        $T[R_l_395_sample_completed_] 
        $T[R_l_395_update_start_] 
        $T[R_l_395_update_completed_] 
        // reference to interface object
        R_l_395_sample_start_ <-& ($entry)
        R_l_395_sample_completed_ <-& (R_l_395_sample_start_)
        R_l_395_update_start_ <-& (R_l_395_sample_completed_)
        R_l_395_update_completed_ <-& (R_l_395_update_start_)
        type_cast_396_sample_start_ <-& (R_l_395_update_completed_)
        ;;[type_cast_396_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_396_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_396_sample_start_ &-> (type_cast_396_Sample)
        type_cast_396_sample_completed_ <-& (type_cast_396_Sample)
        type_cast_396_sample_completed_ &-> ($null)
        type_cast_396_update_start_ &-> (type_cast_396_Update)
        type_cast_396_update_completed_ <-& (type_cast_396_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		iNsTr_5 := (iNsTr_1 + iNsTr_4)
        //  file prog.linked.opt.aa, line 169
        // Source expression
        // (iNsTr_1 + iNsTr_4)
        $T[ADD_u64_u64_401_sample_start_] 
        $T[ADD_u64_u64_401_sample_completed_] 
        $T[ADD_u64_u64_401_update_start_] 
        $T[ADD_u64_u64_401_update_completed_] 
        // iNsTr_1
        $T[R_iNsTr_1_399_sample_start_] 
        $T[R_iNsTr_1_399_sample_completed_] 
        $T[R_iNsTr_1_399_update_start_] 
        $T[R_iNsTr_1_399_update_completed_] 
        // implicit reference
        R_iNsTr_1_399_sample_start_ <-& (SUB_u64_u64_381_update_completed_)
        R_iNsTr_1_399_sample_completed_ <-& (R_iNsTr_1_399_sample_start_)
        R_iNsTr_1_399_update_start_ <-& (R_iNsTr_1_399_sample_completed_)
        R_iNsTr_1_399_update_completed_ <-& (R_iNsTr_1_399_update_start_)
        // iNsTr_4
        $T[R_iNsTr_4_400_sample_start_] 
        $T[R_iNsTr_4_400_sample_completed_] 
        $T[R_iNsTr_4_400_update_start_] 
        $T[R_iNsTr_4_400_update_completed_] 
        // implicit reference
        R_iNsTr_4_400_sample_start_ <-& (type_cast_396_update_completed_)
        R_iNsTr_4_400_sample_completed_ <-& (R_iNsTr_4_400_sample_start_)
        R_iNsTr_4_400_update_start_ <-& (R_iNsTr_4_400_sample_completed_)
        R_iNsTr_4_400_update_completed_ <-& (R_iNsTr_4_400_update_start_)
        ADD_u64_u64_401_sample_start_ <-& (R_iNsTr_1_399_update_completed_)
        ADD_u64_u64_401_sample_start_ <-& (R_iNsTr_4_400_update_completed_)
        ;;[ADD_u64_u64_401_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u64_u64_401_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u64_u64_401_sample_start_ &-> (ADD_u64_u64_401_Sample)
        ADD_u64_u64_401_sample_completed_ <-& (ADD_u64_u64_401_Sample)
        ADD_u64_u64_401_sample_completed_ &-> ($null)
        ADD_u64_u64_401_update_start_ &-> (ADD_u64_u64_401_Update)
        ADD_u64_u64_401_update_completed_ <-& (ADD_u64_u64_401_Update)
        // Target expression
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		iNsTr_6 := (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 170
        // Source expression
        // (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        $T[AND_u64_u64_407_sample_start_] 
        $T[AND_u64_u64_407_sample_completed_] 
        $T[AND_u64_u64_407_update_start_] 
        $T[AND_u64_u64_407_update_completed_] 
        // iNsTr_5
        $T[R_iNsTr_5_404_sample_start_] 
        $T[R_iNsTr_5_404_sample_completed_] 
        $T[R_iNsTr_5_404_update_start_] 
        $T[R_iNsTr_5_404_update_completed_] 
        // implicit reference
        R_iNsTr_5_404_sample_start_ <-& (ADD_u64_u64_401_update_completed_)
        R_iNsTr_5_404_sample_completed_ <-& (R_iNsTr_5_404_sample_start_)
        R_iNsTr_5_404_update_start_ <-& (R_iNsTr_5_404_sample_completed_)
        R_iNsTr_5_404_update_completed_ <-& (R_iNsTr_5_404_update_start_)
        AND_u64_u64_407_sample_start_ <-& (R_iNsTr_5_404_update_completed_)
        ;;[AND_u64_u64_407_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_407_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_407_sample_start_ &-> (AND_u64_u64_407_Sample)
        AND_u64_u64_407_sample_completed_ <-& (AND_u64_u64_407_Sample)
        AND_u64_u64_407_sample_completed_ &-> ($null)
        AND_u64_u64_407_update_start_ &-> (AND_u64_u64_407_Update)
        AND_u64_u64_407_update_completed_ <-& (AND_u64_u64_407_Update)
        // Target expression
        // (as target) iNsTr_6
        // iNsTr_6
        // implicit reference
        // 		ret_val__ := (iNsTr_3 >> iNsTr_6)
        //  file prog.linked.opt.aa, line 171
        // Source expression
        // (iNsTr_3 >> iNsTr_6)
        $T[LSHR_u64_u64_412_sample_start_] 
        $T[LSHR_u64_u64_412_sample_completed_] 
        $T[LSHR_u64_u64_412_update_start_] 
        $T[LSHR_u64_u64_412_update_completed_] 
        // iNsTr_3
        $T[R_iNsTr_3_410_sample_start_] 
        $T[R_iNsTr_3_410_sample_completed_] 
        $T[R_iNsTr_3_410_update_start_] 
        $T[R_iNsTr_3_410_update_completed_] 
        // implicit reference
        R_iNsTr_3_410_sample_start_ <-& (SHL_u64_u64_392_update_completed_)
        R_iNsTr_3_410_sample_completed_ <-& (R_iNsTr_3_410_sample_start_)
        R_iNsTr_3_410_update_start_ <-& (R_iNsTr_3_410_sample_completed_)
        R_iNsTr_3_410_update_completed_ <-& (R_iNsTr_3_410_update_start_)
        // iNsTr_6
        $T[R_iNsTr_6_411_sample_start_] 
        $T[R_iNsTr_6_411_sample_completed_] 
        $T[R_iNsTr_6_411_update_start_] 
        $T[R_iNsTr_6_411_update_completed_] 
        // implicit reference
        R_iNsTr_6_411_sample_start_ <-& (AND_u64_u64_407_update_completed_)
        R_iNsTr_6_411_sample_completed_ <-& (R_iNsTr_6_411_sample_start_)
        R_iNsTr_6_411_update_start_ <-& (R_iNsTr_6_411_sample_completed_)
        R_iNsTr_6_411_update_completed_ <-& (R_iNsTr_6_411_update_start_)
        LSHR_u64_u64_412_sample_start_ <-& (R_iNsTr_3_410_update_completed_)
        LSHR_u64_u64_412_sample_start_ <-& (R_iNsTr_6_411_update_completed_)
        ;;[LSHR_u64_u64_412_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[LSHR_u64_u64_412_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        LSHR_u64_u64_412_sample_start_ &-> (LSHR_u64_u64_412_Sample)
        LSHR_u64_u64_412_sample_completed_ <-& (LSHR_u64_u64_412_Sample)
        LSHR_u64_u64_412_sample_completed_ &-> ($null)
        LSHR_u64_u64_412_update_start_ &-> (LSHR_u64_u64_412_Update)
        LSHR_u64_u64_412_update_completed_ <-& (LSHR_u64_u64_412_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_376_to_assign_stmt_413__entry__ |-> (assign_stmt_376_to_assign_stmt_413)
      assign_stmt_376_to_assign_stmt_413__exit__ <-| (assign_stmt_376_to_assign_stmt_413)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 173
      //---------------------   merge statement  file prog.linked.opt.aa, line 173  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_415_PhiReqMerge] 
      merge_stmt_415_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_415_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_415_PhiReqMerge |-> (merge_stmt_415_PhiAck)
      merge_stmt_415__exit__  <-| (merge_stmt_415_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 173  --------------------------
      assign_stmt_376_to_assign_stmt_413__entry__ <-| (branch_block_stmt_372__entry__)
      return__ <-| (assign_stmt_376_to_assign_stmt_413__exit__)
      merge_stmt_415__exit__ |-> (branch_block_stmt_372__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getSlice64%body%
    //  file prog.linked.opt.aa, line 173
    // constant-object-declarations for block %getSlice64%body
    //  file prog.linked.opt.aa, line 162
    // constant-object-declarations for block %getSlice64
    //  file prog.linked.opt.aa, line 157
    // constant-declarations for block %getSlice64%body
    //  file prog.linked.opt.aa, line 162
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  )
    $constant $W[type_cast_379_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111111// 63
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  )
    $constant $W[type_cast_386_wire_constant] : $int<64> := _b0000000000000000000000000000000011111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  )
    $constant $W[type_cast_406_wire_constant] : $int<64> := _b0000000000000000000000000000000011111111111111111111111111111111// -1
    // constant-declarations for block %getSlice64%body%
    //  file prog.linked.opt.aa, line 173
    // block %getSlice64%body
    //  file prog.linked.opt.aa, line 162
    // 		iNsTr_0 := ($cast ($uint<64>) h )
    //  file prog.linked.opt.aa, line 164
    // iNsTr_0
    $W[iNsTr_0_376] : $int<64>
    // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 165
    // iNsTr_1
    $W[iNsTr_1_382] : $int<64>
    // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 166
    // iNsTr_2
    $W[iNsTr_2_388] : $int<64>
    // 		iNsTr_3 := (reg << iNsTr_2)
    //  file prog.linked.opt.aa, line 167
    // iNsTr_3
    $W[iNsTr_3_393] : $int<64>
    // 		iNsTr_4 := ($cast ($uint<64>) l )
    //  file prog.linked.opt.aa, line 168
    // iNsTr_4
    $W[iNsTr_4_397] : $int<64>
    // 		iNsTr_5 := (iNsTr_1 + iNsTr_4)
    //  file prog.linked.opt.aa, line 169
    // iNsTr_5
    $W[iNsTr_5_402] : $int<64>
    // 		iNsTr_6 := (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 170
    // iNsTr_6
    $W[iNsTr_6_408] : $int<64>
    // 		ret_val__ := (iNsTr_3 >> iNsTr_6)
    //  file prog.linked.opt.aa, line 171
    // ret_val__
    // datapath-instances for block %getSlice64%body
    //  file prog.linked.opt.aa, line 162
    // 		iNsTr_0 := ($cast ($uint<64>) h )
    //  file prog.linked.opt.aa, line 164
    // ($cast ($uint<64>) h )
    # := [type_cast_375_inst] (h) (iNsTr_0_376) 
    $delay type_cast_375_inst 1
    // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 165
    // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    -[SUB_u64_u64_381_inst] (type_cast_379_wire_constant iNsTr_0_376) (iNsTr_1_382) 
    $delay SUB_u64_u64_381_inst 1
    // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 166
    // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    &[AND_u64_u64_387_inst] (iNsTr_1_382 type_cast_386_wire_constant) (iNsTr_2_388) 
    $delay AND_u64_u64_387_inst 1
    // 		iNsTr_3 := (reg << iNsTr_2)
    //  file prog.linked.opt.aa, line 167
    // (reg << iNsTr_2)
    <<[SHL_u64_u64_392_inst] (reg iNsTr_2_388) (iNsTr_3_393) 
    $delay SHL_u64_u64_392_inst 1
    // 		iNsTr_4 := ($cast ($uint<64>) l )
    //  file prog.linked.opt.aa, line 168
    // ($cast ($uint<64>) l )
    # := [type_cast_396_inst] (l) (iNsTr_4_397) 
    $delay type_cast_396_inst 1
    // 		iNsTr_5 := (iNsTr_1 + iNsTr_4)
    //  file prog.linked.opt.aa, line 169
    // (iNsTr_1 + iNsTr_4)
    +[ADD_u64_u64_401_inst] (iNsTr_1_382 iNsTr_4_397) (iNsTr_5_402) 
    $delay ADD_u64_u64_401_inst 1
    // 		iNsTr_6 := (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 170
    // (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    &[AND_u64_u64_407_inst] (iNsTr_5_402 type_cast_406_wire_constant) (iNsTr_6_408) 
    $delay AND_u64_u64_407_inst 1
    // 		ret_val__ := (iNsTr_3 >> iNsTr_6)
    //  file prog.linked.opt.aa, line 171
    // (iNsTr_3 >> iNsTr_6)
    >>[LSHR_u64_u64_412_inst] (iNsTr_3_393 iNsTr_6_408) (ret_val__) 
    $delay LSHR_u64_u64_412_inst 1
  }
  // end data-path
  // 		iNsTr_0 := ($cast ($uint<64>) h )
  //  file prog.linked.opt.aa, line 164
  // ($cast ($uint<64>) h )
  type_cast_375_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_375_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_375_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_375_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_375_Update/ca)
  // 		iNsTr_1 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  //  file prog.linked.opt.aa, line 165
  // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  SUB_u64_u64_381_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SUB_u64_u64_381_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SUB_u64_u64_381_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SUB_u64_u64_381_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SUB_u64_u64_381_Update/ca)
  // 		iNsTr_2 := (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 166
  // (iNsTr_1 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  AND_u64_u64_387_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_387_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_387_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_387_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_387_Update/ca)
  // 		iNsTr_3 := (reg << iNsTr_2)
  //  file prog.linked.opt.aa, line 167
  // (reg << iNsTr_2)
  SHL_u64_u64_392_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SHL_u64_u64_392_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SHL_u64_u64_392_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SHL_u64_u64_392_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/SHL_u64_u64_392_Update/ca)
  // 		iNsTr_4 := ($cast ($uint<64>) l )
  //  file prog.linked.opt.aa, line 168
  // ($cast ($uint<64>) l )
  type_cast_396_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_396_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_396_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_396_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/type_cast_396_Update/ca)
  // 		iNsTr_5 := (iNsTr_1 + iNsTr_4)
  //  file prog.linked.opt.aa, line 169
  // (iNsTr_1 + iNsTr_4)
  ADD_u64_u64_401_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/ADD_u64_u64_401_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/ADD_u64_u64_401_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/ADD_u64_u64_401_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/ADD_u64_u64_401_Update/ca)
  // 		iNsTr_6 := (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 170
  // (iNsTr_5 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  AND_u64_u64_407_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_407_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_407_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_407_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/AND_u64_u64_407_Update/ca)
  // 		ret_val__ := (iNsTr_3 >> iNsTr_6)
  //  file prog.linked.opt.aa, line 171
  // (iNsTr_3 >> iNsTr_6)
  LSHR_u64_u64_412_inst <=> (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/LSHR_u64_u64_412_Sample/rr branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/LSHR_u64_u64_412_Update/cr) (branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/LSHR_u64_u64_412_Sample/ra branch_block_stmt_372/assign_stmt_376_to_assign_stmt_413/LSHR_u64_u64_412_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 173
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 177
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 177
  }
  // end data-path
}
$module [iq_err_calc] 
{
  $in Lr:$float<8,23>
  // can point into  foreign( $void )
  torque_ref:$float<8,23>
  // can point into  foreign( $void )
  constant_1:$float<8,23>
  // can point into  foreign( $void )
  flux_rotor:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %iq_err_calc
  //  file prog.linked.opt.aa, line 184
  // pipe-declarations for block %iq_err_calc%body
  //  file prog.linked.opt.aa, line 189
  // pipe-declarations for block %iq_err_calc%body%
  //  file prog.linked.opt.aa, line 201
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_427] // Branch Block  file prog.linked.opt.aa, line 189
    {
      $P [branch_block_stmt_427__entry__]
      branch_block_stmt_427__entry__ <-| ($entry)
      $P [branch_block_stmt_427__exit__]
      branch_block_stmt_427__exit__ |-> ($exit)
      $P [assign_stmt_433_to_assign_stmt_471__entry__] 
      $P [assign_stmt_433_to_assign_stmt_471__exit__] 
      $P [return__]
      $P [merge_stmt_473__exit__] 
      ::[assign_stmt_433_to_assign_stmt_471] 
      {
        // 		iNsTr_0 := (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
        //  file prog.linked.opt.aa, line 191
        // Source expression
        // (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
        $T[SLT_f32_u1_432_sample_start_] 
        $T[SLT_f32_u1_432_sample_completed_] 
        $T[SLT_f32_u1_432_update_start_] 
        $T[SLT_f32_u1_432_update_completed_] 
        // flux_rotor
        $T[R_flux_rotor_429_sample_start_] 
        $T[R_flux_rotor_429_sample_completed_] 
        $T[R_flux_rotor_429_update_start_] 
        $T[R_flux_rotor_429_update_completed_] 
        // reference to interface object
        R_flux_rotor_429_sample_start_ <-& ($entry)
        R_flux_rotor_429_sample_completed_ <-& (R_flux_rotor_429_sample_start_)
        R_flux_rotor_429_update_start_ <-& (R_flux_rotor_429_sample_completed_)
        R_flux_rotor_429_update_completed_ <-& (R_flux_rotor_429_update_start_)
        SLT_f32_u1_432_sample_start_ <-& (R_flux_rotor_429_update_completed_)
        ;;[SLT_f32_u1_432_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SLT_f32_u1_432_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SLT_f32_u1_432_sample_start_ &-> (SLT_f32_u1_432_Sample)
        SLT_f32_u1_432_sample_completed_ <-& (SLT_f32_u1_432_Sample)
        SLT_f32_u1_432_sample_completed_ &-> ($null)
        SLT_f32_u1_432_update_start_ &-> (SLT_f32_u1_432_Update)
        SLT_f32_u1_432_update_completed_ <-& (SLT_f32_u1_432_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		xx_x0 := ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
        //  file prog.linked.opt.aa, line 192
        // Source expression
        // ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
        $T[MUX_439_sample_start_] 
        $T[MUX_439_sample_completed_] 
        $T[MUX_439_update_start_] 
        $T[MUX_439_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_435_sample_start_] 
        $T[R_iNsTr_0_435_sample_completed_] 
        $T[R_iNsTr_0_435_update_start_] 
        $T[R_iNsTr_0_435_update_completed_] 
        // implicit reference
        R_iNsTr_0_435_sample_start_ <-& (SLT_f32_u1_432_update_completed_)
        R_iNsTr_0_435_sample_completed_ <-& (R_iNsTr_0_435_sample_start_)
        R_iNsTr_0_435_update_start_ <-& (R_iNsTr_0_435_sample_completed_)
        R_iNsTr_0_435_update_completed_ <-& (R_iNsTr_0_435_update_start_)
        // flux_rotor
        $T[R_flux_rotor_438_sample_start_] 
        $T[R_flux_rotor_438_sample_completed_] 
        $T[R_flux_rotor_438_update_start_] 
        $T[R_flux_rotor_438_update_completed_] 
        // reference to interface object
        R_flux_rotor_438_sample_start_ <-& ($entry)
        R_flux_rotor_438_sample_completed_ <-& (R_flux_rotor_438_sample_start_)
        R_flux_rotor_438_update_start_ <-& (R_flux_rotor_438_sample_completed_)
        R_flux_rotor_438_update_completed_ <-& (R_flux_rotor_438_update_start_)
        MUX_439_sample_start_ <-& (R_iNsTr_0_435_update_completed_)
        MUX_439_sample_start_ <-& (R_flux_rotor_438_update_completed_)
        ;;[MUX_439_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_439_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_439_sample_start_ &-> (MUX_439_start)
        MUX_439_sample_completed_ <-& (MUX_439_start)
        MUX_439_update_start_ &-> (MUX_439_complete)
        MUX_439_update_completed_ <-& (MUX_439_complete)
        MUX_439_sample_completed_ &-> ($null)
        // Target expression
        // (as target) xx_x0
        // xx_x0
        // implicit reference
        // 		$call fpmul32f (($bitcast ($float<8,23>) _f2.000000e+06 ) Lr ) (iNsTr_1 ) 
        //  file prog.linked.opt.aa, line 193
        $T[call_stmt_445_sample_start_] 
        $T[call_stmt_445_sample_completed_] 
        $T[call_stmt_445_update_start_] 
        $T[call_stmt_445_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Lr
        $T[R_Lr_443_sample_start_] 
        $T[R_Lr_443_sample_completed_] 
        $T[R_Lr_443_update_start_] 
        $T[R_Lr_443_update_completed_] 
        // reference to interface object
        R_Lr_443_sample_start_ <-& ($entry)
        R_Lr_443_sample_completed_ <-& (R_Lr_443_sample_start_)
        R_Lr_443_update_start_ <-& (R_Lr_443_sample_completed_)
        R_Lr_443_update_completed_ <-& (R_Lr_443_update_start_)
        call_stmt_445_sample_start_ <-& (R_Lr_443_update_completed_)
        ;;[call_stmt_445_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_445_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_445_sample_start_ &-> (call_stmt_445_Sample)
        call_stmt_445_sample_completed_ <-& (call_stmt_445_Sample)
        call_stmt_445_sample_completed_ &-> ($null)
        call_stmt_445_update_start_ &-> (call_stmt_445_Update)
        call_stmt_445_update_completed_ <-& (call_stmt_445_Update)
        // Call output argument 0
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		$call fpmul32f (iNsTr_1 torque_ref ) (iNsTr_2 ) 
        //  file prog.linked.opt.aa, line 194
        $T[call_stmt_449_sample_start_] 
        $T[call_stmt_449_sample_completed_] 
        $T[call_stmt_449_update_start_] 
        $T[call_stmt_449_update_completed_] 
        // Call input argument 0
        // iNsTr_1
        $T[R_iNsTr_1_446_sample_start_] 
        $T[R_iNsTr_1_446_sample_completed_] 
        $T[R_iNsTr_1_446_update_start_] 
        $T[R_iNsTr_1_446_update_completed_] 
        // implicit reference
        R_iNsTr_1_446_sample_start_ <-& (call_stmt_445_update_completed_)
        R_iNsTr_1_446_sample_completed_ <-& (R_iNsTr_1_446_sample_start_)
        R_iNsTr_1_446_update_start_ <-& (R_iNsTr_1_446_sample_completed_)
        R_iNsTr_1_446_update_completed_ <-& (R_iNsTr_1_446_update_start_)
        // Call input argument 1
        // torque_ref
        $T[R_torque_ref_447_sample_start_] 
        $T[R_torque_ref_447_sample_completed_] 
        $T[R_torque_ref_447_update_start_] 
        $T[R_torque_ref_447_update_completed_] 
        // reference to interface object
        R_torque_ref_447_sample_start_ <-& ($entry)
        R_torque_ref_447_sample_completed_ <-& (R_torque_ref_447_sample_start_)
        R_torque_ref_447_update_start_ <-& (R_torque_ref_447_sample_completed_)
        R_torque_ref_447_update_completed_ <-& (R_torque_ref_447_update_start_)
        call_stmt_449_sample_start_ <-& (R_iNsTr_1_446_update_completed_)
        call_stmt_449_sample_start_ <-& (R_torque_ref_447_update_completed_)
        ;;[call_stmt_449_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_449_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_449_sample_start_ &-> (call_stmt_449_Sample)
        call_stmt_449_sample_completed_ <-& (call_stmt_449_Sample)
        call_stmt_449_sample_completed_ &-> ($null)
        call_stmt_449_update_start_ &-> (call_stmt_449_Update)
        call_stmt_449_update_completed_ <-& (call_stmt_449_Update)
        // Call output argument 0
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		$call fpmul32f (constant_1 xx_x0 ) (iNsTr_3 ) 
        //  file prog.linked.opt.aa, line 195
        $T[call_stmt_453_sample_start_] 
        $T[call_stmt_453_sample_completed_] 
        $T[call_stmt_453_update_start_] 
        $T[call_stmt_453_update_completed_] 
        // Call input argument 0
        // constant_1
        $T[R_constant_1_450_sample_start_] 
        $T[R_constant_1_450_sample_completed_] 
        $T[R_constant_1_450_update_start_] 
        $T[R_constant_1_450_update_completed_] 
        // reference to interface object
        R_constant_1_450_sample_start_ <-& ($entry)
        R_constant_1_450_sample_completed_ <-& (R_constant_1_450_sample_start_)
        R_constant_1_450_update_start_ <-& (R_constant_1_450_sample_completed_)
        R_constant_1_450_update_completed_ <-& (R_constant_1_450_update_start_)
        // Call input argument 1
        // xx_x0
        $T[R_xx_x0_451_sample_start_] 
        $T[R_xx_x0_451_sample_completed_] 
        $T[R_xx_x0_451_update_start_] 
        $T[R_xx_x0_451_update_completed_] 
        // implicit reference
        R_xx_x0_451_sample_start_ <-& (MUX_439_update_completed_)
        R_xx_x0_451_sample_completed_ <-& (R_xx_x0_451_sample_start_)
        R_xx_x0_451_update_start_ <-& (R_xx_x0_451_sample_completed_)
        R_xx_x0_451_update_completed_ <-& (R_xx_x0_451_update_start_)
        call_stmt_453_sample_start_ <-& (R_constant_1_450_update_completed_)
        call_stmt_453_sample_start_ <-& (R_xx_x0_451_update_completed_)
        ;;[call_stmt_453_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_453_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_453_sample_start_ &-> (call_stmt_453_Sample)
        call_stmt_453_sample_completed_ <-& (call_stmt_453_Sample)
        call_stmt_453_sample_completed_ &-> ($null)
        call_stmt_453_update_start_ &-> (call_stmt_453_Update)
        call_stmt_453_update_completed_ <-& (call_stmt_453_Update)
        // Call output argument 0
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_2 )
        //  file prog.linked.opt.aa, line 196
        // Source expression
        // ($cast ($float<11,52>) iNsTr_2 )
        $T[type_cast_456_sample_start_] 
        $T[type_cast_456_sample_completed_] 
        $T[type_cast_456_update_start_] 
        $T[type_cast_456_update_completed_] 
        // iNsTr_2
        $T[R_iNsTr_2_455_sample_start_] 
        $T[R_iNsTr_2_455_sample_completed_] 
        $T[R_iNsTr_2_455_update_start_] 
        $T[R_iNsTr_2_455_update_completed_] 
        // implicit reference
        R_iNsTr_2_455_sample_start_ <-& (call_stmt_449_update_completed_)
        R_iNsTr_2_455_sample_completed_ <-& (R_iNsTr_2_455_sample_start_)
        R_iNsTr_2_455_update_start_ <-& (R_iNsTr_2_455_sample_completed_)
        R_iNsTr_2_455_update_completed_ <-& (R_iNsTr_2_455_update_start_)
        type_cast_456_sample_start_ <-& (R_iNsTr_2_455_update_completed_)
        ;;[type_cast_456_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_456_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_456_sample_start_ &-> (type_cast_456_Sample)
        type_cast_456_sample_completed_ <-& (type_cast_456_Sample)
        type_cast_456_sample_completed_ &-> ($null)
        type_cast_456_update_start_ &-> (type_cast_456_Update)
        type_cast_456_update_completed_ <-& (type_cast_456_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		iNsTr_5 := ($cast ($float<11,52>) iNsTr_3 )
        //  file prog.linked.opt.aa, line 197
        // Source expression
        // ($cast ($float<11,52>) iNsTr_3 )
        $T[type_cast_460_sample_start_] 
        $T[type_cast_460_sample_completed_] 
        $T[type_cast_460_update_start_] 
        $T[type_cast_460_update_completed_] 
        // iNsTr_3
        $T[R_iNsTr_3_459_sample_start_] 
        $T[R_iNsTr_3_459_sample_completed_] 
        $T[R_iNsTr_3_459_update_start_] 
        $T[R_iNsTr_3_459_update_completed_] 
        // implicit reference
        R_iNsTr_3_459_sample_start_ <-& (call_stmt_453_update_completed_)
        R_iNsTr_3_459_sample_completed_ <-& (R_iNsTr_3_459_sample_start_)
        R_iNsTr_3_459_update_start_ <-& (R_iNsTr_3_459_sample_completed_)
        R_iNsTr_3_459_update_completed_ <-& (R_iNsTr_3_459_update_start_)
        type_cast_460_sample_start_ <-& (R_iNsTr_3_459_update_completed_)
        ;;[type_cast_460_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_460_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_460_sample_start_ &-> (type_cast_460_Sample)
        type_cast_460_sample_completed_ <-& (type_cast_460_Sample)
        type_cast_460_sample_completed_ &-> ($null)
        type_cast_460_update_start_ &-> (type_cast_460_Update)
        type_cast_460_update_completed_ <-& (type_cast_460_Update)
        // Target expression
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		$call fdiv32 (iNsTr_4 iNsTr_5 ) (iNsTr_6 ) 
        //  file prog.linked.opt.aa, line 198
        $T[call_stmt_465_sample_start_] 
        $T[call_stmt_465_sample_completed_] 
        $T[call_stmt_465_update_start_] 
        $T[call_stmt_465_update_completed_] 
        // Call input argument 0
        // iNsTr_4
        $T[R_iNsTr_4_462_sample_start_] 
        $T[R_iNsTr_4_462_sample_completed_] 
        $T[R_iNsTr_4_462_update_start_] 
        $T[R_iNsTr_4_462_update_completed_] 
        // implicit reference
        R_iNsTr_4_462_sample_start_ <-& (type_cast_456_update_completed_)
        R_iNsTr_4_462_sample_completed_ <-& (R_iNsTr_4_462_sample_start_)
        R_iNsTr_4_462_update_start_ <-& (R_iNsTr_4_462_sample_completed_)
        R_iNsTr_4_462_update_completed_ <-& (R_iNsTr_4_462_update_start_)
        // Call input argument 1
        // iNsTr_5
        $T[R_iNsTr_5_463_sample_start_] 
        $T[R_iNsTr_5_463_sample_completed_] 
        $T[R_iNsTr_5_463_update_start_] 
        $T[R_iNsTr_5_463_update_completed_] 
        // implicit reference
        R_iNsTr_5_463_sample_start_ <-& (type_cast_460_update_completed_)
        R_iNsTr_5_463_sample_completed_ <-& (R_iNsTr_5_463_sample_start_)
        R_iNsTr_5_463_update_start_ <-& (R_iNsTr_5_463_sample_completed_)
        R_iNsTr_5_463_update_completed_ <-& (R_iNsTr_5_463_update_start_)
        call_stmt_465_sample_start_ <-& (R_iNsTr_4_462_update_completed_)
        call_stmt_465_sample_start_ <-& (R_iNsTr_5_463_update_completed_)
        ;;[call_stmt_465_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_465_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_465_sample_start_ &-> (call_stmt_465_Sample)
        call_stmt_465_sample_completed_ <-& (call_stmt_465_Sample)
        call_stmt_465_sample_completed_ &-> ($null)
        call_stmt_465_update_start_ &-> (call_stmt_465_Update)
        call_stmt_465_update_completed_ <-& (call_stmt_465_Update)
        // Call output argument 0
        // (as target) iNsTr_6
        // iNsTr_6
        // implicit reference
        // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
        //  file prog.linked.opt.aa, line 199
        // Source expression
        // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
        $T[type_cast_470_sample_start_] 
        $T[type_cast_470_sample_completed_] 
        $T[type_cast_470_update_start_] 
        $T[type_cast_470_update_completed_] 
        // ($bitcast ($int<32>) iNsTr_6 )
        $T[type_cast_469_sample_start_] 
        $T[type_cast_469_sample_completed_] 
        $T[type_cast_469_update_start_] 
        $T[type_cast_469_update_completed_] 
        // iNsTr_6
        $T[R_iNsTr_6_468_sample_start_] 
        $T[R_iNsTr_6_468_sample_completed_] 
        $T[R_iNsTr_6_468_update_start_] 
        $T[R_iNsTr_6_468_update_completed_] 
        // implicit reference
        R_iNsTr_6_468_sample_start_ <-& (call_stmt_465_update_completed_)
        R_iNsTr_6_468_sample_completed_ <-& (R_iNsTr_6_468_sample_start_)
        R_iNsTr_6_468_update_start_ <-& (R_iNsTr_6_468_sample_completed_)
        R_iNsTr_6_468_update_completed_ <-& (R_iNsTr_6_468_update_start_)
        type_cast_469_sample_start_ <-& (R_iNsTr_6_468_update_completed_)
        ;;[type_cast_469_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_469_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_469_sample_start_ &-> (type_cast_469_Sample)
        type_cast_469_sample_completed_ <-& (type_cast_469_Sample)
        type_cast_469_sample_completed_ &-> ($null)
        type_cast_469_update_start_ &-> (type_cast_469_Update)
        type_cast_469_update_completed_ <-& (type_cast_469_Update)
        // flow-through
        type_cast_469_update_start_ <-& (type_cast_469_sample_completed_)
        type_cast_470_sample_start_ <-& (type_cast_469_update_completed_)
        ;;[type_cast_470_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_470_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_470_sample_start_ &-> (type_cast_470_Sample)
        type_cast_470_sample_completed_ <-& (type_cast_470_Sample)
        type_cast_470_sample_completed_ &-> ($null)
        type_cast_470_update_start_ &-> (type_cast_470_Update)
        type_cast_470_update_completed_ <-& (type_cast_470_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_433_to_assign_stmt_471__entry__ |-> (assign_stmt_433_to_assign_stmt_471)
      assign_stmt_433_to_assign_stmt_471__exit__ <-| (assign_stmt_433_to_assign_stmt_471)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 201
      //---------------------   merge statement  file prog.linked.opt.aa, line 201  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_473_PhiReqMerge] 
      merge_stmt_473_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_473_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_473_PhiReqMerge |-> (merge_stmt_473_PhiAck)
      merge_stmt_473__exit__  <-| (merge_stmt_473_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 201  --------------------------
      assign_stmt_433_to_assign_stmt_471__entry__ <-| (branch_block_stmt_427__entry__)
      return__ <-| (assign_stmt_433_to_assign_stmt_471__exit__)
      merge_stmt_473__exit__ |-> (branch_block_stmt_427__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %iq_err_calc%body%
    //  file prog.linked.opt.aa, line 201
    // constant-object-declarations for block %iq_err_calc%body
    //  file prog.linked.opt.aa, line 189
    // constant-object-declarations for block %iq_err_calc
    //  file prog.linked.opt.aa, line 184
    // constant-declarations for block %iq_err_calc%body
    //  file prog.linked.opt.aa, line 189
    // ($bitcast ($float<8,23>) _f1.000000e+00 )
    $constant $W[type_cast_431_wire_constant] : $float<8,23> := _b00111111100000000000000000000000// 1.000000e+00
    // ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
    // ($bitcast ($float<8,23>) _f1.000000e+00 )
    $constant $W[type_cast_437_wire_constant] : $float<8,23> := _b00111111100000000000000000000000// 1.000000e+00
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f2.000000e+06 ) Lr ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 193
    // ($bitcast ($float<8,23>) _f2.000000e+06 )
    $constant $W[type_cast_442_wire_constant] : $float<8,23> := _b01001001111101000010010000000000// 2.000000e+06
    // 		$call fpmul32f (iNsTr_1 torque_ref ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 194
    // 		$call fpmul32f (constant_1 xx_x0 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 195
    // 		$call fdiv32 (iNsTr_4 iNsTr_5 ) (iNsTr_6 ) 
    //  file prog.linked.opt.aa, line 198
    // constant-declarations for block %iq_err_calc%body%
    //  file prog.linked.opt.aa, line 201
    // block %iq_err_calc%body
    //  file prog.linked.opt.aa, line 189
    // 		iNsTr_0 := (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
    //  file prog.linked.opt.aa, line 191
    // iNsTr_0
    $W[iNsTr_0_433] : $int<1>
    // 		xx_x0 := ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
    //  file prog.linked.opt.aa, line 192
    // xx_x0
    $W[xx_x0_440] : $float<8,23>
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f2.000000e+06 ) Lr ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 193
    // iNsTr_1
    $W[iNsTr_1_445] : $float<8,23>
    // 		$call fpmul32f (iNsTr_1 torque_ref ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 194
    // iNsTr_2
    $W[iNsTr_2_449] : $float<8,23>
    // 		$call fpmul32f (constant_1 xx_x0 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 195
    // iNsTr_3
    $W[iNsTr_3_453] : $float<8,23>
    // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_2 )
    //  file prog.linked.opt.aa, line 196
    // iNsTr_4
    $W[iNsTr_4_457] : $float<11,52>
    // 		iNsTr_5 := ($cast ($float<11,52>) iNsTr_3 )
    //  file prog.linked.opt.aa, line 197
    // iNsTr_5
    $W[iNsTr_5_461] : $float<11,52>
    // 		$call fdiv32 (iNsTr_4 iNsTr_5 ) (iNsTr_6 ) 
    //  file prog.linked.opt.aa, line 198
    // iNsTr_6
    $W[iNsTr_6_465] : $float<11,52>
    // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
    //  file prog.linked.opt.aa, line 199
    // ($bitcast ($int<32>) iNsTr_6 )
    $intermediate $W[type_cast_469_wire] : $int<32>
    // ret_val__
    // datapath-instances for block %iq_err_calc%body
    //  file prog.linked.opt.aa, line 189
    // 		iNsTr_0 := (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
    //  file prog.linked.opt.aa, line 191
    // (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
    $S<$S[SLT_f32_u1_432_inst] (flux_rotor type_cast_431_wire_constant) (iNsTr_0_433) 
    $delay SLT_f32_u1_432_inst 2
    // 		xx_x0 := ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
    //  file prog.linked.opt.aa, line 192
    // ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
    ? [MUX_439_inst] (iNsTr_0_433 type_cast_437_wire_constant flux_rotor) (xx_x0_440) 
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f2.000000e+06 ) Lr ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 193
    $call [call_stmt_445_call] $module fpmul32f(type_cast_442_wire_constant Lr) (iNsTr_1_445) 
    $delay call_stmt_445_call 2
    // 		$call fpmul32f (iNsTr_1 torque_ref ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 194
    $call [call_stmt_449_call] $module fpmul32f(iNsTr_1_445 torque_ref) (iNsTr_2_449) 
    $delay call_stmt_449_call 2
    // 		$call fpmul32f (constant_1 xx_x0 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 195
    $call [call_stmt_453_call] $module fpmul32f(constant_1 xx_x0_440) (iNsTr_3_453) 
    $delay call_stmt_453_call 2
    // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_2 )
    //  file prog.linked.opt.aa, line 196
    // ($cast ($float<11,52>) iNsTr_2 )
    $F:=$F [type_cast_456_inst] (iNsTr_2_449) (iNsTr_4_457)  
    $delay type_cast_456_inst 1
    // 		iNsTr_5 := ($cast ($float<11,52>) iNsTr_3 )
    //  file prog.linked.opt.aa, line 197
    // ($cast ($float<11,52>) iNsTr_3 )
    $F:=$F [type_cast_460_inst] (iNsTr_3_453) (iNsTr_5_461)  
    $delay type_cast_460_inst 1
    // 		$call fdiv32 (iNsTr_4 iNsTr_5 ) (iNsTr_6 ) 
    //  file prog.linked.opt.aa, line 198
    $call [call_stmt_465_call] $module fdiv32(iNsTr_4_457 iNsTr_5_461) (iNsTr_6_465) 
    $delay call_stmt_465_call 2
    // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
    //  file prog.linked.opt.aa, line 199
    // ($bitcast ($int<32>) iNsTr_6 )
    $S:=$F [type_cast_469_inst] (iNsTr_6_465) (type_cast_469_wire)   $flowthrough
    $delay type_cast_469_inst 0
    // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
    $F:=$S [type_cast_470_inst] (type_cast_469_wire) (ret_val__)  
    $delay type_cast_470_inst 1
  }
  // end data-path
  // 		iNsTr_0 := (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
  //  file prog.linked.opt.aa, line 191
  // (flux_rotor < ($bitcast ($float<8,23>) _f1.000000e+00 ))
  SLT_f32_u1_432_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/SLT_f32_u1_432_Sample/rr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/SLT_f32_u1_432_Update/cr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/SLT_f32_u1_432_Sample/ra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/SLT_f32_u1_432_Update/ca)
  // 		xx_x0 := ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
  //  file prog.linked.opt.aa, line 192
  // ( $mux iNsTr_0 ($bitcast ($float<8,23>) _f1.000000e+00 )  flux_rotor ) 
  MUX_439_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/MUX_439_start/req branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/MUX_439_complete/req) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/MUX_439_start/ack branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/MUX_439_complete/ack)
  // 		$call fpmul32f (($bitcast ($float<8,23>) _f2.000000e+06 ) Lr ) (iNsTr_1 ) 
  //  file prog.linked.opt.aa, line 193
  call_stmt_445_call <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_445_Sample/crr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_445_Update/ccr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_445_Sample/cra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_445_Update/cca)
  // 		$call fpmul32f (iNsTr_1 torque_ref ) (iNsTr_2 ) 
  //  file prog.linked.opt.aa, line 194
  call_stmt_449_call <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_449_Sample/crr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_449_Update/ccr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_449_Sample/cra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_449_Update/cca)
  // 		$call fpmul32f (constant_1 xx_x0 ) (iNsTr_3 ) 
  //  file prog.linked.opt.aa, line 195
  call_stmt_453_call <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_453_Sample/crr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_453_Update/ccr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_453_Sample/cra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_453_Update/cca)
  // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_2 )
  //  file prog.linked.opt.aa, line 196
  // ($cast ($float<11,52>) iNsTr_2 )
  type_cast_456_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_456_Sample/rr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_456_Update/cr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_456_Sample/ra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_456_Update/ca)
  // 		iNsTr_5 := ($cast ($float<11,52>) iNsTr_3 )
  //  file prog.linked.opt.aa, line 197
  // ($cast ($float<11,52>) iNsTr_3 )
  type_cast_460_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_460_Sample/rr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_460_Update/cr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_460_Sample/ra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_460_Update/ca)
  // 		$call fdiv32 (iNsTr_4 iNsTr_5 ) (iNsTr_6 ) 
  //  file prog.linked.opt.aa, line 198
  call_stmt_465_call <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_465_Sample/crr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_465_Update/ccr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_465_Sample/cra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/call_stmt_465_Update/cca)
  // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
  //  file prog.linked.opt.aa, line 199
  // ($bitcast ($int<32>) iNsTr_6 )
  type_cast_469_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_469_Sample/rr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_469_Update/cr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_469_Sample/ra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_469_Update/ca)
  // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_6 ) )
  type_cast_470_inst <=> (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_470_Sample/rr branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_470_Update/cr) (branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_470_Sample/ra branch_block_stmt_427/assign_stmt_433_to_assign_stmt_471/type_cast_470_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 201
}
$module [rotor_flux_calc] 
{
  $in del_t:$float<8,23>
  // can point into  foreign( $void )
  Lm:$float<8,23>
  // can point into  foreign( $void )
  id:$float<8,23>
  // can point into  foreign( $void )
  flux_rotor_prev:$float<8,23>
  // can point into  foreign( $void )
  tau_new:$float<8,23>
  // can point into  foreign( $void )
  tau_r:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %rotor_flux_calc
  //  file prog.linked.opt.aa, line 205
  // pipe-declarations for block %rotor_flux_calc%body
  //  file prog.linked.opt.aa, line 210
  // pipe-declarations for block %rotor_flux_calc%body%
  //  file prog.linked.opt.aa, line 220
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_484] // Branch Block  file prog.linked.opt.aa, line 210
    {
      $P [branch_block_stmt_484__entry__]
      branch_block_stmt_484__entry__ <-| ($entry)
      $P [branch_block_stmt_484__exit__]
      branch_block_stmt_484__exit__ |-> ($exit)
      $P [call_stmt_489_to_assign_stmt_516__entry__] 
      $P [call_stmt_489_to_assign_stmt_516__exit__] 
      $P [return__]
      $P [merge_stmt_518__exit__] 
      ::[call_stmt_489_to_assign_stmt_516] 
      {
        // 		$call fpmul32f (($bitcast ($float<8,23>) _f5.000000e+04 ) Lm ) (iNsTr_0 ) 
        //  file prog.linked.opt.aa, line 212
        $T[call_stmt_489_sample_start_] 
        $T[call_stmt_489_sample_completed_] 
        $T[call_stmt_489_update_start_] 
        $T[call_stmt_489_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Lm
        $T[R_Lm_487_sample_start_] 
        $T[R_Lm_487_sample_completed_] 
        $T[R_Lm_487_update_start_] 
        $T[R_Lm_487_update_completed_] 
        // reference to interface object
        R_Lm_487_sample_start_ <-& ($entry)
        R_Lm_487_sample_completed_ <-& (R_Lm_487_sample_start_)
        R_Lm_487_update_start_ <-& (R_Lm_487_sample_completed_)
        R_Lm_487_update_completed_ <-& (R_Lm_487_update_start_)
        call_stmt_489_sample_start_ <-& (R_Lm_487_update_completed_)
        ;;[call_stmt_489_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_489_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_489_sample_start_ &-> (call_stmt_489_Sample)
        call_stmt_489_sample_completed_ <-& (call_stmt_489_Sample)
        call_stmt_489_sample_completed_ &-> ($null)
        call_stmt_489_update_start_ &-> (call_stmt_489_Update)
        call_stmt_489_update_completed_ <-& (call_stmt_489_Update)
        // Call output argument 0
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		$call fpmul32f (id iNsTr_0 ) (iNsTr_1 ) 
        //  file prog.linked.opt.aa, line 213
        $T[call_stmt_493_sample_start_] 
        $T[call_stmt_493_sample_completed_] 
        $T[call_stmt_493_update_start_] 
        $T[call_stmt_493_update_completed_] 
        // Call input argument 0
        // id
        $T[R_id_490_sample_start_] 
        $T[R_id_490_sample_completed_] 
        $T[R_id_490_update_start_] 
        $T[R_id_490_update_completed_] 
        // reference to interface object
        R_id_490_sample_start_ <-& ($entry)
        R_id_490_sample_completed_ <-& (R_id_490_sample_start_)
        R_id_490_update_start_ <-& (R_id_490_sample_completed_)
        R_id_490_update_completed_ <-& (R_id_490_update_start_)
        // Call input argument 1
        // iNsTr_0
        $T[R_iNsTr_0_491_sample_start_] 
        $T[R_iNsTr_0_491_sample_completed_] 
        $T[R_iNsTr_0_491_update_start_] 
        $T[R_iNsTr_0_491_update_completed_] 
        // implicit reference
        R_iNsTr_0_491_sample_start_ <-& (call_stmt_489_update_completed_)
        R_iNsTr_0_491_sample_completed_ <-& (R_iNsTr_0_491_sample_start_)
        R_iNsTr_0_491_update_start_ <-& (R_iNsTr_0_491_sample_completed_)
        R_iNsTr_0_491_update_completed_ <-& (R_iNsTr_0_491_update_start_)
        call_stmt_493_sample_start_ <-& (R_id_490_update_completed_)
        call_stmt_493_sample_start_ <-& (R_iNsTr_0_491_update_completed_)
        ;;[call_stmt_493_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_493_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_493_sample_start_ &-> (call_stmt_493_Sample)
        call_stmt_493_sample_completed_ <-& (call_stmt_493_Sample)
        call_stmt_493_sample_completed_ &-> ($null)
        call_stmt_493_update_start_ &-> (call_stmt_493_Update)
        call_stmt_493_update_completed_ <-& (call_stmt_493_Update)
        // Call output argument 0
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		$call fpmul32f (($bitcast ($float<8,23>) _f1.039198e+05 ) flux_rotor_prev ) (iNsTr_2 ) 
        //  file prog.linked.opt.aa, line 214
        $T[call_stmt_498_sample_start_] 
        $T[call_stmt_498_sample_completed_] 
        $T[call_stmt_498_update_start_] 
        $T[call_stmt_498_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // flux_rotor_prev
        $T[R_flux_rotor_prev_496_sample_start_] 
        $T[R_flux_rotor_prev_496_sample_completed_] 
        $T[R_flux_rotor_prev_496_update_start_] 
        $T[R_flux_rotor_prev_496_update_completed_] 
        // reference to interface object
        R_flux_rotor_prev_496_sample_start_ <-& ($entry)
        R_flux_rotor_prev_496_sample_completed_ <-& (R_flux_rotor_prev_496_sample_start_)
        R_flux_rotor_prev_496_update_start_ <-& (R_flux_rotor_prev_496_sample_completed_)
        R_flux_rotor_prev_496_update_completed_ <-& (R_flux_rotor_prev_496_update_start_)
        call_stmt_498_sample_start_ <-& (R_flux_rotor_prev_496_update_completed_)
        ;;[call_stmt_498_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_498_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_498_sample_start_ &-> (call_stmt_498_Sample)
        call_stmt_498_sample_completed_ <-& (call_stmt_498_Sample)
        call_stmt_498_sample_completed_ &-> ($null)
        call_stmt_498_update_start_ &-> (call_stmt_498_Update)
        call_stmt_498_update_completed_ <-& (call_stmt_498_Update)
        // Call output argument 0
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		$call fpadd32f (iNsTr_2 iNsTr_1 ) (iNsTr_3 ) 
        //  file prog.linked.opt.aa, line 215
        $T[call_stmt_502_sample_start_] 
        $T[call_stmt_502_sample_completed_] 
        $T[call_stmt_502_update_start_] 
        $T[call_stmt_502_update_completed_] 
        // Call input argument 0
        // iNsTr_2
        $T[R_iNsTr_2_499_sample_start_] 
        $T[R_iNsTr_2_499_sample_completed_] 
        $T[R_iNsTr_2_499_update_start_] 
        $T[R_iNsTr_2_499_update_completed_] 
        // implicit reference
        R_iNsTr_2_499_sample_start_ <-& (call_stmt_498_update_completed_)
        R_iNsTr_2_499_sample_completed_ <-& (R_iNsTr_2_499_sample_start_)
        R_iNsTr_2_499_update_start_ <-& (R_iNsTr_2_499_sample_completed_)
        R_iNsTr_2_499_update_completed_ <-& (R_iNsTr_2_499_update_start_)
        // Call input argument 1
        // iNsTr_1
        $T[R_iNsTr_1_500_sample_start_] 
        $T[R_iNsTr_1_500_sample_completed_] 
        $T[R_iNsTr_1_500_update_start_] 
        $T[R_iNsTr_1_500_update_completed_] 
        // implicit reference
        R_iNsTr_1_500_sample_start_ <-& (call_stmt_493_update_completed_)
        R_iNsTr_1_500_sample_completed_ <-& (R_iNsTr_1_500_sample_start_)
        R_iNsTr_1_500_update_start_ <-& (R_iNsTr_1_500_sample_completed_)
        R_iNsTr_1_500_update_completed_ <-& (R_iNsTr_1_500_update_start_)
        call_stmt_502_sample_start_ <-& (R_iNsTr_2_499_update_completed_)
        call_stmt_502_sample_start_ <-& (R_iNsTr_1_500_update_completed_)
        ;;[call_stmt_502_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_502_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_502_sample_start_ &-> (call_stmt_502_Sample)
        call_stmt_502_sample_completed_ <-& (call_stmt_502_Sample)
        call_stmt_502_sample_completed_ &-> ($null)
        call_stmt_502_update_start_ &-> (call_stmt_502_Update)
        call_stmt_502_update_completed_ <-& (call_stmt_502_Update)
        // Call output argument 0
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_3 )
        //  file prog.linked.opt.aa, line 216
        // Source expression
        // ($cast ($float<11,52>) iNsTr_3 )
        $T[type_cast_505_sample_start_] 
        $T[type_cast_505_sample_completed_] 
        $T[type_cast_505_update_start_] 
        $T[type_cast_505_update_completed_] 
        // iNsTr_3
        $T[R_iNsTr_3_504_sample_start_] 
        $T[R_iNsTr_3_504_sample_completed_] 
        $T[R_iNsTr_3_504_update_start_] 
        $T[R_iNsTr_3_504_update_completed_] 
        // implicit reference
        R_iNsTr_3_504_sample_start_ <-& (call_stmt_502_update_completed_)
        R_iNsTr_3_504_sample_completed_ <-& (R_iNsTr_3_504_sample_start_)
        R_iNsTr_3_504_update_start_ <-& (R_iNsTr_3_504_sample_completed_)
        R_iNsTr_3_504_update_completed_ <-& (R_iNsTr_3_504_update_start_)
        type_cast_505_sample_start_ <-& (R_iNsTr_3_504_update_completed_)
        ;;[type_cast_505_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_505_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_505_sample_start_ &-> (type_cast_505_Sample)
        type_cast_505_sample_completed_ <-& (type_cast_505_Sample)
        type_cast_505_sample_completed_ &-> ($null)
        type_cast_505_update_start_ &-> (type_cast_505_Update)
        type_cast_505_update_completed_ <-& (type_cast_505_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		$call fdiv32 (iNsTr_4 ($bitcast ($float<11,52>) _f1.039698e+05 ) ) (iNsTr_5 ) 
        //  file prog.linked.opt.aa, line 217
        $T[call_stmt_511_sample_start_] 
        $T[call_stmt_511_sample_completed_] 
        $T[call_stmt_511_update_start_] 
        $T[call_stmt_511_update_completed_] 
        // Call input argument 0
        // iNsTr_4
        $T[R_iNsTr_4_507_sample_start_] 
        $T[R_iNsTr_4_507_sample_completed_] 
        $T[R_iNsTr_4_507_update_start_] 
        $T[R_iNsTr_4_507_update_completed_] 
        // implicit reference
        R_iNsTr_4_507_sample_start_ <-& (type_cast_505_update_completed_)
        R_iNsTr_4_507_sample_completed_ <-& (R_iNsTr_4_507_sample_start_)
        R_iNsTr_4_507_update_start_ <-& (R_iNsTr_4_507_sample_completed_)
        R_iNsTr_4_507_update_completed_ <-& (R_iNsTr_4_507_update_start_)
        // Call input argument 1
        call_stmt_511_sample_start_ <-& (R_iNsTr_4_507_update_completed_)
        ;;[call_stmt_511_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_511_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_511_sample_start_ &-> (call_stmt_511_Sample)
        call_stmt_511_sample_completed_ <-& (call_stmt_511_Sample)
        call_stmt_511_sample_completed_ &-> ($null)
        call_stmt_511_update_start_ &-> (call_stmt_511_Update)
        call_stmt_511_update_completed_ <-& (call_stmt_511_Update)
        // Call output argument 0
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
        //  file prog.linked.opt.aa, line 218
        // Source expression
        // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
        $T[type_cast_515_sample_start_] 
        $T[type_cast_515_sample_completed_] 
        $T[type_cast_515_update_start_] 
        $T[type_cast_515_update_completed_] 
        // ($bitcast ($int<32>) iNsTr_5 )
        $T[type_cast_514_sample_start_] 
        $T[type_cast_514_sample_completed_] 
        $T[type_cast_514_update_start_] 
        $T[type_cast_514_update_completed_] 
        // iNsTr_5
        $T[R_iNsTr_5_513_sample_start_] 
        $T[R_iNsTr_5_513_sample_completed_] 
        $T[R_iNsTr_5_513_update_start_] 
        $T[R_iNsTr_5_513_update_completed_] 
        // implicit reference
        R_iNsTr_5_513_sample_start_ <-& (call_stmt_511_update_completed_)
        R_iNsTr_5_513_sample_completed_ <-& (R_iNsTr_5_513_sample_start_)
        R_iNsTr_5_513_update_start_ <-& (R_iNsTr_5_513_sample_completed_)
        R_iNsTr_5_513_update_completed_ <-& (R_iNsTr_5_513_update_start_)
        type_cast_514_sample_start_ <-& (R_iNsTr_5_513_update_completed_)
        ;;[type_cast_514_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_514_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_514_sample_start_ &-> (type_cast_514_Sample)
        type_cast_514_sample_completed_ <-& (type_cast_514_Sample)
        type_cast_514_sample_completed_ &-> ($null)
        type_cast_514_update_start_ &-> (type_cast_514_Update)
        type_cast_514_update_completed_ <-& (type_cast_514_Update)
        // flow-through
        type_cast_514_update_start_ <-& (type_cast_514_sample_completed_)
        type_cast_515_sample_start_ <-& (type_cast_514_update_completed_)
        ;;[type_cast_515_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_515_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_515_sample_start_ &-> (type_cast_515_Sample)
        type_cast_515_sample_completed_ <-& (type_cast_515_Sample)
        type_cast_515_sample_completed_ &-> ($null)
        type_cast_515_update_start_ &-> (type_cast_515_Update)
        type_cast_515_update_completed_ <-& (type_cast_515_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      call_stmt_489_to_assign_stmt_516__entry__ |-> (call_stmt_489_to_assign_stmt_516)
      call_stmt_489_to_assign_stmt_516__exit__ <-| (call_stmt_489_to_assign_stmt_516)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 220
      //---------------------   merge statement  file prog.linked.opt.aa, line 220  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_518_PhiReqMerge] 
      merge_stmt_518_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_518_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_518_PhiReqMerge |-> (merge_stmt_518_PhiAck)
      merge_stmt_518__exit__  <-| (merge_stmt_518_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 220  --------------------------
      call_stmt_489_to_assign_stmt_516__entry__ <-| (branch_block_stmt_484__entry__)
      return__ <-| (call_stmt_489_to_assign_stmt_516__exit__)
      merge_stmt_518__exit__ |-> (branch_block_stmt_484__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %rotor_flux_calc%body%
    //  file prog.linked.opt.aa, line 220
    // constant-object-declarations for block %rotor_flux_calc%body
    //  file prog.linked.opt.aa, line 210
    // constant-object-declarations for block %rotor_flux_calc
    //  file prog.linked.opt.aa, line 205
    // constant-declarations for block %rotor_flux_calc%body
    //  file prog.linked.opt.aa, line 210
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f5.000000e+04 ) Lm ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 212
    // ($bitcast ($float<8,23>) _f5.000000e+04 )
    $constant $W[type_cast_486_wire_constant] : $float<8,23> := _b01000111010000110101000000000000// 5.000000e+04
    // 		$call fpmul32f (id iNsTr_0 ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 213
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f1.039198e+05 ) flux_rotor_prev ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 214
    // ($bitcast ($float<8,23>) _f1.039198e+05 )
    $constant $W[type_cast_495_wire_constant] : $float<8,23> := _b01000111110010101111011111100110// 1.039198e+05
    // 		$call fpadd32f (iNsTr_2 iNsTr_1 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 215
    // 		$call fdiv32 (iNsTr_4 ($bitcast ($float<11,52>) _f1.039698e+05 ) ) (iNsTr_5 ) 
    //  file prog.linked.opt.aa, line 217
    // ($bitcast ($float<11,52>) _f1.039698e+05 )
    $constant $W[type_cast_509_wire_constant] : $float<11,52> := _b0100000011111001011000100001110011001100110011001100110011001101// 1.039698e+05
    // constant-declarations for block %rotor_flux_calc%body%
    //  file prog.linked.opt.aa, line 220
    // block %rotor_flux_calc%body
    //  file prog.linked.opt.aa, line 210
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f5.000000e+04 ) Lm ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 212
    // iNsTr_0
    $W[iNsTr_0_489] : $float<8,23>
    // 		$call fpmul32f (id iNsTr_0 ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 213
    // iNsTr_1
    $W[iNsTr_1_493] : $float<8,23>
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f1.039198e+05 ) flux_rotor_prev ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 214
    // iNsTr_2
    $W[iNsTr_2_498] : $float<8,23>
    // 		$call fpadd32f (iNsTr_2 iNsTr_1 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 215
    // iNsTr_3
    $W[iNsTr_3_502] : $float<8,23>
    // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_3 )
    //  file prog.linked.opt.aa, line 216
    // iNsTr_4
    $W[iNsTr_4_506] : $float<11,52>
    // 		$call fdiv32 (iNsTr_4 ($bitcast ($float<11,52>) _f1.039698e+05 ) ) (iNsTr_5 ) 
    //  file prog.linked.opt.aa, line 217
    // iNsTr_5
    $W[iNsTr_5_511] : $float<11,52>
    // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
    //  file prog.linked.opt.aa, line 218
    // ($bitcast ($int<32>) iNsTr_5 )
    $intermediate $W[type_cast_514_wire] : $int<32>
    // ret_val__
    // datapath-instances for block %rotor_flux_calc%body
    //  file prog.linked.opt.aa, line 210
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f5.000000e+04 ) Lm ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 212
    $call [call_stmt_489_call] $module fpmul32f(type_cast_486_wire_constant Lm) (iNsTr_0_489) 
    $delay call_stmt_489_call 2
    // 		$call fpmul32f (id iNsTr_0 ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 213
    $call [call_stmt_493_call] $module fpmul32f(id iNsTr_0_489) (iNsTr_1_493) 
    $delay call_stmt_493_call 2
    // 		$call fpmul32f (($bitcast ($float<8,23>) _f1.039198e+05 ) flux_rotor_prev ) (iNsTr_2 ) 
    //  file prog.linked.opt.aa, line 214
    $call [call_stmt_498_call] $module fpmul32f(type_cast_495_wire_constant flux_rotor_prev) (iNsTr_2_498) 
    $delay call_stmt_498_call 2
    // 		$call fpadd32f (iNsTr_2 iNsTr_1 ) (iNsTr_3 ) 
    //  file prog.linked.opt.aa, line 215
    $call [call_stmt_502_call] $module fpadd32f(iNsTr_2_498 iNsTr_1_493) (iNsTr_3_502) 
    $delay call_stmt_502_call 2
    // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_3 )
    //  file prog.linked.opt.aa, line 216
    // ($cast ($float<11,52>) iNsTr_3 )
    $F:=$F [type_cast_505_inst] (iNsTr_3_502) (iNsTr_4_506)  
    $delay type_cast_505_inst 1
    // 		$call fdiv32 (iNsTr_4 ($bitcast ($float<11,52>) _f1.039698e+05 ) ) (iNsTr_5 ) 
    //  file prog.linked.opt.aa, line 217
    $call [call_stmt_511_call] $module fdiv32(iNsTr_4_506 type_cast_509_wire_constant) (iNsTr_5_511) 
    $delay call_stmt_511_call 2
    // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
    //  file prog.linked.opt.aa, line 218
    // ($bitcast ($int<32>) iNsTr_5 )
    $S:=$F [type_cast_514_inst] (iNsTr_5_511) (type_cast_514_wire)   $flowthrough
    $delay type_cast_514_inst 0
    // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
    $F:=$S [type_cast_515_inst] (type_cast_514_wire) (ret_val__)  
    $delay type_cast_515_inst 1
  }
  // end data-path
  // 		$call fpmul32f (($bitcast ($float<8,23>) _f5.000000e+04 ) Lm ) (iNsTr_0 ) 
  //  file prog.linked.opt.aa, line 212
  call_stmt_489_call <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_489_Sample/crr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_489_Update/ccr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_489_Sample/cra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_489_Update/cca)
  // 		$call fpmul32f (id iNsTr_0 ) (iNsTr_1 ) 
  //  file prog.linked.opt.aa, line 213
  call_stmt_493_call <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_493_Sample/crr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_493_Update/ccr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_493_Sample/cra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_493_Update/cca)
  // 		$call fpmul32f (($bitcast ($float<8,23>) _f1.039198e+05 ) flux_rotor_prev ) (iNsTr_2 ) 
  //  file prog.linked.opt.aa, line 214
  call_stmt_498_call <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_498_Sample/crr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_498_Update/ccr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_498_Sample/cra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_498_Update/cca)
  // 		$call fpadd32f (iNsTr_2 iNsTr_1 ) (iNsTr_3 ) 
  //  file prog.linked.opt.aa, line 215
  call_stmt_502_call <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_502_Sample/crr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_502_Update/ccr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_502_Sample/cra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_502_Update/cca)
  // 		iNsTr_4 := ($cast ($float<11,52>) iNsTr_3 )
  //  file prog.linked.opt.aa, line 216
  // ($cast ($float<11,52>) iNsTr_3 )
  type_cast_505_inst <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_505_Sample/rr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_505_Update/cr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_505_Sample/ra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_505_Update/ca)
  // 		$call fdiv32 (iNsTr_4 ($bitcast ($float<11,52>) _f1.039698e+05 ) ) (iNsTr_5 ) 
  //  file prog.linked.opt.aa, line 217
  call_stmt_511_call <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_511_Sample/crr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_511_Update/ccr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_511_Sample/cra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/call_stmt_511_Update/cca)
  // 		ret_val__ := ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
  //  file prog.linked.opt.aa, line 218
  // ($bitcast ($int<32>) iNsTr_5 )
  type_cast_514_inst <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_514_Sample/rr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_514_Update/cr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_514_Sample/ra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_514_Update/ca)
  // ($cast ($float<8,23>) ($bitcast ($int<32>) iNsTr_5 ) )
  type_cast_515_inst <=> (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_515_Sample/rr branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_515_Update/cr) (branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_515_Sample/ra branch_block_stmt_484/call_stmt_489_to_assign_stmt_516/type_cast_515_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 220
}
$module [setBit64] 
{
  $in reg:$int<64>
  // can point into  foreign( $void )
  pos:$int<8>
  // can point into  foreign( $void )
  value:$int<8>
  // can point into  foreign( $void )
  $out ret_val__:$int<64>
  // can point into  foreign( $void )
  // pipe-declarations for block %setBit64
  //  file prog.linked.opt.aa, line 224
  // pipe-declarations for block %setBit64%body
  //  file prog.linked.opt.aa, line 229
  // pipe-declarations for block %setBit64%body%
  //  file prog.linked.opt.aa, line 240
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_526] // Branch Block  file prog.linked.opt.aa, line 229
    {
      $P [branch_block_stmt_526__entry__]
      branch_block_stmt_526__entry__ <-| ($entry)
      $P [branch_block_stmt_526__exit__]
      branch_block_stmt_526__exit__ |-> ($exit)
      $P [assign_stmt_530_to_assign_stmt_567__entry__] 
      $P [assign_stmt_530_to_assign_stmt_567__exit__] 
      $P [return__]
      $P [merge_stmt_569__exit__] 
      ::[assign_stmt_530_to_assign_stmt_567] 
      {
        // 		iNsTr_0 := ($cast ($uint<64>) value )
        //  file prog.linked.opt.aa, line 231
        // Source expression
        // ($cast ($uint<64>) value )
        $T[type_cast_529_sample_start_] 
        $T[type_cast_529_sample_completed_] 
        $T[type_cast_529_update_start_] 
        $T[type_cast_529_update_completed_] 
        // value
        $T[R_value_528_sample_start_] 
        $T[R_value_528_sample_completed_] 
        $T[R_value_528_update_start_] 
        $T[R_value_528_update_completed_] 
        // reference to interface object
        R_value_528_sample_start_ <-& ($entry)
        R_value_528_sample_completed_ <-& (R_value_528_sample_start_)
        R_value_528_update_start_ <-& (R_value_528_sample_completed_)
        R_value_528_update_completed_ <-& (R_value_528_update_start_)
        type_cast_529_sample_start_ <-& (R_value_528_update_completed_)
        ;;[type_cast_529_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_529_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_529_sample_start_ &-> (type_cast_529_Sample)
        type_cast_529_sample_completed_ <-& (type_cast_529_Sample)
        type_cast_529_sample_completed_ &-> ($null)
        type_cast_529_update_start_ &-> (type_cast_529_Update)
        type_cast_529_update_completed_ <-& (type_cast_529_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		iNsTr_1 := ($cast ($uint<64>) pos )
        //  file prog.linked.opt.aa, line 232
        // Source expression
        // ($cast ($uint<64>) pos )
        $T[type_cast_533_sample_start_] 
        $T[type_cast_533_sample_completed_] 
        $T[type_cast_533_update_start_] 
        $T[type_cast_533_update_completed_] 
        // pos
        $T[R_pos_532_sample_start_] 
        $T[R_pos_532_sample_completed_] 
        $T[R_pos_532_update_start_] 
        $T[R_pos_532_update_completed_] 
        // reference to interface object
        R_pos_532_sample_start_ <-& ($entry)
        R_pos_532_sample_completed_ <-& (R_pos_532_sample_start_)
        R_pos_532_update_start_ <-& (R_pos_532_sample_completed_)
        R_pos_532_update_completed_ <-& (R_pos_532_update_start_)
        type_cast_533_sample_start_ <-& (R_pos_532_update_completed_)
        ;;[type_cast_533_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_533_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_533_sample_start_ &-> (type_cast_533_Sample)
        type_cast_533_sample_completed_ <-& (type_cast_533_Sample)
        type_cast_533_sample_completed_ &-> ($null)
        type_cast_533_update_start_ &-> (type_cast_533_Update)
        type_cast_533_update_completed_ <-& (type_cast_533_Update)
        // Target expression
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		iNsTr_2 := (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
        //  file prog.linked.opt.aa, line 233
        // Source expression
        // (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
        $T[AND_u64_u64_539_sample_start_] 
        $T[AND_u64_u64_539_sample_completed_] 
        $T[AND_u64_u64_539_update_start_] 
        $T[AND_u64_u64_539_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_536_sample_start_] 
        $T[R_iNsTr_0_536_sample_completed_] 
        $T[R_iNsTr_0_536_update_start_] 
        $T[R_iNsTr_0_536_update_completed_] 
        // implicit reference
        R_iNsTr_0_536_sample_start_ <-& (type_cast_529_update_completed_)
        R_iNsTr_0_536_sample_completed_ <-& (R_iNsTr_0_536_sample_start_)
        R_iNsTr_0_536_update_start_ <-& (R_iNsTr_0_536_sample_completed_)
        R_iNsTr_0_536_update_completed_ <-& (R_iNsTr_0_536_update_start_)
        AND_u64_u64_539_sample_start_ <-& (R_iNsTr_0_536_update_completed_)
        ;;[AND_u64_u64_539_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_539_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_539_sample_start_ &-> (AND_u64_u64_539_Sample)
        AND_u64_u64_539_sample_completed_ <-& (AND_u64_u64_539_Sample)
        AND_u64_u64_539_sample_completed_ &-> ($null)
        AND_u64_u64_539_update_start_ &-> (AND_u64_u64_539_Update)
        AND_u64_u64_539_update_completed_ <-& (AND_u64_u64_539_Update)
        // Target expression
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		iNsTr_3 := (iNsTr_2 << iNsTr_1)
        //  file prog.linked.opt.aa, line 234
        // Source expression
        // (iNsTr_2 << iNsTr_1)
        $T[SHL_u64_u64_544_sample_start_] 
        $T[SHL_u64_u64_544_sample_completed_] 
        $T[SHL_u64_u64_544_update_start_] 
        $T[SHL_u64_u64_544_update_completed_] 
        // iNsTr_2
        $T[R_iNsTr_2_542_sample_start_] 
        $T[R_iNsTr_2_542_sample_completed_] 
        $T[R_iNsTr_2_542_update_start_] 
        $T[R_iNsTr_2_542_update_completed_] 
        // implicit reference
        R_iNsTr_2_542_sample_start_ <-& (AND_u64_u64_539_update_completed_)
        R_iNsTr_2_542_sample_completed_ <-& (R_iNsTr_2_542_sample_start_)
        R_iNsTr_2_542_update_start_ <-& (R_iNsTr_2_542_sample_completed_)
        R_iNsTr_2_542_update_completed_ <-& (R_iNsTr_2_542_update_start_)
        // iNsTr_1
        $T[R_iNsTr_1_543_sample_start_] 
        $T[R_iNsTr_1_543_sample_completed_] 
        $T[R_iNsTr_1_543_update_start_] 
        $T[R_iNsTr_1_543_update_completed_] 
        // implicit reference
        R_iNsTr_1_543_sample_start_ <-& (type_cast_533_update_completed_)
        R_iNsTr_1_543_sample_completed_ <-& (R_iNsTr_1_543_sample_start_)
        R_iNsTr_1_543_update_start_ <-& (R_iNsTr_1_543_sample_completed_)
        R_iNsTr_1_543_update_completed_ <-& (R_iNsTr_1_543_update_start_)
        SHL_u64_u64_544_sample_start_ <-& (R_iNsTr_2_542_update_completed_)
        SHL_u64_u64_544_sample_start_ <-& (R_iNsTr_1_543_update_completed_)
        ;;[SHL_u64_u64_544_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_544_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_544_sample_start_ &-> (SHL_u64_u64_544_Sample)
        SHL_u64_u64_544_sample_completed_ <-& (SHL_u64_u64_544_Sample)
        SHL_u64_u64_544_sample_completed_ &-> ($null)
        SHL_u64_u64_544_update_start_ &-> (SHL_u64_u64_544_Update)
        SHL_u64_u64_544_update_completed_ <-& (SHL_u64_u64_544_Update)
        // Target expression
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
        //  file prog.linked.opt.aa, line 235
        // Source expression
        // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
        $T[SHL_u64_u64_550_sample_start_] 
        $T[SHL_u64_u64_550_sample_completed_] 
        $T[SHL_u64_u64_550_update_start_] 
        $T[SHL_u64_u64_550_update_completed_] 
        // iNsTr_1
        $T[R_iNsTr_1_549_sample_start_] 
        $T[R_iNsTr_1_549_sample_completed_] 
        $T[R_iNsTr_1_549_update_start_] 
        $T[R_iNsTr_1_549_update_completed_] 
        // implicit reference
        R_iNsTr_1_549_sample_start_ <-& (type_cast_533_update_completed_)
        R_iNsTr_1_549_sample_completed_ <-& (R_iNsTr_1_549_sample_start_)
        R_iNsTr_1_549_update_start_ <-& (R_iNsTr_1_549_sample_completed_)
        R_iNsTr_1_549_update_completed_ <-& (R_iNsTr_1_549_update_start_)
        SHL_u64_u64_550_sample_start_ <-& (R_iNsTr_1_549_update_completed_)
        ;;[SHL_u64_u64_550_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_550_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_550_sample_start_ &-> (SHL_u64_u64_550_Sample)
        SHL_u64_u64_550_sample_completed_ <-& (SHL_u64_u64_550_Sample)
        SHL_u64_u64_550_sample_completed_ &-> ($null)
        SHL_u64_u64_550_update_start_ &-> (SHL_u64_u64_550_Update)
        SHL_u64_u64_550_update_completed_ <-& (SHL_u64_u64_550_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		iNsTr_5 := (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 236
        // Source expression
        // (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
        $T[XOR_u64_u64_556_sample_start_] 
        $T[XOR_u64_u64_556_sample_completed_] 
        $T[XOR_u64_u64_556_update_start_] 
        $T[XOR_u64_u64_556_update_completed_] 
        // iNsTr_4
        $T[R_iNsTr_4_553_sample_start_] 
        $T[R_iNsTr_4_553_sample_completed_] 
        $T[R_iNsTr_4_553_update_start_] 
        $T[R_iNsTr_4_553_update_completed_] 
        // implicit reference
        R_iNsTr_4_553_sample_start_ <-& (SHL_u64_u64_550_update_completed_)
        R_iNsTr_4_553_sample_completed_ <-& (R_iNsTr_4_553_sample_start_)
        R_iNsTr_4_553_update_start_ <-& (R_iNsTr_4_553_sample_completed_)
        R_iNsTr_4_553_update_completed_ <-& (R_iNsTr_4_553_update_start_)
        XOR_u64_u64_556_sample_start_ <-& (R_iNsTr_4_553_update_completed_)
        ;;[XOR_u64_u64_556_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[XOR_u64_u64_556_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        XOR_u64_u64_556_sample_start_ &-> (XOR_u64_u64_556_Sample)
        XOR_u64_u64_556_sample_completed_ <-& (XOR_u64_u64_556_Sample)
        XOR_u64_u64_556_sample_completed_ &-> ($null)
        XOR_u64_u64_556_update_start_ &-> (XOR_u64_u64_556_Update)
        XOR_u64_u64_556_update_completed_ <-& (XOR_u64_u64_556_Update)
        // Target expression
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		iNsTr_6 := (iNsTr_5 & reg)
        //  file prog.linked.opt.aa, line 237
        // Source expression
        // (iNsTr_5 & reg)
        $T[AND_u64_u64_561_sample_start_] 
        $T[AND_u64_u64_561_sample_completed_] 
        $T[AND_u64_u64_561_update_start_] 
        $T[AND_u64_u64_561_update_completed_] 
        // iNsTr_5
        $T[R_iNsTr_5_559_sample_start_] 
        $T[R_iNsTr_5_559_sample_completed_] 
        $T[R_iNsTr_5_559_update_start_] 
        $T[R_iNsTr_5_559_update_completed_] 
        // implicit reference
        R_iNsTr_5_559_sample_start_ <-& (XOR_u64_u64_556_update_completed_)
        R_iNsTr_5_559_sample_completed_ <-& (R_iNsTr_5_559_sample_start_)
        R_iNsTr_5_559_update_start_ <-& (R_iNsTr_5_559_sample_completed_)
        R_iNsTr_5_559_update_completed_ <-& (R_iNsTr_5_559_update_start_)
        // reg
        $T[R_reg_560_sample_start_] 
        $T[R_reg_560_sample_completed_] 
        $T[R_reg_560_update_start_] 
        $T[R_reg_560_update_completed_] 
        // reference to interface object
        R_reg_560_sample_start_ <-& ($entry)
        R_reg_560_sample_completed_ <-& (R_reg_560_sample_start_)
        R_reg_560_update_start_ <-& (R_reg_560_sample_completed_)
        R_reg_560_update_completed_ <-& (R_reg_560_update_start_)
        AND_u64_u64_561_sample_start_ <-& (R_iNsTr_5_559_update_completed_)
        AND_u64_u64_561_sample_start_ <-& (R_reg_560_update_completed_)
        ;;[AND_u64_u64_561_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_561_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_561_sample_start_ &-> (AND_u64_u64_561_Sample)
        AND_u64_u64_561_sample_completed_ <-& (AND_u64_u64_561_Sample)
        AND_u64_u64_561_sample_completed_ &-> ($null)
        AND_u64_u64_561_update_start_ &-> (AND_u64_u64_561_Update)
        AND_u64_u64_561_update_completed_ <-& (AND_u64_u64_561_Update)
        // Target expression
        // (as target) iNsTr_6
        // iNsTr_6
        // implicit reference
        // 		ret_val__ := (iNsTr_6 | iNsTr_3)
        //  file prog.linked.opt.aa, line 238
        // Source expression
        // (iNsTr_6 | iNsTr_3)
        $T[OR_u64_u64_566_sample_start_] 
        $T[OR_u64_u64_566_sample_completed_] 
        $T[OR_u64_u64_566_update_start_] 
        $T[OR_u64_u64_566_update_completed_] 
        // iNsTr_6
        $T[R_iNsTr_6_564_sample_start_] 
        $T[R_iNsTr_6_564_sample_completed_] 
        $T[R_iNsTr_6_564_update_start_] 
        $T[R_iNsTr_6_564_update_completed_] 
        // implicit reference
        R_iNsTr_6_564_sample_start_ <-& (AND_u64_u64_561_update_completed_)
        R_iNsTr_6_564_sample_completed_ <-& (R_iNsTr_6_564_sample_start_)
        R_iNsTr_6_564_update_start_ <-& (R_iNsTr_6_564_sample_completed_)
        R_iNsTr_6_564_update_completed_ <-& (R_iNsTr_6_564_update_start_)
        // iNsTr_3
        $T[R_iNsTr_3_565_sample_start_] 
        $T[R_iNsTr_3_565_sample_completed_] 
        $T[R_iNsTr_3_565_update_start_] 
        $T[R_iNsTr_3_565_update_completed_] 
        // implicit reference
        R_iNsTr_3_565_sample_start_ <-& (SHL_u64_u64_544_update_completed_)
        R_iNsTr_3_565_sample_completed_ <-& (R_iNsTr_3_565_sample_start_)
        R_iNsTr_3_565_update_start_ <-& (R_iNsTr_3_565_sample_completed_)
        R_iNsTr_3_565_update_completed_ <-& (R_iNsTr_3_565_update_start_)
        OR_u64_u64_566_sample_start_ <-& (R_iNsTr_6_564_update_completed_)
        OR_u64_u64_566_sample_start_ <-& (R_iNsTr_3_565_update_completed_)
        ;;[OR_u64_u64_566_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u64_u64_566_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u64_u64_566_sample_start_ &-> (OR_u64_u64_566_Sample)
        OR_u64_u64_566_sample_completed_ <-& (OR_u64_u64_566_Sample)
        OR_u64_u64_566_sample_completed_ &-> ($null)
        OR_u64_u64_566_update_start_ &-> (OR_u64_u64_566_Update)
        OR_u64_u64_566_update_completed_ <-& (OR_u64_u64_566_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_530_to_assign_stmt_567__entry__ |-> (assign_stmt_530_to_assign_stmt_567)
      assign_stmt_530_to_assign_stmt_567__exit__ <-| (assign_stmt_530_to_assign_stmt_567)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 240
      //---------------------   merge statement  file prog.linked.opt.aa, line 240  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_569_PhiReqMerge] 
      merge_stmt_569_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_569_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_569_PhiReqMerge |-> (merge_stmt_569_PhiAck)
      merge_stmt_569__exit__  <-| (merge_stmt_569_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 240  --------------------------
      assign_stmt_530_to_assign_stmt_567__entry__ <-| (branch_block_stmt_526__entry__)
      return__ <-| (assign_stmt_530_to_assign_stmt_567__exit__)
      merge_stmt_569__exit__ |-> (branch_block_stmt_526__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setBit64%body%
    //  file prog.linked.opt.aa, line 240
    // constant-object-declarations for block %setBit64%body
    //  file prog.linked.opt.aa, line 229
    // constant-object-declarations for block %setBit64
    //  file prog.linked.opt.aa, line 224
    // constant-declarations for block %setBit64%body
    //  file prog.linked.opt.aa, line 229
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )
    $constant $W[type_cast_538_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000001// 1
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )
    $constant $W[type_cast_548_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000001// 1
    // ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_555_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // constant-declarations for block %setBit64%body%
    //  file prog.linked.opt.aa, line 240
    // block %setBit64%body
    //  file prog.linked.opt.aa, line 229
    // 		iNsTr_0 := ($cast ($uint<64>) value )
    //  file prog.linked.opt.aa, line 231
    // iNsTr_0
    $W[iNsTr_0_530] : $int<64>
    // 		iNsTr_1 := ($cast ($uint<64>) pos )
    //  file prog.linked.opt.aa, line 232
    // iNsTr_1
    $W[iNsTr_1_534] : $int<64>
    // 		iNsTr_2 := (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
    //  file prog.linked.opt.aa, line 233
    // iNsTr_2
    $W[iNsTr_2_540] : $int<64>
    // 		iNsTr_3 := (iNsTr_2 << iNsTr_1)
    //  file prog.linked.opt.aa, line 234
    // iNsTr_3
    $W[iNsTr_3_545] : $int<64>
    // 		iNsTr_4 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
    //  file prog.linked.opt.aa, line 235
    // iNsTr_4
    $W[iNsTr_4_551] : $int<64>
    // 		iNsTr_5 := (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 236
    // iNsTr_5
    $W[iNsTr_5_557] : $int<64>
    // 		iNsTr_6 := (iNsTr_5 & reg)
    //  file prog.linked.opt.aa, line 237
    // iNsTr_6
    $W[iNsTr_6_562] : $int<64>
    // 		ret_val__ := (iNsTr_6 | iNsTr_3)
    //  file prog.linked.opt.aa, line 238
    // ret_val__
    // datapath-instances for block %setBit64%body
    //  file prog.linked.opt.aa, line 229
    // 		iNsTr_0 := ($cast ($uint<64>) value )
    //  file prog.linked.opt.aa, line 231
    // ($cast ($uint<64>) value )
    # := [type_cast_529_inst] (value) (iNsTr_0_530) 
    $delay type_cast_529_inst 1
    // 		iNsTr_1 := ($cast ($uint<64>) pos )
    //  file prog.linked.opt.aa, line 232
    // ($cast ($uint<64>) pos )
    # := [type_cast_533_inst] (pos) (iNsTr_1_534) 
    $delay type_cast_533_inst 1
    // 		iNsTr_2 := (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
    //  file prog.linked.opt.aa, line 233
    // (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
    &[AND_u64_u64_539_inst] (iNsTr_0_530 type_cast_538_wire_constant) (iNsTr_2_540) 
    $delay AND_u64_u64_539_inst 1
    // 		iNsTr_3 := (iNsTr_2 << iNsTr_1)
    //  file prog.linked.opt.aa, line 234
    // (iNsTr_2 << iNsTr_1)
    <<[SHL_u64_u64_544_inst] (iNsTr_2_540 iNsTr_1_534) (iNsTr_3_545) 
    $delay SHL_u64_u64_544_inst 1
    // 		iNsTr_4 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
    //  file prog.linked.opt.aa, line 235
    // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
    <<[SHL_u64_u64_550_inst] (type_cast_548_wire_constant iNsTr_1_534) (iNsTr_4_551) 
    $delay SHL_u64_u64_550_inst 1
    // 		iNsTr_5 := (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 236
    // (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    ^[XOR_u64_u64_556_inst] (iNsTr_4_551 type_cast_555_wire_constant) (iNsTr_5_557) 
    $delay XOR_u64_u64_556_inst 1
    // 		iNsTr_6 := (iNsTr_5 & reg)
    //  file prog.linked.opt.aa, line 237
    // (iNsTr_5 & reg)
    &[AND_u64_u64_561_inst] (iNsTr_5_557 reg) (iNsTr_6_562) 
    $delay AND_u64_u64_561_inst 1
    // 		ret_val__ := (iNsTr_6 | iNsTr_3)
    //  file prog.linked.opt.aa, line 238
    // (iNsTr_6 | iNsTr_3)
    |[OR_u64_u64_566_inst] (iNsTr_6_562 iNsTr_3_545) (ret_val__) 
    $delay OR_u64_u64_566_inst 1
  }
  // end data-path
  // 		iNsTr_0 := ($cast ($uint<64>) value )
  //  file prog.linked.opt.aa, line 231
  // ($cast ($uint<64>) value )
  type_cast_529_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_529_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_529_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_529_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_529_Update/ca)
  // 		iNsTr_1 := ($cast ($uint<64>) pos )
  //  file prog.linked.opt.aa, line 232
  // ($cast ($uint<64>) pos )
  type_cast_533_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_533_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_533_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_533_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/type_cast_533_Update/ca)
  // 		iNsTr_2 := (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
  //  file prog.linked.opt.aa, line 233
  // (iNsTr_0 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ))
  AND_u64_u64_539_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_539_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_539_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_539_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_539_Update/ca)
  // 		iNsTr_3 := (iNsTr_2 << iNsTr_1)
  //  file prog.linked.opt.aa, line 234
  // (iNsTr_2 << iNsTr_1)
  SHL_u64_u64_544_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_544_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_544_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_544_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_544_Update/ca)
  // 		iNsTr_4 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
  //  file prog.linked.opt.aa, line 235
  // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) << iNsTr_1)
  SHL_u64_u64_550_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_550_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_550_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_550_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/SHL_u64_u64_550_Update/ca)
  // 		iNsTr_5 := (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 236
  // (iNsTr_4 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
  XOR_u64_u64_556_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/XOR_u64_u64_556_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/XOR_u64_u64_556_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/XOR_u64_u64_556_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/XOR_u64_u64_556_Update/ca)
  // 		iNsTr_6 := (iNsTr_5 & reg)
  //  file prog.linked.opt.aa, line 237
  // (iNsTr_5 & reg)
  AND_u64_u64_561_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_561_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_561_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_561_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/AND_u64_u64_561_Update/ca)
  // 		ret_val__ := (iNsTr_6 | iNsTr_3)
  //  file prog.linked.opt.aa, line 238
  // (iNsTr_6 | iNsTr_3)
  OR_u64_u64_566_inst <=> (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/OR_u64_u64_566_Sample/rr branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/OR_u64_u64_566_Update/cr) (branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/OR_u64_u64_566_Sample/ra branch_block_stmt_526/assign_stmt_530_to_assign_stmt_567/OR_u64_u64_566_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 240
}
$module [setSlice64] 
{
  $in reg:$int<64>
  // can point into  foreign( $void )
  h:$int<8>
  // can point into  foreign( $void )
  l:$int<8>
  // can point into  foreign( $void )
  value:$int<64>
  // can point into  foreign( $void )
  $out ret_val__:$int<64>
  // can point into  foreign( $void )
  // pipe-declarations for block %setSlice64
  //  file prog.linked.opt.aa, line 244
  // pipe-declarations for block %setSlice64%body
  //  file prog.linked.opt.aa, line 249
  // pipe-declarations for block %setSlice64%body%
  //  file prog.linked.opt.aa, line 264
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_578] // Branch Block  file prog.linked.opt.aa, line 249
    {
      $P [branch_block_stmt_578__entry__]
      branch_block_stmt_578__entry__ <-| ($entry)
      $P [branch_block_stmt_578__exit__]
      branch_block_stmt_578__exit__ |-> ($exit)
      $P [assign_stmt_582_to_assign_stmt_640__entry__] 
      $P [assign_stmt_582_to_assign_stmt_640__exit__] 
      $P [return__]
      $P [merge_stmt_642__exit__] 
      ::[assign_stmt_582_to_assign_stmt_640] 
      {
        // 		iNsTr_0 := ($cast ($uint<64>) h )
        //  file prog.linked.opt.aa, line 251
        // Source expression
        // ($cast ($uint<64>) h )
        $T[type_cast_581_sample_start_] 
        $T[type_cast_581_sample_completed_] 
        $T[type_cast_581_update_start_] 
        $T[type_cast_581_update_completed_] 
        // h
        $T[R_h_580_sample_start_] 
        $T[R_h_580_sample_completed_] 
        $T[R_h_580_update_start_] 
        $T[R_h_580_update_completed_] 
        // reference to interface object
        R_h_580_sample_start_ <-& ($entry)
        R_h_580_sample_completed_ <-& (R_h_580_sample_start_)
        R_h_580_update_start_ <-& (R_h_580_sample_completed_)
        R_h_580_update_completed_ <-& (R_h_580_update_start_)
        type_cast_581_sample_start_ <-& (R_h_580_update_completed_)
        ;;[type_cast_581_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_581_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_581_sample_start_ &-> (type_cast_581_Sample)
        type_cast_581_sample_completed_ <-& (type_cast_581_Sample)
        type_cast_581_sample_completed_ &-> ($null)
        type_cast_581_update_start_ &-> (type_cast_581_Update)
        type_cast_581_update_completed_ <-& (type_cast_581_Update)
        // Target expression
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		iNsTr_1 := ($cast ($uint<64>) l )
        //  file prog.linked.opt.aa, line 252
        // Source expression
        // ($cast ($uint<64>) l )
        $T[type_cast_585_sample_start_] 
        $T[type_cast_585_sample_completed_] 
        $T[type_cast_585_update_start_] 
        $T[type_cast_585_update_completed_] 
        // l
        $T[R_l_584_sample_start_] 
        $T[R_l_584_sample_completed_] 
        $T[R_l_584_update_start_] 
        $T[R_l_584_update_completed_] 
        // reference to interface object
        R_l_584_sample_start_ <-& ($entry)
        R_l_584_sample_completed_ <-& (R_l_584_sample_start_)
        R_l_584_update_start_ <-& (R_l_584_sample_completed_)
        R_l_584_update_completed_ <-& (R_l_584_update_start_)
        type_cast_585_sample_start_ <-& (R_l_584_update_completed_)
        ;;[type_cast_585_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_585_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_585_sample_start_ &-> (type_cast_585_Sample)
        type_cast_585_sample_completed_ <-& (type_cast_585_Sample)
        type_cast_585_sample_completed_ &-> ($null)
        type_cast_585_update_start_ &-> (type_cast_585_Update)
        type_cast_585_update_completed_ <-& (type_cast_585_Update)
        // Target expression
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		iNsTr_2 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        //  file prog.linked.opt.aa, line 253
        // Source expression
        // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
        $T[SUB_u64_u64_591_sample_start_] 
        $T[SUB_u64_u64_591_sample_completed_] 
        $T[SUB_u64_u64_591_update_start_] 
        $T[SUB_u64_u64_591_update_completed_] 
        // iNsTr_0
        $T[R_iNsTr_0_590_sample_start_] 
        $T[R_iNsTr_0_590_sample_completed_] 
        $T[R_iNsTr_0_590_update_start_] 
        $T[R_iNsTr_0_590_update_completed_] 
        // implicit reference
        R_iNsTr_0_590_sample_start_ <-& (type_cast_581_update_completed_)
        R_iNsTr_0_590_sample_completed_ <-& (R_iNsTr_0_590_sample_start_)
        R_iNsTr_0_590_update_start_ <-& (R_iNsTr_0_590_sample_completed_)
        R_iNsTr_0_590_update_completed_ <-& (R_iNsTr_0_590_update_start_)
        SUB_u64_u64_591_sample_start_ <-& (R_iNsTr_0_590_update_completed_)
        ;;[SUB_u64_u64_591_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u64_u64_591_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u64_u64_591_sample_start_ &-> (SUB_u64_u64_591_Sample)
        SUB_u64_u64_591_sample_completed_ <-& (SUB_u64_u64_591_Sample)
        SUB_u64_u64_591_sample_completed_ &-> ($null)
        SUB_u64_u64_591_update_start_ &-> (SUB_u64_u64_591_Update)
        SUB_u64_u64_591_update_completed_ <-& (SUB_u64_u64_591_Update)
        // Target expression
        // (as target) iNsTr_2
        // iNsTr_2
        // implicit reference
        // 		iNsTr_3 := (iNsTr_2 + iNsTr_1)
        //  file prog.linked.opt.aa, line 254
        // Source expression
        // (iNsTr_2 + iNsTr_1)
        $T[ADD_u64_u64_596_sample_start_] 
        $T[ADD_u64_u64_596_sample_completed_] 
        $T[ADD_u64_u64_596_update_start_] 
        $T[ADD_u64_u64_596_update_completed_] 
        // iNsTr_2
        $T[R_iNsTr_2_594_sample_start_] 
        $T[R_iNsTr_2_594_sample_completed_] 
        $T[R_iNsTr_2_594_update_start_] 
        $T[R_iNsTr_2_594_update_completed_] 
        // implicit reference
        R_iNsTr_2_594_sample_start_ <-& (SUB_u64_u64_591_update_completed_)
        R_iNsTr_2_594_sample_completed_ <-& (R_iNsTr_2_594_sample_start_)
        R_iNsTr_2_594_update_start_ <-& (R_iNsTr_2_594_sample_completed_)
        R_iNsTr_2_594_update_completed_ <-& (R_iNsTr_2_594_update_start_)
        // iNsTr_1
        $T[R_iNsTr_1_595_sample_start_] 
        $T[R_iNsTr_1_595_sample_completed_] 
        $T[R_iNsTr_1_595_update_start_] 
        $T[R_iNsTr_1_595_update_completed_] 
        // implicit reference
        R_iNsTr_1_595_sample_start_ <-& (type_cast_585_update_completed_)
        R_iNsTr_1_595_sample_completed_ <-& (R_iNsTr_1_595_sample_start_)
        R_iNsTr_1_595_update_start_ <-& (R_iNsTr_1_595_sample_completed_)
        R_iNsTr_1_595_update_completed_ <-& (R_iNsTr_1_595_update_start_)
        ADD_u64_u64_596_sample_start_ <-& (R_iNsTr_2_594_update_completed_)
        ADD_u64_u64_596_sample_start_ <-& (R_iNsTr_1_595_update_completed_)
        ;;[ADD_u64_u64_596_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u64_u64_596_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u64_u64_596_sample_start_ &-> (ADD_u64_u64_596_Sample)
        ADD_u64_u64_596_sample_completed_ <-& (ADD_u64_u64_596_Sample)
        ADD_u64_u64_596_sample_completed_ &-> ($null)
        ADD_u64_u64_596_update_start_ &-> (ADD_u64_u64_596_Update)
        ADD_u64_u64_596_update_completed_ <-& (ADD_u64_u64_596_Update)
        // Target expression
        // (as target) iNsTr_3
        // iNsTr_3
        // implicit reference
        // 		iNsTr_4 := (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 255
        // Source expression
        // (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
        $T[AND_u64_u64_602_sample_start_] 
        $T[AND_u64_u64_602_sample_completed_] 
        $T[AND_u64_u64_602_update_start_] 
        $T[AND_u64_u64_602_update_completed_] 
        // iNsTr_3
        $T[R_iNsTr_3_599_sample_start_] 
        $T[R_iNsTr_3_599_sample_completed_] 
        $T[R_iNsTr_3_599_update_start_] 
        $T[R_iNsTr_3_599_update_completed_] 
        // implicit reference
        R_iNsTr_3_599_sample_start_ <-& (ADD_u64_u64_596_update_completed_)
        R_iNsTr_3_599_sample_completed_ <-& (R_iNsTr_3_599_sample_start_)
        R_iNsTr_3_599_update_start_ <-& (R_iNsTr_3_599_sample_completed_)
        R_iNsTr_3_599_update_completed_ <-& (R_iNsTr_3_599_update_start_)
        AND_u64_u64_602_sample_start_ <-& (R_iNsTr_3_599_update_completed_)
        ;;[AND_u64_u64_602_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_602_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_602_sample_start_ &-> (AND_u64_u64_602_Sample)
        AND_u64_u64_602_sample_completed_ <-& (AND_u64_u64_602_Sample)
        AND_u64_u64_602_sample_completed_ &-> ($null)
        AND_u64_u64_602_update_start_ &-> (AND_u64_u64_602_Update)
        AND_u64_u64_602_update_completed_ <-& (AND_u64_u64_602_Update)
        // Target expression
        // (as target) iNsTr_4
        // iNsTr_4
        // implicit reference
        // 		iNsTr_5 := (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
        //  file prog.linked.opt.aa, line 256
        // Source expression
        // (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
        $T[LSHR_u64_u64_608_sample_start_] 
        $T[LSHR_u64_u64_608_sample_completed_] 
        $T[LSHR_u64_u64_608_update_start_] 
        $T[LSHR_u64_u64_608_update_completed_] 
        // iNsTr_4
        $T[R_iNsTr_4_607_sample_start_] 
        $T[R_iNsTr_4_607_sample_completed_] 
        $T[R_iNsTr_4_607_update_start_] 
        $T[R_iNsTr_4_607_update_completed_] 
        // implicit reference
        R_iNsTr_4_607_sample_start_ <-& (AND_u64_u64_602_update_completed_)
        R_iNsTr_4_607_sample_completed_ <-& (R_iNsTr_4_607_sample_start_)
        R_iNsTr_4_607_update_start_ <-& (R_iNsTr_4_607_sample_completed_)
        R_iNsTr_4_607_update_completed_ <-& (R_iNsTr_4_607_update_start_)
        LSHR_u64_u64_608_sample_start_ <-& (R_iNsTr_4_607_update_completed_)
        ;;[LSHR_u64_u64_608_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[LSHR_u64_u64_608_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        LSHR_u64_u64_608_sample_start_ &-> (LSHR_u64_u64_608_Sample)
        LSHR_u64_u64_608_sample_completed_ <-& (LSHR_u64_u64_608_Sample)
        LSHR_u64_u64_608_sample_completed_ &-> ($null)
        LSHR_u64_u64_608_update_start_ &-> (LSHR_u64_u64_608_Update)
        LSHR_u64_u64_608_update_completed_ <-& (LSHR_u64_u64_608_Update)
        // Target expression
        // (as target) iNsTr_5
        // iNsTr_5
        // implicit reference
        // 		iNsTr_6 := (iNsTr_5 & value)
        //  file prog.linked.opt.aa, line 257
        // Source expression
        // (iNsTr_5 & value)
        $T[AND_u64_u64_613_sample_start_] 
        $T[AND_u64_u64_613_sample_completed_] 
        $T[AND_u64_u64_613_update_start_] 
        $T[AND_u64_u64_613_update_completed_] 
        // iNsTr_5
        $T[R_iNsTr_5_611_sample_start_] 
        $T[R_iNsTr_5_611_sample_completed_] 
        $T[R_iNsTr_5_611_update_start_] 
        $T[R_iNsTr_5_611_update_completed_] 
        // implicit reference
        R_iNsTr_5_611_sample_start_ <-& (LSHR_u64_u64_608_update_completed_)
        R_iNsTr_5_611_sample_completed_ <-& (R_iNsTr_5_611_sample_start_)
        R_iNsTr_5_611_update_start_ <-& (R_iNsTr_5_611_sample_completed_)
        R_iNsTr_5_611_update_completed_ <-& (R_iNsTr_5_611_update_start_)
        // value
        $T[R_value_612_sample_start_] 
        $T[R_value_612_sample_completed_] 
        $T[R_value_612_update_start_] 
        $T[R_value_612_update_completed_] 
        // reference to interface object
        R_value_612_sample_start_ <-& ($entry)
        R_value_612_sample_completed_ <-& (R_value_612_sample_start_)
        R_value_612_update_start_ <-& (R_value_612_sample_completed_)
        R_value_612_update_completed_ <-& (R_value_612_update_start_)
        AND_u64_u64_613_sample_start_ <-& (R_iNsTr_5_611_update_completed_)
        AND_u64_u64_613_sample_start_ <-& (R_value_612_update_completed_)
        ;;[AND_u64_u64_613_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_613_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_613_sample_start_ &-> (AND_u64_u64_613_Sample)
        AND_u64_u64_613_sample_completed_ <-& (AND_u64_u64_613_Sample)
        AND_u64_u64_613_sample_completed_ &-> ($null)
        AND_u64_u64_613_update_start_ &-> (AND_u64_u64_613_Update)
        AND_u64_u64_613_update_completed_ <-& (AND_u64_u64_613_Update)
        // Target expression
        // (as target) iNsTr_6
        // iNsTr_6
        // implicit reference
        // 		iNsTr_7 := (iNsTr_6 << iNsTr_1)
        //  file prog.linked.opt.aa, line 258
        // Source expression
        // (iNsTr_6 << iNsTr_1)
        $T[SHL_u64_u64_618_sample_start_] 
        $T[SHL_u64_u64_618_sample_completed_] 
        $T[SHL_u64_u64_618_update_start_] 
        $T[SHL_u64_u64_618_update_completed_] 
        // iNsTr_6
        $T[R_iNsTr_6_616_sample_start_] 
        $T[R_iNsTr_6_616_sample_completed_] 
        $T[R_iNsTr_6_616_update_start_] 
        $T[R_iNsTr_6_616_update_completed_] 
        // implicit reference
        R_iNsTr_6_616_sample_start_ <-& (AND_u64_u64_613_update_completed_)
        R_iNsTr_6_616_sample_completed_ <-& (R_iNsTr_6_616_sample_start_)
        R_iNsTr_6_616_update_start_ <-& (R_iNsTr_6_616_sample_completed_)
        R_iNsTr_6_616_update_completed_ <-& (R_iNsTr_6_616_update_start_)
        // iNsTr_1
        $T[R_iNsTr_1_617_sample_start_] 
        $T[R_iNsTr_1_617_sample_completed_] 
        $T[R_iNsTr_1_617_update_start_] 
        $T[R_iNsTr_1_617_update_completed_] 
        // implicit reference
        R_iNsTr_1_617_sample_start_ <-& (type_cast_585_update_completed_)
        R_iNsTr_1_617_sample_completed_ <-& (R_iNsTr_1_617_sample_start_)
        R_iNsTr_1_617_update_start_ <-& (R_iNsTr_1_617_sample_completed_)
        R_iNsTr_1_617_update_completed_ <-& (R_iNsTr_1_617_update_start_)
        SHL_u64_u64_618_sample_start_ <-& (R_iNsTr_6_616_update_completed_)
        SHL_u64_u64_618_sample_start_ <-& (R_iNsTr_1_617_update_completed_)
        ;;[SHL_u64_u64_618_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_618_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_618_sample_start_ &-> (SHL_u64_u64_618_Sample)
        SHL_u64_u64_618_sample_completed_ <-& (SHL_u64_u64_618_Sample)
        SHL_u64_u64_618_sample_completed_ &-> ($null)
        SHL_u64_u64_618_update_start_ &-> (SHL_u64_u64_618_Update)
        SHL_u64_u64_618_update_completed_ <-& (SHL_u64_u64_618_Update)
        // Target expression
        // (as target) iNsTr_7
        // iNsTr_7
        // implicit reference
        // 		iNsTr_8 := (iNsTr_5 << iNsTr_1)
        //  file prog.linked.opt.aa, line 259
        // Source expression
        // (iNsTr_5 << iNsTr_1)
        $T[SHL_u64_u64_623_sample_start_] 
        $T[SHL_u64_u64_623_sample_completed_] 
        $T[SHL_u64_u64_623_update_start_] 
        $T[SHL_u64_u64_623_update_completed_] 
        // iNsTr_5
        $T[R_iNsTr_5_621_sample_start_] 
        $T[R_iNsTr_5_621_sample_completed_] 
        $T[R_iNsTr_5_621_update_start_] 
        $T[R_iNsTr_5_621_update_completed_] 
        // implicit reference
        R_iNsTr_5_621_sample_start_ <-& (LSHR_u64_u64_608_update_completed_)
        R_iNsTr_5_621_sample_completed_ <-& (R_iNsTr_5_621_sample_start_)
        R_iNsTr_5_621_update_start_ <-& (R_iNsTr_5_621_sample_completed_)
        R_iNsTr_5_621_update_completed_ <-& (R_iNsTr_5_621_update_start_)
        // iNsTr_1
        $T[R_iNsTr_1_622_sample_start_] 
        $T[R_iNsTr_1_622_sample_completed_] 
        $T[R_iNsTr_1_622_update_start_] 
        $T[R_iNsTr_1_622_update_completed_] 
        // implicit reference
        R_iNsTr_1_622_sample_start_ <-& (type_cast_585_update_completed_)
        R_iNsTr_1_622_sample_completed_ <-& (R_iNsTr_1_622_sample_start_)
        R_iNsTr_1_622_update_start_ <-& (R_iNsTr_1_622_sample_completed_)
        R_iNsTr_1_622_update_completed_ <-& (R_iNsTr_1_622_update_start_)
        SHL_u64_u64_623_sample_start_ <-& (R_iNsTr_5_621_update_completed_)
        SHL_u64_u64_623_sample_start_ <-& (R_iNsTr_1_622_update_completed_)
        ;;[SHL_u64_u64_623_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u64_u64_623_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u64_u64_623_sample_start_ &-> (SHL_u64_u64_623_Sample)
        SHL_u64_u64_623_sample_completed_ <-& (SHL_u64_u64_623_Sample)
        SHL_u64_u64_623_sample_completed_ &-> ($null)
        SHL_u64_u64_623_update_start_ &-> (SHL_u64_u64_623_Update)
        SHL_u64_u64_623_update_completed_ <-& (SHL_u64_u64_623_Update)
        // Target expression
        // (as target) iNsTr_8
        // iNsTr_8
        // implicit reference
        // 		iNsTr_9 := (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
        //  file prog.linked.opt.aa, line 260
        // Source expression
        // (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
        $T[XOR_u64_u64_629_sample_start_] 
        $T[XOR_u64_u64_629_sample_completed_] 
        $T[XOR_u64_u64_629_update_start_] 
        $T[XOR_u64_u64_629_update_completed_] 
        // iNsTr_8
        $T[R_iNsTr_8_626_sample_start_] 
        $T[R_iNsTr_8_626_sample_completed_] 
        $T[R_iNsTr_8_626_update_start_] 
        $T[R_iNsTr_8_626_update_completed_] 
        // implicit reference
        R_iNsTr_8_626_sample_start_ <-& (SHL_u64_u64_623_update_completed_)
        R_iNsTr_8_626_sample_completed_ <-& (R_iNsTr_8_626_sample_start_)
        R_iNsTr_8_626_update_start_ <-& (R_iNsTr_8_626_sample_completed_)
        R_iNsTr_8_626_update_completed_ <-& (R_iNsTr_8_626_update_start_)
        XOR_u64_u64_629_sample_start_ <-& (R_iNsTr_8_626_update_completed_)
        ;;[XOR_u64_u64_629_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[XOR_u64_u64_629_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        XOR_u64_u64_629_sample_start_ &-> (XOR_u64_u64_629_Sample)
        XOR_u64_u64_629_sample_completed_ <-& (XOR_u64_u64_629_Sample)
        XOR_u64_u64_629_sample_completed_ &-> ($null)
        XOR_u64_u64_629_update_start_ &-> (XOR_u64_u64_629_Update)
        XOR_u64_u64_629_update_completed_ <-& (XOR_u64_u64_629_Update)
        // Target expression
        // (as target) iNsTr_9
        // iNsTr_9
        // implicit reference
        // 		iNsTr_10 := (iNsTr_9 & reg)
        //  file prog.linked.opt.aa, line 261
        // Source expression
        // (iNsTr_9 & reg)
        $T[AND_u64_u64_634_sample_start_] 
        $T[AND_u64_u64_634_sample_completed_] 
        $T[AND_u64_u64_634_update_start_] 
        $T[AND_u64_u64_634_update_completed_] 
        // iNsTr_9
        $T[R_iNsTr_9_632_sample_start_] 
        $T[R_iNsTr_9_632_sample_completed_] 
        $T[R_iNsTr_9_632_update_start_] 
        $T[R_iNsTr_9_632_update_completed_] 
        // implicit reference
        R_iNsTr_9_632_sample_start_ <-& (XOR_u64_u64_629_update_completed_)
        R_iNsTr_9_632_sample_completed_ <-& (R_iNsTr_9_632_sample_start_)
        R_iNsTr_9_632_update_start_ <-& (R_iNsTr_9_632_sample_completed_)
        R_iNsTr_9_632_update_completed_ <-& (R_iNsTr_9_632_update_start_)
        // reg
        $T[R_reg_633_sample_start_] 
        $T[R_reg_633_sample_completed_] 
        $T[R_reg_633_update_start_] 
        $T[R_reg_633_update_completed_] 
        // reference to interface object
        R_reg_633_sample_start_ <-& ($entry)
        R_reg_633_sample_completed_ <-& (R_reg_633_sample_start_)
        R_reg_633_update_start_ <-& (R_reg_633_sample_completed_)
        R_reg_633_update_completed_ <-& (R_reg_633_update_start_)
        AND_u64_u64_634_sample_start_ <-& (R_iNsTr_9_632_update_completed_)
        AND_u64_u64_634_sample_start_ <-& (R_reg_633_update_completed_)
        ;;[AND_u64_u64_634_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u64_u64_634_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u64_u64_634_sample_start_ &-> (AND_u64_u64_634_Sample)
        AND_u64_u64_634_sample_completed_ <-& (AND_u64_u64_634_Sample)
        AND_u64_u64_634_sample_completed_ &-> ($null)
        AND_u64_u64_634_update_start_ &-> (AND_u64_u64_634_Update)
        AND_u64_u64_634_update_completed_ <-& (AND_u64_u64_634_Update)
        // Target expression
        // (as target) iNsTr_10
        // iNsTr_10
        // implicit reference
        // 		ret_val__ := (iNsTr_10 | iNsTr_7)
        //  file prog.linked.opt.aa, line 262
        // Source expression
        // (iNsTr_10 | iNsTr_7)
        $T[OR_u64_u64_639_sample_start_] 
        $T[OR_u64_u64_639_sample_completed_] 
        $T[OR_u64_u64_639_update_start_] 
        $T[OR_u64_u64_639_update_completed_] 
        // iNsTr_10
        $T[R_iNsTr_10_637_sample_start_] 
        $T[R_iNsTr_10_637_sample_completed_] 
        $T[R_iNsTr_10_637_update_start_] 
        $T[R_iNsTr_10_637_update_completed_] 
        // implicit reference
        R_iNsTr_10_637_sample_start_ <-& (AND_u64_u64_634_update_completed_)
        R_iNsTr_10_637_sample_completed_ <-& (R_iNsTr_10_637_sample_start_)
        R_iNsTr_10_637_update_start_ <-& (R_iNsTr_10_637_sample_completed_)
        R_iNsTr_10_637_update_completed_ <-& (R_iNsTr_10_637_update_start_)
        // iNsTr_7
        $T[R_iNsTr_7_638_sample_start_] 
        $T[R_iNsTr_7_638_sample_completed_] 
        $T[R_iNsTr_7_638_update_start_] 
        $T[R_iNsTr_7_638_update_completed_] 
        // implicit reference
        R_iNsTr_7_638_sample_start_ <-& (SHL_u64_u64_618_update_completed_)
        R_iNsTr_7_638_sample_completed_ <-& (R_iNsTr_7_638_sample_start_)
        R_iNsTr_7_638_update_start_ <-& (R_iNsTr_7_638_sample_completed_)
        R_iNsTr_7_638_update_completed_ <-& (R_iNsTr_7_638_update_start_)
        OR_u64_u64_639_sample_start_ <-& (R_iNsTr_10_637_update_completed_)
        OR_u64_u64_639_sample_start_ <-& (R_iNsTr_7_638_update_completed_)
        ;;[OR_u64_u64_639_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u64_u64_639_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u64_u64_639_sample_start_ &-> (OR_u64_u64_639_Sample)
        OR_u64_u64_639_sample_completed_ <-& (OR_u64_u64_639_Sample)
        OR_u64_u64_639_sample_completed_ &-> ($null)
        OR_u64_u64_639_update_start_ &-> (OR_u64_u64_639_Update)
        OR_u64_u64_639_update_completed_ <-& (OR_u64_u64_639_Update)
        // Target expression
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      assign_stmt_582_to_assign_stmt_640__entry__ |-> (assign_stmt_582_to_assign_stmt_640)
      assign_stmt_582_to_assign_stmt_640__exit__ <-| (assign_stmt_582_to_assign_stmt_640)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 264
      //---------------------   merge statement  file prog.linked.opt.aa, line 264  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_642_PhiReqMerge] 
      merge_stmt_642_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_642_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_642_PhiReqMerge |-> (merge_stmt_642_PhiAck)
      merge_stmt_642__exit__  <-| (merge_stmt_642_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 264  --------------------------
      assign_stmt_582_to_assign_stmt_640__entry__ <-| (branch_block_stmt_578__entry__)
      return__ <-| (assign_stmt_582_to_assign_stmt_640__exit__)
      merge_stmt_642__exit__ |-> (branch_block_stmt_578__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setSlice64%body%
    //  file prog.linked.opt.aa, line 264
    // constant-object-declarations for block %setSlice64%body
    //  file prog.linked.opt.aa, line 249
    // constant-object-declarations for block %setSlice64
    //  file prog.linked.opt.aa, line 244
    // constant-declarations for block %setSlice64%body
    //  file prog.linked.opt.aa, line 249
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  )
    $constant $W[type_cast_589_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111111// 63
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  )
    $constant $W[type_cast_601_wire_constant] : $int<64> := _b0000000000000000000000000000000011111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_606_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  )
    $constant $W[type_cast_628_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // constant-declarations for block %setSlice64%body%
    //  file prog.linked.opt.aa, line 264
    // block %setSlice64%body
    //  file prog.linked.opt.aa, line 249
    // 		iNsTr_0 := ($cast ($uint<64>) h )
    //  file prog.linked.opt.aa, line 251
    // iNsTr_0
    $W[iNsTr_0_582] : $int<64>
    // 		iNsTr_1 := ($cast ($uint<64>) l )
    //  file prog.linked.opt.aa, line 252
    // iNsTr_1
    $W[iNsTr_1_586] : $int<64>
    // 		iNsTr_2 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 253
    // iNsTr_2
    $W[iNsTr_2_592] : $int<64>
    // 		iNsTr_3 := (iNsTr_2 + iNsTr_1)
    //  file prog.linked.opt.aa, line 254
    // iNsTr_3
    $W[iNsTr_3_597] : $int<64>
    // 		iNsTr_4 := (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 255
    // iNsTr_4
    $W[iNsTr_4_603] : $int<64>
    // 		iNsTr_5 := (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
    //  file prog.linked.opt.aa, line 256
    // iNsTr_5
    $W[iNsTr_5_609] : $int<64>
    // 		iNsTr_6 := (iNsTr_5 & value)
    //  file prog.linked.opt.aa, line 257
    // iNsTr_6
    $W[iNsTr_6_614] : $int<64>
    // 		iNsTr_7 := (iNsTr_6 << iNsTr_1)
    //  file prog.linked.opt.aa, line 258
    // iNsTr_7
    $W[iNsTr_7_619] : $int<64>
    // 		iNsTr_8 := (iNsTr_5 << iNsTr_1)
    //  file prog.linked.opt.aa, line 259
    // iNsTr_8
    $W[iNsTr_8_624] : $int<64>
    // 		iNsTr_9 := (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 260
    // iNsTr_9
    $W[iNsTr_9_630] : $int<64>
    // 		iNsTr_10 := (iNsTr_9 & reg)
    //  file prog.linked.opt.aa, line 261
    // iNsTr_10
    $W[iNsTr_10_635] : $int<64>
    // 		ret_val__ := (iNsTr_10 | iNsTr_7)
    //  file prog.linked.opt.aa, line 262
    // ret_val__
    // datapath-instances for block %setSlice64%body
    //  file prog.linked.opt.aa, line 249
    // 		iNsTr_0 := ($cast ($uint<64>) h )
    //  file prog.linked.opt.aa, line 251
    // ($cast ($uint<64>) h )
    # := [type_cast_581_inst] (h) (iNsTr_0_582) 
    $delay type_cast_581_inst 1
    // 		iNsTr_1 := ($cast ($uint<64>) l )
    //  file prog.linked.opt.aa, line 252
    // ($cast ($uint<64>) l )
    # := [type_cast_585_inst] (l) (iNsTr_1_586) 
    $delay type_cast_585_inst 1
    // 		iNsTr_2 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    //  file prog.linked.opt.aa, line 253
    // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
    -[SUB_u64_u64_591_inst] (type_cast_589_wire_constant iNsTr_0_582) (iNsTr_2_592) 
    $delay SUB_u64_u64_591_inst 1
    // 		iNsTr_3 := (iNsTr_2 + iNsTr_1)
    //  file prog.linked.opt.aa, line 254
    // (iNsTr_2 + iNsTr_1)
    +[ADD_u64_u64_596_inst] (iNsTr_2_592 iNsTr_1_586) (iNsTr_3_597) 
    $delay ADD_u64_u64_596_inst 1
    // 		iNsTr_4 := (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 255
    // (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
    &[AND_u64_u64_602_inst] (iNsTr_3_597 type_cast_601_wire_constant) (iNsTr_4_603) 
    $delay AND_u64_u64_602_inst 1
    // 		iNsTr_5 := (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
    //  file prog.linked.opt.aa, line 256
    // (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
    >>[LSHR_u64_u64_608_inst] (type_cast_606_wire_constant iNsTr_4_603) (iNsTr_5_609) 
    $delay LSHR_u64_u64_608_inst 1
    // 		iNsTr_6 := (iNsTr_5 & value)
    //  file prog.linked.opt.aa, line 257
    // (iNsTr_5 & value)
    &[AND_u64_u64_613_inst] (iNsTr_5_609 value) (iNsTr_6_614) 
    $delay AND_u64_u64_613_inst 1
    // 		iNsTr_7 := (iNsTr_6 << iNsTr_1)
    //  file prog.linked.opt.aa, line 258
    // (iNsTr_6 << iNsTr_1)
    <<[SHL_u64_u64_618_inst] (iNsTr_6_614 iNsTr_1_586) (iNsTr_7_619) 
    $delay SHL_u64_u64_618_inst 1
    // 		iNsTr_8 := (iNsTr_5 << iNsTr_1)
    //  file prog.linked.opt.aa, line 259
    // (iNsTr_5 << iNsTr_1)
    <<[SHL_u64_u64_623_inst] (iNsTr_5_609 iNsTr_1_586) (iNsTr_8_624) 
    $delay SHL_u64_u64_623_inst 1
    // 		iNsTr_9 := (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    //  file prog.linked.opt.aa, line 260
    // (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
    ^[XOR_u64_u64_629_inst] (iNsTr_8_624 type_cast_628_wire_constant) (iNsTr_9_630) 
    $delay XOR_u64_u64_629_inst 1
    // 		iNsTr_10 := (iNsTr_9 & reg)
    //  file prog.linked.opt.aa, line 261
    // (iNsTr_9 & reg)
    &[AND_u64_u64_634_inst] (iNsTr_9_630 reg) (iNsTr_10_635) 
    $delay AND_u64_u64_634_inst 1
    // 		ret_val__ := (iNsTr_10 | iNsTr_7)
    //  file prog.linked.opt.aa, line 262
    // (iNsTr_10 | iNsTr_7)
    |[OR_u64_u64_639_inst] (iNsTr_10_635 iNsTr_7_619) (ret_val__) 
    $delay OR_u64_u64_639_inst 1
  }
  // end data-path
  // 		iNsTr_0 := ($cast ($uint<64>) h )
  //  file prog.linked.opt.aa, line 251
  // ($cast ($uint<64>) h )
  type_cast_581_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_581_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_581_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_581_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_581_Update/ca)
  // 		iNsTr_1 := ($cast ($uint<64>) l )
  //  file prog.linked.opt.aa, line 252
  // ($cast ($uint<64>) l )
  type_cast_585_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_585_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_585_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_585_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/type_cast_585_Update/ca)
  // 		iNsTr_2 := (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  //  file prog.linked.opt.aa, line 253
  // (($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111111  ) - iNsTr_0)
  SUB_u64_u64_591_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SUB_u64_u64_591_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SUB_u64_u64_591_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SUB_u64_u64_591_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SUB_u64_u64_591_Update/ca)
  // 		iNsTr_3 := (iNsTr_2 + iNsTr_1)
  //  file prog.linked.opt.aa, line 254
  // (iNsTr_2 + iNsTr_1)
  ADD_u64_u64_596_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/ADD_u64_u64_596_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/ADD_u64_u64_596_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/ADD_u64_u64_596_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/ADD_u64_u64_596_Update/ca)
  // 		iNsTr_4 := (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 255
  // (iNsTr_3 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111111  ))
  AND_u64_u64_602_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_602_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_602_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_602_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_602_Update/ca)
  // 		iNsTr_5 := (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
  //  file prog.linked.opt.aa, line 256
  // (($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ) >> iNsTr_4)
  LSHR_u64_u64_608_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/LSHR_u64_u64_608_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/LSHR_u64_u64_608_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/LSHR_u64_u64_608_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/LSHR_u64_u64_608_Update/ca)
  // 		iNsTr_6 := (iNsTr_5 & value)
  //  file prog.linked.opt.aa, line 257
  // (iNsTr_5 & value)
  AND_u64_u64_613_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_613_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_613_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_613_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_613_Update/ca)
  // 		iNsTr_7 := (iNsTr_6 << iNsTr_1)
  //  file prog.linked.opt.aa, line 258
  // (iNsTr_6 << iNsTr_1)
  SHL_u64_u64_618_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_618_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_618_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_618_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_618_Update/ca)
  // 		iNsTr_8 := (iNsTr_5 << iNsTr_1)
  //  file prog.linked.opt.aa, line 259
  // (iNsTr_5 << iNsTr_1)
  SHL_u64_u64_623_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_623_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_623_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_623_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/SHL_u64_u64_623_Update/ca)
  // 		iNsTr_9 := (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
  //  file prog.linked.opt.aa, line 260
  // (iNsTr_8 ^ ($bitcast ($uint<64>) _b1111111111111111111111111111111111111111111111111111111111111111  ))
  XOR_u64_u64_629_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/XOR_u64_u64_629_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/XOR_u64_u64_629_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/XOR_u64_u64_629_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/XOR_u64_u64_629_Update/ca)
  // 		iNsTr_10 := (iNsTr_9 & reg)
  //  file prog.linked.opt.aa, line 261
  // (iNsTr_9 & reg)
  AND_u64_u64_634_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_634_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_634_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_634_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/AND_u64_u64_634_Update/ca)
  // 		ret_val__ := (iNsTr_10 | iNsTr_7)
  //  file prog.linked.opt.aa, line 262
  // (iNsTr_10 | iNsTr_7)
  OR_u64_u64_639_inst <=> (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/OR_u64_u64_639_Sample/rr branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/OR_u64_u64_639_Update/cr) (branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/OR_u64_u64_639_Sample/ra branch_block_stmt_578/assign_stmt_582_to_assign_stmt_640/OR_u64_u64_639_Update/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 264
}
$module [theta_calc] 
{
  $in omega_r:$float<8,23>
  // can point into  foreign( $void )
  omega_m:$float<8,23>
  // can point into  foreign( $void )
  del_t:$float<8,23>
  // can point into  foreign( $void )
  theta_prev:$float<8,23>
  // can point into  foreign( $void )
  $out ret_val__:$float<8,23>
  // can point into  foreign( $void )
  // pipe-declarations for block %theta_calc
  //  file prog.linked.opt.aa, line 268
  // pipe-declarations for block %theta_calc%body
  //  file prog.linked.opt.aa, line 273
  // pipe-declarations for block %theta_calc%body%
  //  file prog.linked.opt.aa, line 279
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_651] // Branch Block  file prog.linked.opt.aa, line 273
    {
      $P [branch_block_stmt_651__entry__]
      branch_block_stmt_651__entry__ <-| ($entry)
      $P [branch_block_stmt_651__exit__]
      branch_block_stmt_651__exit__ |-> ($exit)
      $P [call_stmt_655_to_call_stmt_663__entry__] 
      $P [call_stmt_655_to_call_stmt_663__exit__] 
      $P [return__]
      $P [merge_stmt_665__exit__] 
      ::[call_stmt_655_to_call_stmt_663] 
      {
        // 		$call fpmul32f (omega_r omega_m ) (iNsTr_0 ) 
        //  file prog.linked.opt.aa, line 275
        $T[call_stmt_655_sample_start_] 
        $T[call_stmt_655_sample_completed_] 
        $T[call_stmt_655_update_start_] 
        $T[call_stmt_655_update_completed_] 
        // Call input argument 0
        // omega_r
        $T[R_omega_r_652_sample_start_] 
        $T[R_omega_r_652_sample_completed_] 
        $T[R_omega_r_652_update_start_] 
        $T[R_omega_r_652_update_completed_] 
        // reference to interface object
        R_omega_r_652_sample_start_ <-& ($entry)
        R_omega_r_652_sample_completed_ <-& (R_omega_r_652_sample_start_)
        R_omega_r_652_update_start_ <-& (R_omega_r_652_sample_completed_)
        R_omega_r_652_update_completed_ <-& (R_omega_r_652_update_start_)
        // Call input argument 1
        // omega_m
        $T[R_omega_m_653_sample_start_] 
        $T[R_omega_m_653_sample_completed_] 
        $T[R_omega_m_653_update_start_] 
        $T[R_omega_m_653_update_completed_] 
        // reference to interface object
        R_omega_m_653_sample_start_ <-& ($entry)
        R_omega_m_653_sample_completed_ <-& (R_omega_m_653_sample_start_)
        R_omega_m_653_update_start_ <-& (R_omega_m_653_sample_completed_)
        R_omega_m_653_update_completed_ <-& (R_omega_m_653_update_start_)
        call_stmt_655_sample_start_ <-& (R_omega_r_652_update_completed_)
        call_stmt_655_sample_start_ <-& (R_omega_m_653_update_completed_)
        ;;[call_stmt_655_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_655_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_655_sample_start_ &-> (call_stmt_655_Sample)
        call_stmt_655_sample_completed_ <-& (call_stmt_655_Sample)
        call_stmt_655_sample_completed_ &-> ($null)
        call_stmt_655_update_start_ &-> (call_stmt_655_Update)
        call_stmt_655_update_completed_ <-& (call_stmt_655_Update)
        // Call output argument 0
        // (as target) iNsTr_0
        // iNsTr_0
        // implicit reference
        // 		$call fpmul32f (iNsTr_0 del_t ) (iNsTr_1 ) 
        //  file prog.linked.opt.aa, line 276
        $T[call_stmt_659_sample_start_] 
        $T[call_stmt_659_sample_completed_] 
        $T[call_stmt_659_update_start_] 
        $T[call_stmt_659_update_completed_] 
        // Call input argument 0
        // iNsTr_0
        $T[R_iNsTr_0_656_sample_start_] 
        $T[R_iNsTr_0_656_sample_completed_] 
        $T[R_iNsTr_0_656_update_start_] 
        $T[R_iNsTr_0_656_update_completed_] 
        // implicit reference
        R_iNsTr_0_656_sample_start_ <-& (call_stmt_655_update_completed_)
        R_iNsTr_0_656_sample_completed_ <-& (R_iNsTr_0_656_sample_start_)
        R_iNsTr_0_656_update_start_ <-& (R_iNsTr_0_656_sample_completed_)
        R_iNsTr_0_656_update_completed_ <-& (R_iNsTr_0_656_update_start_)
        // Call input argument 1
        // del_t
        $T[R_del_t_657_sample_start_] 
        $T[R_del_t_657_sample_completed_] 
        $T[R_del_t_657_update_start_] 
        $T[R_del_t_657_update_completed_] 
        // reference to interface object
        R_del_t_657_sample_start_ <-& ($entry)
        R_del_t_657_sample_completed_ <-& (R_del_t_657_sample_start_)
        R_del_t_657_update_start_ <-& (R_del_t_657_sample_completed_)
        R_del_t_657_update_completed_ <-& (R_del_t_657_update_start_)
        call_stmt_659_sample_start_ <-& (R_iNsTr_0_656_update_completed_)
        call_stmt_659_sample_start_ <-& (R_del_t_657_update_completed_)
        ;;[call_stmt_659_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_659_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_659_sample_start_ &-> (call_stmt_659_Sample)
        call_stmt_659_sample_completed_ <-& (call_stmt_659_Sample)
        call_stmt_659_sample_completed_ &-> ($null)
        call_stmt_659_update_start_ &-> (call_stmt_659_Update)
        call_stmt_659_update_completed_ <-& (call_stmt_659_Update)
        // Call output argument 0
        // (as target) iNsTr_1
        // iNsTr_1
        // implicit reference
        // 		$call fpadd32f (theta_prev iNsTr_0 ) (ret_val__ ) 
        //  file prog.linked.opt.aa, line 277
        $T[call_stmt_663_sample_start_] 
        $T[call_stmt_663_sample_completed_] 
        $T[call_stmt_663_update_start_] 
        $T[call_stmt_663_update_completed_] 
        // Call input argument 0
        // theta_prev
        $T[R_theta_prev_660_sample_start_] 
        $T[R_theta_prev_660_sample_completed_] 
        $T[R_theta_prev_660_update_start_] 
        $T[R_theta_prev_660_update_completed_] 
        // reference to interface object
        R_theta_prev_660_sample_start_ <-& ($entry)
        R_theta_prev_660_sample_completed_ <-& (R_theta_prev_660_sample_start_)
        R_theta_prev_660_update_start_ <-& (R_theta_prev_660_sample_completed_)
        R_theta_prev_660_update_completed_ <-& (R_theta_prev_660_update_start_)
        // Call input argument 1
        // iNsTr_0
        $T[R_iNsTr_0_661_sample_start_] 
        $T[R_iNsTr_0_661_sample_completed_] 
        $T[R_iNsTr_0_661_update_start_] 
        $T[R_iNsTr_0_661_update_completed_] 
        // implicit reference
        R_iNsTr_0_661_sample_start_ <-& (call_stmt_655_update_completed_)
        R_iNsTr_0_661_sample_completed_ <-& (R_iNsTr_0_661_sample_start_)
        R_iNsTr_0_661_update_start_ <-& (R_iNsTr_0_661_sample_completed_)
        R_iNsTr_0_661_update_completed_ <-& (R_iNsTr_0_661_update_start_)
        call_stmt_663_sample_start_ <-& (R_theta_prev_660_update_completed_)
        call_stmt_663_sample_start_ <-& (R_iNsTr_0_661_update_completed_)
        ;;[call_stmt_663_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_663_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_663_sample_start_ &-> (call_stmt_663_Sample)
        call_stmt_663_sample_completed_ <-& (call_stmt_663_Sample)
        call_stmt_663_sample_completed_ &-> ($null)
        call_stmt_663_update_start_ &-> (call_stmt_663_Update)
        call_stmt_663_update_completed_ <-& (call_stmt_663_Update)
        // Call output argument 0
        // (as target) ret_val__
        // ret_val__
        // write to interface object
        // load-store dependencies..
      }
      call_stmt_655_to_call_stmt_663__entry__ |-> (call_stmt_655_to_call_stmt_663)
      call_stmt_655_to_call_stmt_663__exit__ <-| (call_stmt_655_to_call_stmt_663)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 279
      //---------------------   merge statement  file prog.linked.opt.aa, line 279  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_665_PhiReqMerge] 
      merge_stmt_665_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_665_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_665_PhiReqMerge |-> (merge_stmt_665_PhiAck)
      merge_stmt_665__exit__  <-| (merge_stmt_665_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 279  --------------------------
      call_stmt_655_to_call_stmt_663__entry__ <-| (branch_block_stmt_651__entry__)
      return__ <-| (call_stmt_655_to_call_stmt_663__exit__)
      merge_stmt_665__exit__ |-> (branch_block_stmt_651__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %theta_calc%body%
    //  file prog.linked.opt.aa, line 279
    // constant-object-declarations for block %theta_calc%body
    //  file prog.linked.opt.aa, line 273
    // constant-object-declarations for block %theta_calc
    //  file prog.linked.opt.aa, line 268
    // constant-declarations for block %theta_calc%body
    //  file prog.linked.opt.aa, line 273
    // 		$call fpmul32f (omega_r omega_m ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 275
    // 		$call fpmul32f (iNsTr_0 del_t ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 276
    // 		$call fpadd32f (theta_prev iNsTr_0 ) (ret_val__ ) 
    //  file prog.linked.opt.aa, line 277
    // constant-declarations for block %theta_calc%body%
    //  file prog.linked.opt.aa, line 279
    // block %theta_calc%body
    //  file prog.linked.opt.aa, line 273
    // 		$call fpmul32f (omega_r omega_m ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 275
    // iNsTr_0
    $W[iNsTr_0_655] : $float<8,23>
    // 		$call fpmul32f (iNsTr_0 del_t ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 276
    // iNsTr_1
    $W[iNsTr_1_659] : $float<8,23>
    // 		$call fpadd32f (theta_prev iNsTr_0 ) (ret_val__ ) 
    //  file prog.linked.opt.aa, line 277
    // ret_val__
    // datapath-instances for block %theta_calc%body
    //  file prog.linked.opt.aa, line 273
    // 		$call fpmul32f (omega_r omega_m ) (iNsTr_0 ) 
    //  file prog.linked.opt.aa, line 275
    $call [call_stmt_655_call] $module fpmul32f(omega_r omega_m) (iNsTr_0_655) 
    $delay call_stmt_655_call 2
    // 		$call fpmul32f (iNsTr_0 del_t ) (iNsTr_1 ) 
    //  file prog.linked.opt.aa, line 276
    $call [call_stmt_659_call] $module fpmul32f(iNsTr_0_655 del_t) (iNsTr_1_659) 
    $delay call_stmt_659_call 2
    // 		$call fpadd32f (theta_prev iNsTr_0 ) (ret_val__ ) 
    //  file prog.linked.opt.aa, line 277
    $call [call_stmt_663_call] $module fpadd32f(theta_prev iNsTr_0_655) (ret_val__) 
    $delay call_stmt_663_call 2
  }
  // end data-path
  // 		$call fpmul32f (omega_r omega_m ) (iNsTr_0 ) 
  //  file prog.linked.opt.aa, line 275
  call_stmt_655_call <=> (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_655_Sample/crr branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_655_Update/ccr) (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_655_Sample/cra branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_655_Update/cca)
  // 		$call fpmul32f (iNsTr_0 del_t ) (iNsTr_1 ) 
  //  file prog.linked.opt.aa, line 276
  call_stmt_659_call <=> (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_659_Sample/crr branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_659_Update/ccr) (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_659_Sample/cra branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_659_Update/cca)
  // 		$call fpadd32f (theta_prev iNsTr_0 ) (ret_val__ ) 
  //  file prog.linked.opt.aa, line 277
  call_stmt_663_call <=> (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_663_Sample/crr branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_663_Update/ccr) (branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_663_Sample/cra branch_block_stmt_651/call_stmt_655_to_call_stmt_663/call_stmt_663_Update/cca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 279
}
