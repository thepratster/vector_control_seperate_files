; ModuleID = 'prog.opt.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

@.str = private constant [9 x i8] c"in_data1\00"
@.str1 = private constant [9 x i8] c"in_data2\00"
@.str2 = private constant [9 x i8] c"in_data3\00"
@.str3 = private constant [9 x i8] c"in_data4\00"
@.str4 = private constant [10 x i8] c"out_data1\00"
@.str5 = private constant [10 x i8] c"out_data2\00"
@.str6 = private constant [10 x i8] c"out_data3\00"
@.str7 = private constant [10 x i8] c"out_data4\00"

define void @vector_control_daemon() noreturn nounwind {
; <label>:0
  %1 = tail call float @fpmul32f(float 3.000000e+03, float 4.000000e+00) nounwind
  %2 = tail call float @fpmul32f(float %1, float 0x3FE9E83E40000000) nounwind
  br label %3

; <label>:3                                       ; preds = %68, %0
  %flux_rotor_prev.0 = phi float [ 0.000000e+00, %0 ], [ %49, %68 ]
  %theta_prev.0 = phi float [ 0.000000e+00, %0 ], [ %51, %68 ]
  %int_flux_err.0 = phi float [ 0.000000e+00, %0 ], [ %int_flux_err.1, %68 ]
  %int_speed_err.0 = phi float [ 0.000000e+00, %0 ], [ %int_speed_err.1, %68 ]
  %4 = getelementptr [9 x i8]* @.str, i64 0, i64 0
  %5 = tail call float @read_float32(i8* %4) nounwind
  %6 = getelementptr [9 x i8]* @.str1, i64 0, i64 0
  %7 = tail call float @read_float32(i8* %6) nounwind
  %8 = getelementptr [9 x i8]* @.str2, i64 0, i64 0
  %9 = tail call float @read_float32(i8* %8) nounwind
  %10 = getelementptr [9 x i8]* @.str3, i64 0, i64 0
  %11 = tail call float @read_float32(i8* %10) nounwind
  %12 = tail call float @fpsub32f(float %11, float %9) nounwind
  %13 = tail call float @fpmul32f(float 0x3F0A36E2E0000000, float %12) nounwind
  %14 = tail call float @fpadd32f(float %13, float %int_speed_err.0) nounwind
  %15 = tail call float @fpmul32f(float 5.000000e+01, float %14) nounwind
  %16 = fpext float %15 to double
  %17 = fcmp olt double %16, -1.500000e+01
  br i1 %17, label %21, label %18

; <label>:18                                      ; preds = %3
  %19 = fcmp ogt double %16, 1.500000e+01
  br i1 %19, label %21, label %20

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %20, %18, %3
  %int_speed_err.1 = phi float [ %15, %20 ], [ -1.500000e+01, %3 ], [ 1.500000e+01, %18 ]
  %22 = tail call float @fpmul32f(float %12, float 4.000000e+01) nounwind
  %23 = tail call float @fpadd32f(float %int_speed_err.1, float %22) nounwind
  %24 = fcmp olt float %23, -3.000000e+01
  br i1 %24, label %28, label %25

; <label>:25                                      ; preds = %21
  %26 = fcmp ogt float %23, 3.000000e+01
  br i1 %26, label %28, label %27

; <label>:27                                      ; preds = %25
  br label %28

; <label>:28                                      ; preds = %27, %25, %21
  %torque_ref.0 = phi float [ %23, %27 ], [ -3.000000e+01, %21 ], [ 3.000000e+01, %25 ]
  %29 = fpext float %11 to double
  %30 = fcmp ugt double %29, 2.000000e+03
  br i1 %30, label %31, label %47

; <label>:31                                      ; preds = %28
  %32 = fcmp ugt double %29, 2.500000e+03
  br i1 %32, label %37, label %33

; <label>:33                                      ; preds = %31
  %34 = tail call float @fpmul32f(float 0xBF2A36E2E0000000, float %11) nounwind
  %35 = tail call float @fpadd32f(float %34, float 0x3FF6666660000000) nounwind
  %36 = tail call float @fpmul32f(float %35, float 3.000000e+02) nounwind
  br label %47

; <label>:37                                      ; preds = %31
  %38 = fcmp ugt double %29, 3.000000e+03
  br i1 %38, label %43, label %39

; <label>:39                                      ; preds = %37
  %40 = tail call float @fpmul32f(float 0xBF3797CC40000000, float %11) nounwind
  %41 = tail call float @fpadd32f(float %40, float 0x3FFCCCCCC0000000) nounwind
  %42 = tail call float @fpmul32f(float %41, float 3.000000e+02) nounwind
  br label %47

; <label>:43                                      ; preds = %37
  %44 = tail call float @fpmul32f(float 0xBF3B866E40000000, float %11) nounwind
  %45 = tail call float @fpadd32f(float %44, float 0x3FFFAE1480000000) nounwind
  %46 = tail call float @fpmul32f(float %45, float 3.000000e+02) nounwind
  br label %47

; <label>:47                                      ; preds = %43, %39, %33, %28
  %flux_ref.0 = phi float [ %36, %33 ], [ %42, %39 ], [ %46, %43 ], [ 3.000000e+02, %28 ]
  %48 = tail call float @fpadd32f(float 0x3F0A36E2E0000000, float 0x3FBA9A7C20000000) nounwind
  %49 = tail call float @rotor_flux_calc(float 0x3F0A36E2E0000000, float 0x3FE9E83E40000000, float %5, float %flux_rotor_prev.0, float %48, float 0x3FBA9A7C20000000) nounwind
  %50 = tail call float @omega_calc(float 0x3FE9E83E40000000, float %7, float 0x3FBA9A7C20000000, float %49) nounwind
  %51 = tail call float @theta_calc(float %50, float 0x4073A28C60000000, float 0x3F0A36E2E0000000, float %theta_prev.0) nounwind
  %52 = tail call float @iq_err_calc(float 0x3FEAEF9DC0000000, float %torque_ref.0, float %2, float %49) nounwind
  %53 = tail call float @fpsub32f(float %flux_ref.0, float %49) nounwind
  %54 = tail call float @fpmul32f(float 0x3E6AD7F2A0000000, float %53) nounwind
  %55 = tail call float @fpadd32f(float %54, float %int_flux_err.0) nounwind
  %56 = tail call float @fpmul32f(float 5.000000e+07, float %55) nounwind
  %57 = fcmp olt float %56, -1.000000e+06
  br i1 %57, label %61, label %58

; <label>:58                                      ; preds = %47
  %59 = fcmp ogt float %56, 1.000000e+06
  br i1 %59, label %61, label %60

; <label>:60                                      ; preds = %58
  br label %61

; <label>:61                                      ; preds = %60, %58, %47
  %int_flux_err.1 = phi float [ %56, %60 ], [ -1.000000e+06, %47 ], [ 1.000000e+06, %58 ]
  %62 = tail call float @fpmul32f(float %53, float 4.000000e+07) nounwind
  %63 = tail call float @fpadd32f(float %int_flux_err.1, float %62) nounwind
  %64 = fcmp olt float %63, -2.000000e+06
  br i1 %64, label %68, label %65

; <label>:65                                      ; preds = %61
  %66 = fcmp ogt float %63, 2.000000e+06
  br i1 %66, label %68, label %67

; <label>:67                                      ; preds = %65
  %phitmp = fpext float %63 to double
  br label %68

; <label>:68                                      ; preds = %67, %65, %61
  %flux_add.0 = phi double [ %phitmp, %67 ], [ -2.000000e+06, %61 ], [ 2.000000e+06, %65 ]
  %69 = tail call i32 (...)* @fdiv32(double %flux_add.0, double 8.096000e+05) nounwind
  %70 = sitofp i32 %69 to float
  %71 = getelementptr [10 x i8]* @.str4, i64 0, i64 0
  tail call void @write_float32(i8* %71, float %70) nounwind
  %72 = getelementptr [10 x i8]* @.str5, i64 0, i64 0
  tail call void @write_float32(i8* %72, float %52) nounwind
  %73 = getelementptr [10 x i8]* @.str6, i64 0, i64 0
  tail call void @write_float32(i8* %73, float %50) nounwind
  %74 = getelementptr [10 x i8]* @.str7, i64 0, i64 0
  tail call void @write_float32(i8* %74, float %49) nounwind
  br label %3
}

declare float @fpmul32f(float, float)

declare float @read_float32(i8*)

declare float @fpsub32f(float, float)

declare float @fpadd32f(float, float)

declare float @rotor_flux_calc(float, float, float, float, float, float)

declare float @omega_calc(float, float, float, float)

declare float @theta_calc(float, float, float, float)

declare float @iq_err_calc(float, float, float, float)

declare i32 @fdiv32(...)

declare void @write_float32(i8*, float)
